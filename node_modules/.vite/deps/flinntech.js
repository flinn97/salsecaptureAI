import {
  deleteObject,
  getDownloadURL,
  ref,
  uploadBytes
} from "./chunk-MXWOWSFM.js";
import {
  BrowserRouter,
  Link,
  Route,
  Routes
} from "./chunk-7QAWE5R4.js";
import {
  require_react_dom
} from "./chunk-KDCVS43I.js";
import {
  require_jsx_runtime
} from "./chunk-S725DACQ.js";
import {
  require_react
} from "./chunk-RLJ2RCJQ.js";
import {
  createUserWithEmailAndPassword,
  deleteUser,
  getAuth,
  onAuthStateChanged,
  sendPasswordResetEmail,
  signInWithEmailAndPassword,
  signOut,
  updatePassword
} from "./chunk-23MB4OAC.js";
import "./chunk-H4VKPN7N.js";
import {
  collection,
  deleteDoc,
  doc,
  getCountFromServer,
  getDocs,
  limit,
  onSnapshot,
  orderBy,
  query,
  serverTimestamp,
  setDoc,
  updateDoc,
  where
} from "./chunk-DZYGL5OQ.js";
import "./chunk-XJ6VL6NZ.js";
import {
  __commonJS,
  __export,
  __publicField,
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/lodash/_listCacheClear.js"(exports, module) {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module.exports = listCacheClear;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports, module) {
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module.exports = eq;
  }
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/lodash/_assocIndexOf.js"(exports, module) {
    var eq = require_eq();
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module.exports = assocIndexOf;
  }
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/lodash/_listCacheDelete.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    module.exports = listCacheDelete;
  }
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/lodash/_listCacheGet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    module.exports = listCacheGet;
  }
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/lodash/_listCacheHas.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module.exports = listCacheHas;
  }
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/lodash/_listCacheSet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    module.exports = listCacheSet;
  }
});

// node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/lodash/_ListCache.js"(exports, module) {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
  }
});

// node_modules/lodash/_stackClear.js
var require_stackClear = __commonJS({
  "node_modules/lodash/_stackClear.js"(exports, module) {
    var ListCache = require_ListCache();
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    module.exports = stackClear;
  }
});

// node_modules/lodash/_stackDelete.js
var require_stackDelete = __commonJS({
  "node_modules/lodash/_stackDelete.js"(exports, module) {
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    module.exports = stackDelete;
  }
});

// node_modules/lodash/_stackGet.js
var require_stackGet = __commonJS({
  "node_modules/lodash/_stackGet.js"(exports, module) {
    function stackGet(key) {
      return this.__data__.get(key);
    }
    module.exports = stackGet;
  }
});

// node_modules/lodash/_stackHas.js
var require_stackHas = __commonJS({
  "node_modules/lodash/_stackHas.js"(exports, module) {
    function stackHas(key) {
      return this.__data__.has(key);
    }
    module.exports = stackHas;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module.exports = Symbol2;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module) {
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObject = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module.exports = isFunction;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports, module) {
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module.exports = coreJsData;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports, module) {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module.exports = isMasked;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/lodash/_toSource.js"(exports, module) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    module.exports = toSource;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports, module) {
    var isFunction = require_isFunction();
    var isMasked = require_isMasked();
    var isObject = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module.exports = baseIsNative;
  }
});

// node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/lodash/_getValue.js"(exports, module) {
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    module.exports = getValue;
  }
});

// node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/lodash/_getNative.js"(exports, module) {
    var baseIsNative = require_baseIsNative();
    var getValue = require_getValue();
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    module.exports = getNative;
  }
});

// node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/lodash/_Map.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Map2 = getNative(root, "Map");
    module.exports = Map2;
  }
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/lodash/_nativeCreate.js"(exports, module) {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module.exports = nativeCreate;
  }
});

// node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/lodash/_hashClear.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module.exports = hashClear;
  }
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/lodash/_hashDelete.js"(exports, module) {
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = hashDelete;
  }
});

// node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/lodash/_hashGet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    module.exports = hashGet;
  }
});

// node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/lodash/_hashHas.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    module.exports = hashHas;
  }
});

// node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/lodash/_hashSet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module.exports = hashSet;
  }
});

// node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/lodash/_Hash.js"(exports, module) {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
  }
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/lodash/_mapCacheClear.js"(exports, module) {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    module.exports = mapCacheClear;
  }
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/lodash/_isKeyable.js"(exports, module) {
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module.exports = isKeyable;
  }
});

// node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/lodash/_getMapData.js"(exports, module) {
    var isKeyable = require_isKeyable();
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    module.exports = getMapData;
  }
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/lodash/_mapCacheDelete.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = mapCacheDelete;
  }
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/lodash/_mapCacheGet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module.exports = mapCacheGet;
  }
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/lodash/_mapCacheHas.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module.exports = mapCacheHas;
  }
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/lodash/_mapCacheSet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    module.exports = mapCacheSet;
  }
});

// node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/lodash/_MapCache.js"(exports, module) {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
  }
});

// node_modules/lodash/_stackSet.js
var require_stackSet = __commonJS({
  "node_modules/lodash/_stackSet.js"(exports, module) {
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    var MapCache = require_MapCache();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    module.exports = stackSet;
  }
});

// node_modules/lodash/_Stack.js
var require_Stack = __commonJS({
  "node_modules/lodash/_Stack.js"(exports, module) {
    var ListCache = require_ListCache();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module.exports = Stack;
  }
});

// node_modules/lodash/_setCacheAdd.js
var require_setCacheAdd = __commonJS({
  "node_modules/lodash/_setCacheAdd.js"(exports, module) {
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    module.exports = setCacheAdd;
  }
});

// node_modules/lodash/_setCacheHas.js
var require_setCacheHas = __commonJS({
  "node_modules/lodash/_setCacheHas.js"(exports, module) {
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    module.exports = setCacheHas;
  }
});

// node_modules/lodash/_SetCache.js
var require_SetCache = __commonJS({
  "node_modules/lodash/_SetCache.js"(exports, module) {
    var MapCache = require_MapCache();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module.exports = SetCache;
  }
});

// node_modules/lodash/_arraySome.js
var require_arraySome = __commonJS({
  "node_modules/lodash/_arraySome.js"(exports, module) {
    function arraySome(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    module.exports = arraySome;
  }
});

// node_modules/lodash/_cacheHas.js
var require_cacheHas = __commonJS({
  "node_modules/lodash/_cacheHas.js"(exports, module) {
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    module.exports = cacheHas;
  }
});

// node_modules/lodash/_equalArrays.js
var require_equalArrays = __commonJS({
  "node_modules/lodash/_equalArrays.js"(exports, module) {
    var SetCache = require_SetCache();
    var arraySome = require_arraySome();
    var cacheHas = require_cacheHas();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    module.exports = equalArrays;
  }
});

// node_modules/lodash/_Uint8Array.js
var require_Uint8Array = __commonJS({
  "node_modules/lodash/_Uint8Array.js"(exports, module) {
    var root = require_root();
    var Uint8Array = root.Uint8Array;
    module.exports = Uint8Array;
  }
});

// node_modules/lodash/_mapToArray.js
var require_mapToArray = __commonJS({
  "node_modules/lodash/_mapToArray.js"(exports, module) {
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    module.exports = mapToArray;
  }
});

// node_modules/lodash/_setToArray.js
var require_setToArray = __commonJS({
  "node_modules/lodash/_setToArray.js"(exports, module) {
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    module.exports = setToArray;
  }
});

// node_modules/lodash/_equalByTag.js
var require_equalByTag = __commonJS({
  "node_modules/lodash/_equalByTag.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var Uint8Array = require_Uint8Array();
    var eq = require_eq();
    var equalArrays = require_equalArrays();
    var mapToArray = require_mapToArray();
    var setToArray = require_setToArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    module.exports = equalByTag;
  }
});

// node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  "node_modules/lodash/_arrayPush.js"(exports, module) {
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    module.exports = arrayPush;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module) {
    var isArray = Array.isArray;
    module.exports = isArray;
  }
});

// node_modules/lodash/_baseGetAllKeys.js
var require_baseGetAllKeys = __commonJS({
  "node_modules/lodash/_baseGetAllKeys.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isArray = require_isArray();
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    module.exports = baseGetAllKeys;
  }
});

// node_modules/lodash/_arrayFilter.js
var require_arrayFilter = __commonJS({
  "node_modules/lodash/_arrayFilter.js"(exports, module) {
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module.exports = arrayFilter;
  }
});

// node_modules/lodash/stubArray.js
var require_stubArray = __commonJS({
  "node_modules/lodash/stubArray.js"(exports, module) {
    function stubArray() {
      return [];
    }
    module.exports = stubArray;
  }
});

// node_modules/lodash/_getSymbols.js
var require_getSymbols = __commonJS({
  "node_modules/lodash/_getSymbols.js"(exports, module) {
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto = Object.prototype;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    module.exports = getSymbols;
  }
});

// node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  "node_modules/lodash/_baseTimes.js"(exports, module) {
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    module.exports = baseTimes;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/lodash/_baseIsArguments.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module.exports = baseIsArguments;
  }
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/lodash/isArguments.js"(exports, module) {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module.exports = isArguments;
  }
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  "node_modules/lodash/stubFalse.js"(exports, module) {
    function stubFalse() {
      return false;
    }
    module.exports = stubFalse;
  }
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  "node_modules/lodash/isBuffer.js"(exports, module) {
    var root = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module.exports = isIndex;
  }
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/lodash/isLength.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module.exports = isLength;
  }
});

// node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  "node_modules/lodash/_baseIsTypedArray.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module.exports = baseIsTypedArray;
  }
});

// node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  "node_modules/lodash/_baseUnary.js"(exports, module) {
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    module.exports = baseUnary;
  }
});

// node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  "node_modules/lodash/_nodeUtil.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    module.exports = nodeUtil;
  }
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/lodash/isTypedArray.js"(exports, module) {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module.exports = isTypedArray;
  }
});

// node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  "node_modules/lodash/_arrayLikeKeys.js"(exports, module) {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = arrayLikeKeys;
  }
});

// node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  "node_modules/lodash/_isPrototype.js"(exports, module) {
    var objectProto = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    module.exports = isPrototype;
  }
});

// node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "node_modules/lodash/_overArg.js"(exports, module) {
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    module.exports = overArg;
  }
});

// node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  "node_modules/lodash/_nativeKeys.js"(exports, module) {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module.exports = nativeKeys;
  }
});

// node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  "node_modules/lodash/_baseKeys.js"(exports, module) {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeys;
  }
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/lodash/isArrayLike.js"(exports, module) {
    var isFunction = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    module.exports = isArrayLike;
  }
});

// node_modules/lodash/keys.js
var require_keys = __commonJS({
  "node_modules/lodash/keys.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module.exports = keys;
  }
});

// node_modules/lodash/_getAllKeys.js
var require_getAllKeys = __commonJS({
  "node_modules/lodash/_getAllKeys.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys = require_keys();
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    module.exports = getAllKeys;
  }
});

// node_modules/lodash/_equalObjects.js
var require_equalObjects = __commonJS({
  "node_modules/lodash/_equalObjects.js"(exports, module) {
    var getAllKeys = require_getAllKeys();
    var COMPARE_PARTIAL_FLAG = 1;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    module.exports = equalObjects;
  }
});

// node_modules/lodash/_DataView.js
var require_DataView = __commonJS({
  "node_modules/lodash/_DataView.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var DataView = getNative(root, "DataView");
    module.exports = DataView;
  }
});

// node_modules/lodash/_Promise.js
var require_Promise = __commonJS({
  "node_modules/lodash/_Promise.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Promise2 = getNative(root, "Promise");
    module.exports = Promise2;
  }
});

// node_modules/lodash/_Set.js
var require_Set = __commonJS({
  "node_modules/lodash/_Set.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Set2 = getNative(root, "Set");
    module.exports = Set2;
  }
});

// node_modules/lodash/_WeakMap.js
var require_WeakMap = __commonJS({
  "node_modules/lodash/_WeakMap.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var WeakMap = getNative(root, "WeakMap");
    module.exports = WeakMap;
  }
});

// node_modules/lodash/_getTag.js
var require_getTag = __commonJS({
  "node_modules/lodash/_getTag.js"(exports, module) {
    var DataView = require_DataView();
    var Map2 = require_Map();
    var Promise2 = require_Promise();
    var Set2 = require_Set();
    var WeakMap = require_WeakMap();
    var baseGetTag = require_baseGetTag();
    var toSource = require_toSource();
    var mapTag = "[object Map]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag = "[object Set]";
    var weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap);
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    module.exports = getTag;
  }
});

// node_modules/lodash/_baseIsEqualDeep.js
var require_baseIsEqualDeep = __commonJS({
  "node_modules/lodash/_baseIsEqualDeep.js"(exports, module) {
    var Stack = require_Stack();
    var equalArrays = require_equalArrays();
    var equalByTag = require_equalByTag();
    var equalObjects = require_equalObjects();
    var getTag = require_getTag();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isTypedArray = require_isTypedArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    module.exports = baseIsEqualDeep;
  }
});

// node_modules/lodash/_baseIsEqual.js
var require_baseIsEqual = __commonJS({
  "node_modules/lodash/_baseIsEqual.js"(exports, module) {
    var baseIsEqualDeep = require_baseIsEqualDeep();
    var isObjectLike = require_isObjectLike();
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    module.exports = baseIsEqual;
  }
});

// node_modules/lodash/isEqual.js
var require_isEqual = __commonJS({
  "node_modules/lodash/isEqual.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }
    module.exports = isEqual;
  }
});

// node_modules/quill/dist/quill.js
var require_quill = __commonJS({
  "node_modules/quill/dist/quill.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory();
      else if (typeof define === "function" && define.amd)
        define([], factory);
      else if (typeof exports === "object")
        exports["Quill"] = factory();
      else
        root["Quill"] = factory();
    })(typeof self !== "undefined" ? self : exports, function() {
      return (
        /******/
        function(modules) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module2 = installedModules[moduleId] = {
              /******/
              i: moduleId,
              /******/
              l: false,
              /******/
              exports: {}
              /******/
            };
            modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
            module2.l = true;
            return module2.exports;
          }
          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;
          __webpack_require__.d = function(exports2, name, getter) {
            if (!__webpack_require__.o(exports2, name)) {
              Object.defineProperty(exports2, name, {
                /******/
                configurable: false,
                /******/
                enumerable: true,
                /******/
                get: getter
                /******/
              });
            }
          };
          __webpack_require__.n = function(module2) {
            var getter = module2 && module2.__esModule ? (
              /******/
              function getDefault() {
                return module2["default"];
              }
            ) : (
              /******/
              function getModuleExports() {
                return module2;
              }
            );
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          __webpack_require__.p = "";
          return __webpack_require__(__webpack_require__.s = 109);
        }([
          /* 0 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", { value: true });
            var container_1 = __webpack_require__(17);
            var format_1 = __webpack_require__(18);
            var leaf_1 = __webpack_require__(19);
            var scroll_1 = __webpack_require__(45);
            var inline_1 = __webpack_require__(46);
            var block_1 = __webpack_require__(47);
            var embed_1 = __webpack_require__(48);
            var text_1 = __webpack_require__(49);
            var attributor_1 = __webpack_require__(12);
            var class_1 = __webpack_require__(32);
            var style_1 = __webpack_require__(33);
            var store_1 = __webpack_require__(31);
            var Registry = __webpack_require__(1);
            var Parchment = {
              Scope: Registry.Scope,
              create: Registry.create,
              find: Registry.find,
              query: Registry.query,
              register: Registry.register,
              Container: container_1.default,
              Format: format_1.default,
              Leaf: leaf_1.default,
              Embed: embed_1.default,
              Scroll: scroll_1.default,
              Block: block_1.default,
              Inline: inline_1.default,
              Text: text_1.default,
              Attributor: {
                Attribute: attributor_1.default,
                Class: class_1.default,
                Style: style_1.default,
                Store: store_1.default
              }
            };
            exports2.default = Parchment;
          },
          /* 1 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
                d.__proto__ = b;
              } || function(d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
              return function(d, b) {
                extendStatics(d, b);
                function __() {
                  this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var ParchmentError = (
              /** @class */
              function(_super) {
                __extends(ParchmentError2, _super);
                function ParchmentError2(message) {
                  var _this = this;
                  message = "[Parchment] " + message;
                  _this = _super.call(this, message) || this;
                  _this.message = message;
                  _this.name = _this.constructor.name;
                  return _this;
                }
                return ParchmentError2;
              }(Error)
            );
            exports2.ParchmentError = ParchmentError;
            var attributes = {};
            var classes = {};
            var tags = {};
            var types = {};
            exports2.DATA_KEY = "__blot";
            var Scope;
            (function(Scope2) {
              Scope2[Scope2["TYPE"] = 3] = "TYPE";
              Scope2[Scope2["LEVEL"] = 12] = "LEVEL";
              Scope2[Scope2["ATTRIBUTE"] = 13] = "ATTRIBUTE";
              Scope2[Scope2["BLOT"] = 14] = "BLOT";
              Scope2[Scope2["INLINE"] = 7] = "INLINE";
              Scope2[Scope2["BLOCK"] = 11] = "BLOCK";
              Scope2[Scope2["BLOCK_BLOT"] = 10] = "BLOCK_BLOT";
              Scope2[Scope2["INLINE_BLOT"] = 6] = "INLINE_BLOT";
              Scope2[Scope2["BLOCK_ATTRIBUTE"] = 9] = "BLOCK_ATTRIBUTE";
              Scope2[Scope2["INLINE_ATTRIBUTE"] = 5] = "INLINE_ATTRIBUTE";
              Scope2[Scope2["ANY"] = 15] = "ANY";
            })(Scope = exports2.Scope || (exports2.Scope = {}));
            function create(input, value) {
              var match = query2(input);
              if (match == null) {
                throw new ParchmentError("Unable to create " + input + " blot");
              }
              var BlotClass = match;
              var node = (
                // @ts-ignore
                input instanceof Node || input["nodeType"] === Node.TEXT_NODE ? input : BlotClass.create(value)
              );
              return new BlotClass(node, value);
            }
            exports2.create = create;
            function find(node, bubble) {
              if (bubble === void 0) {
                bubble = false;
              }
              if (node == null)
                return null;
              if (node[exports2.DATA_KEY] != null)
                return node[exports2.DATA_KEY].blot;
              if (bubble)
                return find(node.parentNode, bubble);
              return null;
            }
            exports2.find = find;
            function query2(query3, scope) {
              if (scope === void 0) {
                scope = Scope.ANY;
              }
              var match;
              if (typeof query3 === "string") {
                match = types[query3] || attributes[query3];
              } else if (query3 instanceof Text || query3["nodeType"] === Node.TEXT_NODE) {
                match = types["text"];
              } else if (typeof query3 === "number") {
                if (query3 & Scope.LEVEL & Scope.BLOCK) {
                  match = types["block"];
                } else if (query3 & Scope.LEVEL & Scope.INLINE) {
                  match = types["inline"];
                }
              } else if (query3 instanceof HTMLElement) {
                var names = (query3.getAttribute("class") || "").split(/\s+/);
                for (var i in names) {
                  match = classes[names[i]];
                  if (match)
                    break;
                }
                match = match || tags[query3.tagName];
              }
              if (match == null)
                return null;
              if (scope & Scope.LEVEL & match.scope && scope & Scope.TYPE & match.scope)
                return match;
              return null;
            }
            exports2.query = query2;
            function register() {
              var Definitions = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                Definitions[_i] = arguments[_i];
              }
              if (Definitions.length > 1) {
                return Definitions.map(function(d) {
                  return register(d);
                });
              }
              var Definition = Definitions[0];
              if (typeof Definition.blotName !== "string" && typeof Definition.attrName !== "string") {
                throw new ParchmentError("Invalid definition");
              } else if (Definition.blotName === "abstract") {
                throw new ParchmentError("Cannot register abstract class");
              }
              types[Definition.blotName || Definition.attrName] = Definition;
              if (typeof Definition.keyName === "string") {
                attributes[Definition.keyName] = Definition;
              } else {
                if (Definition.className != null) {
                  classes[Definition.className] = Definition;
                }
                if (Definition.tagName != null) {
                  if (Array.isArray(Definition.tagName)) {
                    Definition.tagName = Definition.tagName.map(function(tagName) {
                      return tagName.toUpperCase();
                    });
                  } else {
                    Definition.tagName = Definition.tagName.toUpperCase();
                  }
                  var tagNames = Array.isArray(Definition.tagName) ? Definition.tagName : [Definition.tagName];
                  tagNames.forEach(function(tag) {
                    if (tags[tag] == null || Definition.className == null) {
                      tags[tag] = Definition;
                    }
                  });
                }
              }
              return Definition;
            }
            exports2.register = register;
          },
          /* 2 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var diff = __webpack_require__(51);
            var equal = __webpack_require__(11);
            var extend = __webpack_require__(3);
            var op = __webpack_require__(20);
            var NULL_CHARACTER = String.fromCharCode(0);
            var Delta = function(ops) {
              if (Array.isArray(ops)) {
                this.ops = ops;
              } else if (ops != null && Array.isArray(ops.ops)) {
                this.ops = ops.ops;
              } else {
                this.ops = [];
              }
            };
            Delta.prototype.insert = function(text, attributes) {
              var newOp = {};
              if (text.length === 0) return this;
              newOp.insert = text;
              if (attributes != null && typeof attributes === "object" && Object.keys(attributes).length > 0) {
                newOp.attributes = attributes;
              }
              return this.push(newOp);
            };
            Delta.prototype["delete"] = function(length) {
              if (length <= 0) return this;
              return this.push({ "delete": length });
            };
            Delta.prototype.retain = function(length, attributes) {
              if (length <= 0) return this;
              var newOp = { retain: length };
              if (attributes != null && typeof attributes === "object" && Object.keys(attributes).length > 0) {
                newOp.attributes = attributes;
              }
              return this.push(newOp);
            };
            Delta.prototype.push = function(newOp) {
              var index = this.ops.length;
              var lastOp = this.ops[index - 1];
              newOp = extend(true, {}, newOp);
              if (typeof lastOp === "object") {
                if (typeof newOp["delete"] === "number" && typeof lastOp["delete"] === "number") {
                  this.ops[index - 1] = { "delete": lastOp["delete"] + newOp["delete"] };
                  return this;
                }
                if (typeof lastOp["delete"] === "number" && newOp.insert != null) {
                  index -= 1;
                  lastOp = this.ops[index - 1];
                  if (typeof lastOp !== "object") {
                    this.ops.unshift(newOp);
                    return this;
                  }
                }
                if (equal(newOp.attributes, lastOp.attributes)) {
                  if (typeof newOp.insert === "string" && typeof lastOp.insert === "string") {
                    this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };
                    if (typeof newOp.attributes === "object") this.ops[index - 1].attributes = newOp.attributes;
                    return this;
                  } else if (typeof newOp.retain === "number" && typeof lastOp.retain === "number") {
                    this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };
                    if (typeof newOp.attributes === "object") this.ops[index - 1].attributes = newOp.attributes;
                    return this;
                  }
                }
              }
              if (index === this.ops.length) {
                this.ops.push(newOp);
              } else {
                this.ops.splice(index, 0, newOp);
              }
              return this;
            };
            Delta.prototype.chop = function() {
              var lastOp = this.ops[this.ops.length - 1];
              if (lastOp && lastOp.retain && !lastOp.attributes) {
                this.ops.pop();
              }
              return this;
            };
            Delta.prototype.filter = function(predicate) {
              return this.ops.filter(predicate);
            };
            Delta.prototype.forEach = function(predicate) {
              this.ops.forEach(predicate);
            };
            Delta.prototype.map = function(predicate) {
              return this.ops.map(predicate);
            };
            Delta.prototype.partition = function(predicate) {
              var passed = [], failed = [];
              this.forEach(function(op2) {
                var target = predicate(op2) ? passed : failed;
                target.push(op2);
              });
              return [passed, failed];
            };
            Delta.prototype.reduce = function(predicate, initial) {
              return this.ops.reduce(predicate, initial);
            };
            Delta.prototype.changeLength = function() {
              return this.reduce(function(length, elem) {
                if (elem.insert) {
                  return length + op.length(elem);
                } else if (elem.delete) {
                  return length - elem.delete;
                }
                return length;
              }, 0);
            };
            Delta.prototype.length = function() {
              return this.reduce(function(length, elem) {
                return length + op.length(elem);
              }, 0);
            };
            Delta.prototype.slice = function(start, end) {
              start = start || 0;
              if (typeof end !== "number") end = Infinity;
              var ops = [];
              var iter = op.iterator(this.ops);
              var index = 0;
              while (index < end && iter.hasNext()) {
                var nextOp;
                if (index < start) {
                  nextOp = iter.next(start - index);
                } else {
                  nextOp = iter.next(end - index);
                  ops.push(nextOp);
                }
                index += op.length(nextOp);
              }
              return new Delta(ops);
            };
            Delta.prototype.compose = function(other) {
              var thisIter = op.iterator(this.ops);
              var otherIter = op.iterator(other.ops);
              var ops = [];
              var firstOther = otherIter.peek();
              if (firstOther != null && typeof firstOther.retain === "number" && firstOther.attributes == null) {
                var firstLeft = firstOther.retain;
                while (thisIter.peekType() === "insert" && thisIter.peekLength() <= firstLeft) {
                  firstLeft -= thisIter.peekLength();
                  ops.push(thisIter.next());
                }
                if (firstOther.retain - firstLeft > 0) {
                  otherIter.next(firstOther.retain - firstLeft);
                }
              }
              var delta = new Delta(ops);
              while (thisIter.hasNext() || otherIter.hasNext()) {
                if (otherIter.peekType() === "insert") {
                  delta.push(otherIter.next());
                } else if (thisIter.peekType() === "delete") {
                  delta.push(thisIter.next());
                } else {
                  var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
                  var thisOp = thisIter.next(length);
                  var otherOp = otherIter.next(length);
                  if (typeof otherOp.retain === "number") {
                    var newOp = {};
                    if (typeof thisOp.retain === "number") {
                      newOp.retain = length;
                    } else {
                      newOp.insert = thisOp.insert;
                    }
                    var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === "number");
                    if (attributes) newOp.attributes = attributes;
                    delta.push(newOp);
                    if (!otherIter.hasNext() && equal(delta.ops[delta.ops.length - 1], newOp)) {
                      var rest = new Delta(thisIter.rest());
                      return delta.concat(rest).chop();
                    }
                  } else if (typeof otherOp["delete"] === "number" && typeof thisOp.retain === "number") {
                    delta.push(otherOp);
                  }
                }
              }
              return delta.chop();
            };
            Delta.prototype.concat = function(other) {
              var delta = new Delta(this.ops.slice());
              if (other.ops.length > 0) {
                delta.push(other.ops[0]);
                delta.ops = delta.ops.concat(other.ops.slice(1));
              }
              return delta;
            };
            Delta.prototype.diff = function(other, index) {
              if (this.ops === other.ops) {
                return new Delta();
              }
              var strings = [this, other].map(function(delta2) {
                return delta2.map(function(op2) {
                  if (op2.insert != null) {
                    return typeof op2.insert === "string" ? op2.insert : NULL_CHARACTER;
                  }
                  var prep = delta2 === other ? "on" : "with";
                  throw new Error("diff() called " + prep + " non-document");
                }).join("");
              });
              var delta = new Delta();
              var diffResult = diff(strings[0], strings[1], index);
              var thisIter = op.iterator(this.ops);
              var otherIter = op.iterator(other.ops);
              diffResult.forEach(function(component) {
                var length = component[1].length;
                while (length > 0) {
                  var opLength = 0;
                  switch (component[0]) {
                    case diff.INSERT:
                      opLength = Math.min(otherIter.peekLength(), length);
                      delta.push(otherIter.next(opLength));
                      break;
                    case diff.DELETE:
                      opLength = Math.min(length, thisIter.peekLength());
                      thisIter.next(opLength);
                      delta["delete"](opLength);
                      break;
                    case diff.EQUAL:
                      opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
                      var thisOp = thisIter.next(opLength);
                      var otherOp = otherIter.next(opLength);
                      if (equal(thisOp.insert, otherOp.insert)) {
                        delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));
                      } else {
                        delta.push(otherOp)["delete"](opLength);
                      }
                      break;
                  }
                  length -= opLength;
                }
              });
              return delta.chop();
            };
            Delta.prototype.eachLine = function(predicate, newline) {
              newline = newline || "\n";
              var iter = op.iterator(this.ops);
              var line = new Delta();
              var i = 0;
              while (iter.hasNext()) {
                if (iter.peekType() !== "insert") return;
                var thisOp = iter.peek();
                var start = op.length(thisOp) - iter.peekLength();
                var index = typeof thisOp.insert === "string" ? thisOp.insert.indexOf(newline, start) - start : -1;
                if (index < 0) {
                  line.push(iter.next());
                } else if (index > 0) {
                  line.push(iter.next(index));
                } else {
                  if (predicate(line, iter.next(1).attributes || {}, i) === false) {
                    return;
                  }
                  i += 1;
                  line = new Delta();
                }
              }
              if (line.length() > 0) {
                predicate(line, {}, i);
              }
            };
            Delta.prototype.transform = function(other, priority) {
              priority = !!priority;
              if (typeof other === "number") {
                return this.transformPosition(other, priority);
              }
              var thisIter = op.iterator(this.ops);
              var otherIter = op.iterator(other.ops);
              var delta = new Delta();
              while (thisIter.hasNext() || otherIter.hasNext()) {
                if (thisIter.peekType() === "insert" && (priority || otherIter.peekType() !== "insert")) {
                  delta.retain(op.length(thisIter.next()));
                } else if (otherIter.peekType() === "insert") {
                  delta.push(otherIter.next());
                } else {
                  var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
                  var thisOp = thisIter.next(length);
                  var otherOp = otherIter.next(length);
                  if (thisOp["delete"]) {
                    continue;
                  } else if (otherOp["delete"]) {
                    delta.push(otherOp);
                  } else {
                    delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));
                  }
                }
              }
              return delta.chop();
            };
            Delta.prototype.transformPosition = function(index, priority) {
              priority = !!priority;
              var thisIter = op.iterator(this.ops);
              var offset = 0;
              while (thisIter.hasNext() && offset <= index) {
                var length = thisIter.peekLength();
                var nextType = thisIter.peekType();
                thisIter.next();
                if (nextType === "delete") {
                  index -= Math.min(length, index - offset);
                  continue;
                } else if (nextType === "insert" && (offset < index || !priority)) {
                  index += length;
                }
                offset += length;
              }
              return index;
            };
            module2.exports = Delta;
          },
          /* 3 */
          /***/
          function(module2, exports2) {
            "use strict";
            var hasOwn = Object.prototype.hasOwnProperty;
            var toStr = Object.prototype.toString;
            var defineProperty = Object.defineProperty;
            var gOPD = Object.getOwnPropertyDescriptor;
            var isArray = function isArray2(arr) {
              if (typeof Array.isArray === "function") {
                return Array.isArray(arr);
              }
              return toStr.call(arr) === "[object Array]";
            };
            var isPlainObject = function isPlainObject2(obj) {
              if (!obj || toStr.call(obj) !== "[object Object]") {
                return false;
              }
              var hasOwnConstructor = hasOwn.call(obj, "constructor");
              var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
              if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
                return false;
              }
              var key;
              for (key in obj) {
              }
              return typeof key === "undefined" || hasOwn.call(obj, key);
            };
            var setProperty = function setProperty2(target, options) {
              if (defineProperty && options.name === "__proto__") {
                defineProperty(target, options.name, {
                  enumerable: true,
                  configurable: true,
                  value: options.newValue,
                  writable: true
                });
              } else {
                target[options.name] = options.newValue;
              }
            };
            var getProperty = function getProperty2(obj, name) {
              if (name === "__proto__") {
                if (!hasOwn.call(obj, name)) {
                  return void 0;
                } else if (gOPD) {
                  return gOPD(obj, name).value;
                }
              }
              return obj[name];
            };
            module2.exports = function extend() {
              var options, name, src, copy, copyIsArray, clone;
              var target = arguments[0];
              var i = 1;
              var length = arguments.length;
              var deep = false;
              if (typeof target === "boolean") {
                deep = target;
                target = arguments[1] || {};
                i = 2;
              }
              if (target == null || typeof target !== "object" && typeof target !== "function") {
                target = {};
              }
              for (; i < length; ++i) {
                options = arguments[i];
                if (options != null) {
                  for (name in options) {
                    src = getProperty(target, name);
                    copy = getProperty(options, name);
                    if (target !== copy) {
                      if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
                        if (copyIsArray) {
                          copyIsArray = false;
                          clone = src && isArray(src) ? src : [];
                        } else {
                          clone = src && isPlainObject(src) ? src : {};
                        }
                        setProperty(target, { name, newValue: extend(deep, clone, copy) });
                      } else if (typeof copy !== "undefined") {
                        setProperty(target, { name, newValue: copy });
                      }
                    }
                  }
                }
              }
              return target;
            };
          },
          /* 4 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = exports2.BlockEmbed = exports2.bubbleFormats = void 0;
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _break = __webpack_require__(16);
            var _break2 = _interopRequireDefault(_break);
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            var _text = __webpack_require__(7);
            var _text2 = _interopRequireDefault(_text);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var NEWLINE_LENGTH = 1;
            var BlockEmbed = function(_Parchment$Embed) {
              _inherits(BlockEmbed2, _Parchment$Embed);
              function BlockEmbed2() {
                _classCallCheck(this, BlockEmbed2);
                return _possibleConstructorReturn(this, (BlockEmbed2.__proto__ || Object.getPrototypeOf(BlockEmbed2)).apply(this, arguments));
              }
              _createClass(BlockEmbed2, [{
                key: "attach",
                value: function attach() {
                  _get(BlockEmbed2.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed2.prototype), "attach", this).call(this);
                  this.attributes = new _parchment2.default.Attributor.Store(this.domNode);
                }
              }, {
                key: "delta",
                value: function delta() {
                  return new _quillDelta2.default().insert(this.value(), (0, _extend2.default)(this.formats(), this.attributes.values()));
                }
              }, {
                key: "format",
                value: function format(name, value) {
                  var attribute = _parchment2.default.query(name, _parchment2.default.Scope.BLOCK_ATTRIBUTE);
                  if (attribute != null) {
                    this.attributes.attribute(attribute, value);
                  }
                }
              }, {
                key: "formatAt",
                value: function formatAt(index, length, name, value) {
                  this.format(name, value);
                }
              }, {
                key: "insertAt",
                value: function insertAt(index, value, def) {
                  if (typeof value === "string" && value.endsWith("\n")) {
                    var block = _parchment2.default.create(Block.blotName);
                    this.parent.insertBefore(block, index === 0 ? this : this.next);
                    block.insertAt(0, value.slice(0, -1));
                  } else {
                    _get(BlockEmbed2.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed2.prototype), "insertAt", this).call(this, index, value, def);
                  }
                }
              }]);
              return BlockEmbed2;
            }(_parchment2.default.Embed);
            BlockEmbed.scope = _parchment2.default.Scope.BLOCK_BLOT;
            var Block = function(_Parchment$Block) {
              _inherits(Block2, _Parchment$Block);
              function Block2(domNode) {
                _classCallCheck(this, Block2);
                var _this2 = _possibleConstructorReturn(this, (Block2.__proto__ || Object.getPrototypeOf(Block2)).call(this, domNode));
                _this2.cache = {};
                return _this2;
              }
              _createClass(Block2, [{
                key: "delta",
                value: function delta() {
                  if (this.cache.delta == null) {
                    this.cache.delta = this.descendants(_parchment2.default.Leaf).reduce(function(delta2, leaf) {
                      if (leaf.length() === 0) {
                        return delta2;
                      } else {
                        return delta2.insert(leaf.value(), bubbleFormats(leaf));
                      }
                    }, new _quillDelta2.default()).insert("\n", bubbleFormats(this));
                  }
                  return this.cache.delta;
                }
              }, {
                key: "deleteAt",
                value: function deleteAt(index, length) {
                  _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "deleteAt", this).call(this, index, length);
                  this.cache = {};
                }
              }, {
                key: "formatAt",
                value: function formatAt(index, length, name, value) {
                  if (length <= 0) return;
                  if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
                    if (index + length === this.length()) {
                      this.format(name, value);
                    }
                  } else {
                    _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "formatAt", this).call(this, index, Math.min(length, this.length() - index - 1), name, value);
                  }
                  this.cache = {};
                }
              }, {
                key: "insertAt",
                value: function insertAt(index, value, def) {
                  if (def != null) return _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "insertAt", this).call(this, index, value, def);
                  if (value.length === 0) return;
                  var lines = value.split("\n");
                  var text = lines.shift();
                  if (text.length > 0) {
                    if (index < this.length() - 1 || this.children.tail == null) {
                      _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "insertAt", this).call(this, Math.min(index, this.length() - 1), text);
                    } else {
                      this.children.tail.insertAt(this.children.tail.length(), text);
                    }
                    this.cache = {};
                  }
                  var block = this;
                  lines.reduce(function(index2, line) {
                    block = block.split(index2, true);
                    block.insertAt(0, line);
                    return line.length;
                  }, index + text.length);
                }
              }, {
                key: "insertBefore",
                value: function insertBefore(blot, ref2) {
                  var head = this.children.head;
                  _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "insertBefore", this).call(this, blot, ref2);
                  if (head instanceof _break2.default) {
                    head.remove();
                  }
                  this.cache = {};
                }
              }, {
                key: "length",
                value: function length() {
                  if (this.cache.length == null) {
                    this.cache.length = _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "length", this).call(this) + NEWLINE_LENGTH;
                  }
                  return this.cache.length;
                }
              }, {
                key: "moveChildren",
                value: function moveChildren(target, ref2) {
                  _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "moveChildren", this).call(this, target, ref2);
                  this.cache = {};
                }
              }, {
                key: "optimize",
                value: function optimize(context) {
                  _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "optimize", this).call(this, context);
                  this.cache = {};
                }
              }, {
                key: "path",
                value: function path(index) {
                  return _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "path", this).call(this, index, true);
                }
              }, {
                key: "removeChild",
                value: function removeChild(child) {
                  _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "removeChild", this).call(this, child);
                  this.cache = {};
                }
              }, {
                key: "split",
                value: function split(index) {
                  var force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                  if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {
                    var clone = this.clone();
                    if (index === 0) {
                      this.parent.insertBefore(clone, this);
                      return this;
                    } else {
                      this.parent.insertBefore(clone, this.next);
                      return clone;
                    }
                  } else {
                    var next = _get(Block2.prototype.__proto__ || Object.getPrototypeOf(Block2.prototype), "split", this).call(this, index, force);
                    this.cache = {};
                    return next;
                  }
                }
              }]);
              return Block2;
            }(_parchment2.default.Block);
            Block.blotName = "block";
            Block.tagName = "P";
            Block.defaultChild = "break";
            Block.allowedChildren = [_inline2.default, _parchment2.default.Embed, _text2.default];
            function bubbleFormats(blot) {
              var formats = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              if (blot == null) return formats;
              if (typeof blot.formats === "function") {
                formats = (0, _extend2.default)(formats, blot.formats());
              }
              if (blot.parent == null || blot.parent.blotName == "scroll" || blot.parent.statics.scope !== blot.statics.scope) {
                return formats;
              }
              return bubbleFormats(blot.parent, formats);
            }
            exports2.bubbleFormats = bubbleFormats;
            exports2.BlockEmbed = BlockEmbed;
            exports2.default = Block;
          },
          /* 5 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = exports2.overload = exports2.expandConfig = void 0;
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var _slicedToArray = /* @__PURE__ */ function() {
              function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i) break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"]) _i["return"]();
                  } finally {
                    if (_d) throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            __webpack_require__(50);
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _editor = __webpack_require__(14);
            var _editor2 = _interopRequireDefault(_editor);
            var _emitter3 = __webpack_require__(8);
            var _emitter4 = _interopRequireDefault(_emitter3);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _selection = __webpack_require__(15);
            var _selection2 = _interopRequireDefault(_selection);
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            var _logger = __webpack_require__(10);
            var _logger2 = _interopRequireDefault(_logger);
            var _theme = __webpack_require__(34);
            var _theme2 = _interopRequireDefault(_theme);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _defineProperty(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var debug = (0, _logger2.default)("quill");
            var Quill = function() {
              _createClass(Quill2, null, [{
                key: "debug",
                value: function debug2(limit2) {
                  if (limit2 === true) {
                    limit2 = "log";
                  }
                  _logger2.default.level(limit2);
                }
              }, {
                key: "find",
                value: function find(node) {
                  return node.__quill || _parchment2.default.find(node);
                }
              }, {
                key: "import",
                value: function _import(name) {
                  if (this.imports[name] == null) {
                    debug.error("Cannot import " + name + ". Are you sure it was registered?");
                  }
                  return this.imports[name];
                }
              }, {
                key: "register",
                value: function register(path, target) {
                  var _this = this;
                  var overwrite = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
                  if (typeof path !== "string") {
                    var name = path.attrName || path.blotName;
                    if (typeof name === "string") {
                      this.register("formats/" + name, path, target);
                    } else {
                      Object.keys(path).forEach(function(key) {
                        _this.register(key, path[key], target);
                      });
                    }
                  } else {
                    if (this.imports[path] != null && !overwrite) {
                      debug.warn("Overwriting " + path + " with", target);
                    }
                    this.imports[path] = target;
                    if ((path.startsWith("blots/") || path.startsWith("formats/")) && target.blotName !== "abstract") {
                      _parchment2.default.register(target);
                    } else if (path.startsWith("modules") && typeof target.register === "function") {
                      target.register();
                    }
                  }
                }
              }]);
              function Quill2(container) {
                var _this2 = this;
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                _classCallCheck(this, Quill2);
                this.options = expandConfig(container, options);
                this.container = this.options.container;
                if (this.container == null) {
                  return debug.error("Invalid Quill container", container);
                }
                if (this.options.debug) {
                  Quill2.debug(this.options.debug);
                }
                var html = this.container.innerHTML.trim();
                this.container.classList.add("ql-container");
                this.container.innerHTML = "";
                this.container.__quill = this;
                this.root = this.addContainer("ql-editor");
                this.root.classList.add("ql-blank");
                this.root.setAttribute("data-gramm", false);
                this.scrollingContainer = this.options.scrollingContainer || this.root;
                this.emitter = new _emitter4.default();
                this.scroll = _parchment2.default.create(this.root, {
                  emitter: this.emitter,
                  whitelist: this.options.formats
                });
                this.editor = new _editor2.default(this.scroll);
                this.selection = new _selection2.default(this.scroll, this.emitter);
                this.theme = new this.options.theme(this, this.options);
                this.keyboard = this.theme.addModule("keyboard");
                this.clipboard = this.theme.addModule("clipboard");
                this.history = this.theme.addModule("history");
                this.theme.init();
                this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function(type) {
                  if (type === _emitter4.default.events.TEXT_CHANGE) {
                    _this2.root.classList.toggle("ql-blank", _this2.editor.isBlank());
                  }
                });
                this.emitter.on(_emitter4.default.events.SCROLL_UPDATE, function(source, mutations) {
                  var range = _this2.selection.lastRange;
                  var index = range && range.length === 0 ? range.index : void 0;
                  modify.call(_this2, function() {
                    return _this2.editor.update(null, mutations, index);
                  }, source);
                });
                var contents = this.clipboard.convert(`<div class='ql-editor' style="white-space: normal;">` + html + "<p><br></p></div>");
                this.setContents(contents);
                this.history.clear();
                if (this.options.placeholder) {
                  this.root.setAttribute("data-placeholder", this.options.placeholder);
                }
                if (this.options.readOnly) {
                  this.disable();
                }
              }
              _createClass(Quill2, [{
                key: "addContainer",
                value: function addContainer(container) {
                  var refNode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
                  if (typeof container === "string") {
                    var className = container;
                    container = document.createElement("div");
                    container.classList.add(className);
                  }
                  this.container.insertBefore(container, refNode);
                  return container;
                }
              }, {
                key: "blur",
                value: function blur() {
                  this.selection.setRange(null);
                }
              }, {
                key: "deleteText",
                value: function deleteText(index, length, source) {
                  var _this3 = this;
                  var _overload = overload(index, length, source);
                  var _overload2 = _slicedToArray(_overload, 4);
                  index = _overload2[0];
                  length = _overload2[1];
                  source = _overload2[3];
                  return modify.call(this, function() {
                    return _this3.editor.deleteText(index, length);
                  }, source, index, -1 * length);
                }
              }, {
                key: "disable",
                value: function disable() {
                  this.enable(false);
                }
              }, {
                key: "enable",
                value: function enable() {
                  var enabled = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
                  this.scroll.enable(enabled);
                  this.container.classList.toggle("ql-disabled", !enabled);
                }
              }, {
                key: "focus",
                value: function focus() {
                  var scrollTop = this.scrollingContainer.scrollTop;
                  this.selection.focus();
                  this.scrollingContainer.scrollTop = scrollTop;
                  this.scrollIntoView();
                }
              }, {
                key: "format",
                value: function format(name, value) {
                  var _this4 = this;
                  var source = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _emitter4.default.sources.API;
                  return modify.call(this, function() {
                    var range = _this4.getSelection(true);
                    var change = new _quillDelta2.default();
                    if (range == null) {
                      return change;
                    } else if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
                      change = _this4.editor.formatLine(range.index, range.length, _defineProperty({}, name, value));
                    } else if (range.length === 0) {
                      _this4.selection.format(name, value);
                      return change;
                    } else {
                      change = _this4.editor.formatText(range.index, range.length, _defineProperty({}, name, value));
                    }
                    _this4.setSelection(range, _emitter4.default.sources.SILENT);
                    return change;
                  }, source);
                }
              }, {
                key: "formatLine",
                value: function formatLine(index, length, name, value, source) {
                  var _this5 = this;
                  var formats = void 0;
                  var _overload3 = overload(index, length, name, value, source);
                  var _overload4 = _slicedToArray(_overload3, 4);
                  index = _overload4[0];
                  length = _overload4[1];
                  formats = _overload4[2];
                  source = _overload4[3];
                  return modify.call(this, function() {
                    return _this5.editor.formatLine(index, length, formats);
                  }, source, index, 0);
                }
              }, {
                key: "formatText",
                value: function formatText(index, length, name, value, source) {
                  var _this6 = this;
                  var formats = void 0;
                  var _overload5 = overload(index, length, name, value, source);
                  var _overload6 = _slicedToArray(_overload5, 4);
                  index = _overload6[0];
                  length = _overload6[1];
                  formats = _overload6[2];
                  source = _overload6[3];
                  return modify.call(this, function() {
                    return _this6.editor.formatText(index, length, formats);
                  }, source, index, 0);
                }
              }, {
                key: "getBounds",
                value: function getBounds(index) {
                  var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                  var bounds = void 0;
                  if (typeof index === "number") {
                    bounds = this.selection.getBounds(index, length);
                  } else {
                    bounds = this.selection.getBounds(index.index, index.length);
                  }
                  var containerBounds = this.container.getBoundingClientRect();
                  return {
                    bottom: bounds.bottom - containerBounds.top,
                    height: bounds.height,
                    left: bounds.left - containerBounds.left,
                    right: bounds.right - containerBounds.left,
                    top: bounds.top - containerBounds.top,
                    width: bounds.width
                  };
                }
              }, {
                key: "getContents",
                value: function getContents() {
                  var index = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
                  var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.getLength() - index;
                  var _overload7 = overload(index, length);
                  var _overload8 = _slicedToArray(_overload7, 2);
                  index = _overload8[0];
                  length = _overload8[1];
                  return this.editor.getContents(index, length);
                }
              }, {
                key: "getFormat",
                value: function getFormat() {
                  var index = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.getSelection(true);
                  var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                  if (typeof index === "number") {
                    return this.editor.getFormat(index, length);
                  } else {
                    return this.editor.getFormat(index.index, index.length);
                  }
                }
              }, {
                key: "getIndex",
                value: function getIndex(blot) {
                  return blot.offset(this.scroll);
                }
              }, {
                key: "getLength",
                value: function getLength() {
                  return this.scroll.length();
                }
              }, {
                key: "getLeaf",
                value: function getLeaf(index) {
                  return this.scroll.leaf(index);
                }
              }, {
                key: "getLine",
                value: function getLine(index) {
                  return this.scroll.line(index);
                }
              }, {
                key: "getLines",
                value: function getLines() {
                  var index = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
                  var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Number.MAX_VALUE;
                  if (typeof index !== "number") {
                    return this.scroll.lines(index.index, index.length);
                  } else {
                    return this.scroll.lines(index, length);
                  }
                }
              }, {
                key: "getModule",
                value: function getModule(name) {
                  return this.theme.modules[name];
                }
              }, {
                key: "getSelection",
                value: function getSelection() {
                  var focus = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
                  if (focus) this.focus();
                  this.update();
                  return this.selection.getRange()[0];
                }
              }, {
                key: "getText",
                value: function getText() {
                  var index = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
                  var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.getLength() - index;
                  var _overload9 = overload(index, length);
                  var _overload10 = _slicedToArray(_overload9, 2);
                  index = _overload10[0];
                  length = _overload10[1];
                  return this.editor.getText(index, length);
                }
              }, {
                key: "hasFocus",
                value: function hasFocus() {
                  return this.selection.hasFocus();
                }
              }, {
                key: "insertEmbed",
                value: function insertEmbed(index, embed, value) {
                  var _this7 = this;
                  var source = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : Quill2.sources.API;
                  return modify.call(this, function() {
                    return _this7.editor.insertEmbed(index, embed, value);
                  }, source, index);
                }
              }, {
                key: "insertText",
                value: function insertText(index, text, name, value, source) {
                  var _this8 = this;
                  var formats = void 0;
                  var _overload11 = overload(index, 0, name, value, source);
                  var _overload12 = _slicedToArray(_overload11, 4);
                  index = _overload12[0];
                  formats = _overload12[2];
                  source = _overload12[3];
                  return modify.call(this, function() {
                    return _this8.editor.insertText(index, text, formats);
                  }, source, index, text.length);
                }
              }, {
                key: "isEnabled",
                value: function isEnabled() {
                  return !this.container.classList.contains("ql-disabled");
                }
              }, {
                key: "off",
                value: function off() {
                  return this.emitter.off.apply(this.emitter, arguments);
                }
              }, {
                key: "on",
                value: function on() {
                  return this.emitter.on.apply(this.emitter, arguments);
                }
              }, {
                key: "once",
                value: function once() {
                  return this.emitter.once.apply(this.emitter, arguments);
                }
              }, {
                key: "pasteHTML",
                value: function pasteHTML(index, html, source) {
                  this.clipboard.dangerouslyPasteHTML(index, html, source);
                }
              }, {
                key: "removeFormat",
                value: function removeFormat(index, length, source) {
                  var _this9 = this;
                  var _overload13 = overload(index, length, source);
                  var _overload14 = _slicedToArray(_overload13, 4);
                  index = _overload14[0];
                  length = _overload14[1];
                  source = _overload14[3];
                  return modify.call(this, function() {
                    return _this9.editor.removeFormat(index, length);
                  }, source, index);
                }
              }, {
                key: "scrollIntoView",
                value: function scrollIntoView() {
                  this.selection.scrollIntoView(this.scrollingContainer);
                }
              }, {
                key: "setContents",
                value: function setContents(delta) {
                  var _this10 = this;
                  var source = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _emitter4.default.sources.API;
                  return modify.call(this, function() {
                    delta = new _quillDelta2.default(delta);
                    var length = _this10.getLength();
                    var deleted = _this10.editor.deleteText(0, length);
                    var applied = _this10.editor.applyDelta(delta);
                    var lastOp = applied.ops[applied.ops.length - 1];
                    if (lastOp != null && typeof lastOp.insert === "string" && lastOp.insert[lastOp.insert.length - 1] === "\n") {
                      _this10.editor.deleteText(_this10.getLength() - 1, 1);
                      applied.delete(1);
                    }
                    var ret = deleted.compose(applied);
                    return ret;
                  }, source);
                }
              }, {
                key: "setSelection",
                value: function setSelection(index, length, source) {
                  if (index == null) {
                    this.selection.setRange(null, length || Quill2.sources.API);
                  } else {
                    var _overload15 = overload(index, length, source);
                    var _overload16 = _slicedToArray(_overload15, 4);
                    index = _overload16[0];
                    length = _overload16[1];
                    source = _overload16[3];
                    this.selection.setRange(new _selection.Range(index, length), source);
                    if (source !== _emitter4.default.sources.SILENT) {
                      this.selection.scrollIntoView(this.scrollingContainer);
                    }
                  }
                }
              }, {
                key: "setText",
                value: function setText(text) {
                  var source = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _emitter4.default.sources.API;
                  var delta = new _quillDelta2.default().insert(text);
                  return this.setContents(delta, source);
                }
              }, {
                key: "update",
                value: function update() {
                  var source = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _emitter4.default.sources.USER;
                  var change = this.scroll.update(source);
                  this.selection.update(source);
                  return change;
                }
              }, {
                key: "updateContents",
                value: function updateContents(delta) {
                  var _this11 = this;
                  var source = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : _emitter4.default.sources.API;
                  return modify.call(this, function() {
                    delta = new _quillDelta2.default(delta);
                    return _this11.editor.applyDelta(delta, source);
                  }, source, true);
                }
              }]);
              return Quill2;
            }();
            Quill.DEFAULTS = {
              bounds: null,
              formats: null,
              modules: {},
              placeholder: "",
              readOnly: false,
              scrollingContainer: null,
              strict: true,
              theme: "default"
            };
            Quill.events = _emitter4.default.events;
            Quill.sources = _emitter4.default.sources;
            Quill.version = false ? "dev" : "1.3.7";
            Quill.imports = {
              "delta": _quillDelta2.default,
              "parchment": _parchment2.default,
              "core/module": _module2.default,
              "core/theme": _theme2.default
            };
            function expandConfig(container, userConfig) {
              userConfig = (0, _extend2.default)(true, {
                container,
                modules: {
                  clipboard: true,
                  keyboard: true,
                  history: true
                }
              }, userConfig);
              if (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {
                userConfig.theme = _theme2.default;
              } else {
                userConfig.theme = Quill.import("themes/" + userConfig.theme);
                if (userConfig.theme == null) {
                  throw new Error("Invalid theme " + userConfig.theme + ". Did you register it?");
                }
              }
              var themeConfig = (0, _extend2.default)(true, {}, userConfig.theme.DEFAULTS);
              [themeConfig, userConfig].forEach(function(config) {
                config.modules = config.modules || {};
                Object.keys(config.modules).forEach(function(module3) {
                  if (config.modules[module3] === true) {
                    config.modules[module3] = {};
                  }
                });
              });
              var moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));
              var moduleConfig = moduleNames.reduce(function(config, name) {
                var moduleClass = Quill.import("modules/" + name);
                if (moduleClass == null) {
                  debug.error("Cannot load " + name + " module. Are you sure you registered it?");
                } else {
                  config[name] = moduleClass.DEFAULTS || {};
                }
                return config;
              }, {});
              if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {
                userConfig.modules.toolbar = {
                  container: userConfig.modules.toolbar
                };
              }
              userConfig = (0, _extend2.default)(true, {}, Quill.DEFAULTS, { modules: moduleConfig }, themeConfig, userConfig);
              ["bounds", "container", "scrollingContainer"].forEach(function(key) {
                if (typeof userConfig[key] === "string") {
                  userConfig[key] = document.querySelector(userConfig[key]);
                }
              });
              userConfig.modules = Object.keys(userConfig.modules).reduce(function(config, name) {
                if (userConfig.modules[name]) {
                  config[name] = userConfig.modules[name];
                }
                return config;
              }, {});
              return userConfig;
            }
            function modify(modifier, source, index, shift) {
              if (this.options.strict && !this.isEnabled() && source === _emitter4.default.sources.USER) {
                return new _quillDelta2.default();
              }
              var range = index == null ? null : this.getSelection();
              var oldDelta = this.editor.delta;
              var change = modifier();
              if (range != null) {
                if (index === true) index = range.index;
                if (shift == null) {
                  range = shiftRange(range, change, source);
                } else if (shift !== 0) {
                  range = shiftRange(range, index, shift, source);
                }
                this.setSelection(range, _emitter4.default.sources.SILENT);
              }
              if (change.length() > 0) {
                var _emitter;
                var args = [_emitter4.default.events.TEXT_CHANGE, change, oldDelta, source];
                (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
                if (source !== _emitter4.default.sources.SILENT) {
                  var _emitter2;
                  (_emitter2 = this.emitter).emit.apply(_emitter2, args);
                }
              }
              return change;
            }
            function overload(index, length, name, value, source) {
              var formats = {};
              if (typeof index.index === "number" && typeof index.length === "number") {
                if (typeof length !== "number") {
                  source = value, value = name, name = length, length = index.length, index = index.index;
                } else {
                  length = index.length, index = index.index;
                }
              } else if (typeof length !== "number") {
                source = value, value = name, name = length, length = 0;
              }
              if ((typeof name === "undefined" ? "undefined" : _typeof(name)) === "object") {
                formats = name;
                source = value;
              } else if (typeof name === "string") {
                if (value != null) {
                  formats[name] = value;
                } else {
                  source = name;
                }
              }
              source = source || _emitter4.default.sources.API;
              return [index, length, formats, source];
            }
            function shiftRange(range, index, length, source) {
              if (range == null) return null;
              var start = void 0, end = void 0;
              if (index instanceof _quillDelta2.default) {
                var _map = [range.index, range.index + range.length].map(function(pos) {
                  return index.transformPosition(pos, source !== _emitter4.default.sources.USER);
                });
                var _map2 = _slicedToArray(_map, 2);
                start = _map2[0];
                end = _map2[1];
              } else {
                var _map3 = [range.index, range.index + range.length].map(function(pos) {
                  if (pos < index || pos === index && source === _emitter4.default.sources.USER) return pos;
                  if (length >= 0) {
                    return pos + length;
                  } else {
                    return Math.max(index, pos + length);
                  }
                });
                var _map4 = _slicedToArray(_map3, 2);
                start = _map4[0];
                end = _map4[1];
              }
              return new _selection.Range(start, end - start);
            }
            exports2.expandConfig = expandConfig;
            exports2.overload = overload;
            exports2.default = Quill;
          },
          /* 6 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _text = __webpack_require__(7);
            var _text2 = _interopRequireDefault(_text);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Inline = function(_Parchment$Inline) {
              _inherits(Inline2, _Parchment$Inline);
              function Inline2() {
                _classCallCheck(this, Inline2);
                return _possibleConstructorReturn(this, (Inline2.__proto__ || Object.getPrototypeOf(Inline2)).apply(this, arguments));
              }
              _createClass(Inline2, [{
                key: "formatAt",
                value: function formatAt(index, length, name, value) {
                  if (Inline2.compare(this.statics.blotName, name) < 0 && _parchment2.default.query(name, _parchment2.default.Scope.BLOT)) {
                    var blot = this.isolate(index, length);
                    if (value) {
                      blot.wrap(name, value);
                    }
                  } else {
                    _get(Inline2.prototype.__proto__ || Object.getPrototypeOf(Inline2.prototype), "formatAt", this).call(this, index, length, name, value);
                  }
                }
              }, {
                key: "optimize",
                value: function optimize(context) {
                  _get(Inline2.prototype.__proto__ || Object.getPrototypeOf(Inline2.prototype), "optimize", this).call(this, context);
                  if (this.parent instanceof Inline2 && Inline2.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {
                    var parent = this.parent.isolate(this.offset(), this.length());
                    this.moveChildren(parent);
                    parent.wrap(this);
                  }
                }
              }], [{
                key: "compare",
                value: function compare(self2, other) {
                  var selfIndex = Inline2.order.indexOf(self2);
                  var otherIndex = Inline2.order.indexOf(other);
                  if (selfIndex >= 0 || otherIndex >= 0) {
                    return selfIndex - otherIndex;
                  } else if (self2 === other) {
                    return 0;
                  } else if (self2 < other) {
                    return -1;
                  } else {
                    return 1;
                  }
                }
              }]);
              return Inline2;
            }(_parchment2.default.Inline);
            Inline.allowedChildren = [Inline, _parchment2.default.Embed, _text2.default];
            Inline.order = [
              "cursor",
              "inline",
              // Must be lower
              "underline",
              "strike",
              "italic",
              "bold",
              "script",
              "link",
              "code"
              // Must be higher
            ];
            exports2.default = Inline;
          },
          /* 7 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var TextBlot = function(_Parchment$Text) {
              _inherits(TextBlot2, _Parchment$Text);
              function TextBlot2() {
                _classCallCheck(this, TextBlot2);
                return _possibleConstructorReturn(this, (TextBlot2.__proto__ || Object.getPrototypeOf(TextBlot2)).apply(this, arguments));
              }
              return TextBlot2;
            }(_parchment2.default.Text);
            exports2.default = TextBlot;
          },
          /* 8 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _eventemitter = __webpack_require__(54);
            var _eventemitter2 = _interopRequireDefault(_eventemitter);
            var _logger = __webpack_require__(10);
            var _logger2 = _interopRequireDefault(_logger);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var debug = (0, _logger2.default)("quill:events");
            var EVENTS = ["selectionchange", "mousedown", "mouseup", "click"];
            EVENTS.forEach(function(eventName) {
              document.addEventListener(eventName, function() {
                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }
                [].slice.call(document.querySelectorAll(".ql-container")).forEach(function(node) {
                  if (node.__quill && node.__quill.emitter) {
                    var _node$__quill$emitter;
                    (_node$__quill$emitter = node.__quill.emitter).handleDOM.apply(_node$__quill$emitter, args);
                  }
                });
              });
            });
            var Emitter = function(_EventEmitter) {
              _inherits(Emitter2, _EventEmitter);
              function Emitter2() {
                _classCallCheck(this, Emitter2);
                var _this = _possibleConstructorReturn(this, (Emitter2.__proto__ || Object.getPrototypeOf(Emitter2)).call(this));
                _this.listeners = {};
                _this.on("error", debug.error);
                return _this;
              }
              _createClass(Emitter2, [{
                key: "emit",
                value: function emit() {
                  debug.log.apply(debug, arguments);
                  _get(Emitter2.prototype.__proto__ || Object.getPrototypeOf(Emitter2.prototype), "emit", this).apply(this, arguments);
                }
              }, {
                key: "handleDOM",
                value: function handleDOM(event) {
                  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                    args[_key2 - 1] = arguments[_key2];
                  }
                  (this.listeners[event.type] || []).forEach(function(_ref) {
                    var node = _ref.node, handler = _ref.handler;
                    if (event.target === node || node.contains(event.target)) {
                      handler.apply(void 0, [event].concat(args));
                    }
                  });
                }
              }, {
                key: "listenDOM",
                value: function listenDOM(eventName, node, handler) {
                  if (!this.listeners[eventName]) {
                    this.listeners[eventName] = [];
                  }
                  this.listeners[eventName].push({ node, handler });
                }
              }]);
              return Emitter2;
            }(_eventemitter2.default);
            Emitter.events = {
              EDITOR_CHANGE: "editor-change",
              SCROLL_BEFORE_UPDATE: "scroll-before-update",
              SCROLL_OPTIMIZE: "scroll-optimize",
              SCROLL_UPDATE: "scroll-update",
              SELECTION_CHANGE: "selection-change",
              TEXT_CHANGE: "text-change"
            };
            Emitter.sources = {
              API: "api",
              SILENT: "silent",
              USER: "user"
            };
            exports2.default = Emitter;
          },
          /* 9 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var Module = function Module2(quill) {
              var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              _classCallCheck(this, Module2);
              this.quill = quill;
              this.options = options;
            };
            Module.DEFAULTS = {};
            exports2.default = Module;
          },
          /* 10 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var levels = ["error", "warn", "log", "info"];
            var level = "warn";
            function debug(method) {
              if (levels.indexOf(method) <= levels.indexOf(level)) {
                var _console;
                for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                (_console = console)[method].apply(_console, args);
              }
            }
            function namespace(ns) {
              return levels.reduce(function(logger, method) {
                logger[method] = debug.bind(console, method, ns);
                return logger;
              }, {});
            }
            debug.level = namespace.level = function(newLevel) {
              level = newLevel;
            };
            exports2.default = namespace;
          },
          /* 11 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var pSlice = Array.prototype.slice;
            var objectKeys = __webpack_require__(52);
            var isArguments = __webpack_require__(53);
            var deepEqual = module2.exports = function(actual, expected, opts) {
              if (!opts) opts = {};
              if (actual === expected) {
                return true;
              } else if (actual instanceof Date && expected instanceof Date) {
                return actual.getTime() === expected.getTime();
              } else if (!actual || !expected || typeof actual != "object" && typeof expected != "object") {
                return opts.strict ? actual === expected : actual == expected;
              } else {
                return objEquiv(actual, expected, opts);
              }
            };
            function isUndefinedOrNull(value) {
              return value === null || value === void 0;
            }
            function isBuffer(x) {
              if (!x || typeof x !== "object" || typeof x.length !== "number") return false;
              if (typeof x.copy !== "function" || typeof x.slice !== "function") {
                return false;
              }
              if (x.length > 0 && typeof x[0] !== "number") return false;
              return true;
            }
            function objEquiv(a, b, opts) {
              var i, key;
              if (isUndefinedOrNull(a) || isUndefinedOrNull(b))
                return false;
              if (a.prototype !== b.prototype) return false;
              if (isArguments(a)) {
                if (!isArguments(b)) {
                  return false;
                }
                a = pSlice.call(a);
                b = pSlice.call(b);
                return deepEqual(a, b, opts);
              }
              if (isBuffer(a)) {
                if (!isBuffer(b)) {
                  return false;
                }
                if (a.length !== b.length) return false;
                for (i = 0; i < a.length; i++) {
                  if (a[i] !== b[i]) return false;
                }
                return true;
              }
              try {
                var ka = objectKeys(a), kb = objectKeys(b);
              } catch (e) {
                return false;
              }
              if (ka.length != kb.length)
                return false;
              ka.sort();
              kb.sort();
              for (i = ka.length - 1; i >= 0; i--) {
                if (ka[i] != kb[i])
                  return false;
              }
              for (i = ka.length - 1; i >= 0; i--) {
                key = ka[i];
                if (!deepEqual(a[key], b[key], opts)) return false;
              }
              return typeof a === typeof b;
            }
          },
          /* 12 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", { value: true });
            var Registry = __webpack_require__(1);
            var Attributor = (
              /** @class */
              function() {
                function Attributor2(attrName, keyName, options) {
                  if (options === void 0) {
                    options = {};
                  }
                  this.attrName = attrName;
                  this.keyName = keyName;
                  var attributeBit = Registry.Scope.TYPE & Registry.Scope.ATTRIBUTE;
                  if (options.scope != null) {
                    this.scope = options.scope & Registry.Scope.LEVEL | attributeBit;
                  } else {
                    this.scope = Registry.Scope.ATTRIBUTE;
                  }
                  if (options.whitelist != null)
                    this.whitelist = options.whitelist;
                }
                Attributor2.keys = function(node) {
                  return [].map.call(node.attributes, function(item) {
                    return item.name;
                  });
                };
                Attributor2.prototype.add = function(node, value) {
                  if (!this.canAdd(node, value))
                    return false;
                  node.setAttribute(this.keyName, value);
                  return true;
                };
                Attributor2.prototype.canAdd = function(node, value) {
                  var match = Registry.query(node, Registry.Scope.BLOT & (this.scope | Registry.Scope.TYPE));
                  if (match == null)
                    return false;
                  if (this.whitelist == null)
                    return true;
                  if (typeof value === "string") {
                    return this.whitelist.indexOf(value.replace(/["']/g, "")) > -1;
                  } else {
                    return this.whitelist.indexOf(value) > -1;
                  }
                };
                Attributor2.prototype.remove = function(node) {
                  node.removeAttribute(this.keyName);
                };
                Attributor2.prototype.value = function(node) {
                  var value = node.getAttribute(this.keyName);
                  if (this.canAdd(node, value) && value) {
                    return value;
                  }
                  return "";
                };
                return Attributor2;
              }()
            );
            exports2.default = Attributor;
          },
          /* 13 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = exports2.Code = void 0;
            var _slicedToArray = /* @__PURE__ */ function() {
              function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i) break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"]) _i["return"]();
                  } finally {
                    if (_d) throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            var _text = __webpack_require__(7);
            var _text2 = _interopRequireDefault(_text);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Code = function(_Inline) {
              _inherits(Code2, _Inline);
              function Code2() {
                _classCallCheck(this, Code2);
                return _possibleConstructorReturn(this, (Code2.__proto__ || Object.getPrototypeOf(Code2)).apply(this, arguments));
              }
              return Code2;
            }(_inline2.default);
            Code.blotName = "code";
            Code.tagName = "CODE";
            var CodeBlock = function(_Block) {
              _inherits(CodeBlock2, _Block);
              function CodeBlock2() {
                _classCallCheck(this, CodeBlock2);
                return _possibleConstructorReturn(this, (CodeBlock2.__proto__ || Object.getPrototypeOf(CodeBlock2)).apply(this, arguments));
              }
              _createClass(CodeBlock2, [{
                key: "delta",
                value: function delta() {
                  var _this3 = this;
                  var text = this.domNode.textContent;
                  if (text.endsWith("\n")) {
                    text = text.slice(0, -1);
                  }
                  return text.split("\n").reduce(function(delta2, frag) {
                    return delta2.insert(frag).insert("\n", _this3.formats());
                  }, new _quillDelta2.default());
                }
              }, {
                key: "format",
                value: function format(name, value) {
                  if (name === this.statics.blotName && value) return;
                  var _descendant = this.descendant(_text2.default, this.length() - 1), _descendant2 = _slicedToArray(_descendant, 1), text = _descendant2[0];
                  if (text != null) {
                    text.deleteAt(text.length() - 1, 1);
                  }
                  _get(CodeBlock2.prototype.__proto__ || Object.getPrototypeOf(CodeBlock2.prototype), "format", this).call(this, name, value);
                }
              }, {
                key: "formatAt",
                value: function formatAt(index, length, name, value) {
                  if (length === 0) return;
                  if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK) == null || name === this.statics.blotName && value === this.statics.formats(this.domNode)) {
                    return;
                  }
                  var nextNewline = this.newlineIndex(index);
                  if (nextNewline < 0 || nextNewline >= index + length) return;
                  var prevNewline = this.newlineIndex(index, true) + 1;
                  var isolateLength = nextNewline - prevNewline + 1;
                  var blot = this.isolate(prevNewline, isolateLength);
                  var next = blot.next;
                  blot.format(name, value);
                  if (next instanceof CodeBlock2) {
                    next.formatAt(0, index - prevNewline + length - isolateLength, name, value);
                  }
                }
              }, {
                key: "insertAt",
                value: function insertAt(index, value, def) {
                  if (def != null) return;
                  var _descendant3 = this.descendant(_text2.default, index), _descendant4 = _slicedToArray(_descendant3, 2), text = _descendant4[0], offset = _descendant4[1];
                  text.insertAt(offset, value);
                }
              }, {
                key: "length",
                value: function length() {
                  var length2 = this.domNode.textContent.length;
                  if (!this.domNode.textContent.endsWith("\n")) {
                    return length2 + 1;
                  }
                  return length2;
                }
              }, {
                key: "newlineIndex",
                value: function newlineIndex(searchIndex) {
                  var reverse = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                  if (!reverse) {
                    var offset = this.domNode.textContent.slice(searchIndex).indexOf("\n");
                    return offset > -1 ? searchIndex + offset : -1;
                  } else {
                    return this.domNode.textContent.slice(0, searchIndex).lastIndexOf("\n");
                  }
                }
              }, {
                key: "optimize",
                value: function optimize(context) {
                  if (!this.domNode.textContent.endsWith("\n")) {
                    this.appendChild(_parchment2.default.create("text", "\n"));
                  }
                  _get(CodeBlock2.prototype.__proto__ || Object.getPrototypeOf(CodeBlock2.prototype), "optimize", this).call(this, context);
                  var next = this.next;
                  if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && this.statics.formats(this.domNode) === next.statics.formats(next.domNode)) {
                    next.optimize(context);
                    next.moveChildren(this);
                    next.remove();
                  }
                }
              }, {
                key: "replace",
                value: function replace(target) {
                  _get(CodeBlock2.prototype.__proto__ || Object.getPrototypeOf(CodeBlock2.prototype), "replace", this).call(this, target);
                  [].slice.call(this.domNode.querySelectorAll("*")).forEach(function(node) {
                    var blot = _parchment2.default.find(node);
                    if (blot == null) {
                      node.parentNode.removeChild(node);
                    } else if (blot instanceof _parchment2.default.Embed) {
                      blot.remove();
                    } else {
                      blot.unwrap();
                    }
                  });
                }
              }], [{
                key: "create",
                value: function create(value) {
                  var domNode = _get(CodeBlock2.__proto__ || Object.getPrototypeOf(CodeBlock2), "create", this).call(this, value);
                  domNode.setAttribute("spellcheck", false);
                  return domNode;
                }
              }, {
                key: "formats",
                value: function formats() {
                  return true;
                }
              }]);
              return CodeBlock2;
            }(_block2.default);
            CodeBlock.blotName = "code-block";
            CodeBlock.tagName = "PRE";
            CodeBlock.TAB = "  ";
            exports2.Code = Code;
            exports2.default = CodeBlock;
          },
          /* 14 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var _slicedToArray = /* @__PURE__ */ function() {
              function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i) break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"]) _i["return"]();
                  } finally {
                    if (_d) throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _op = __webpack_require__(20);
            var _op2 = _interopRequireDefault(_op);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _code = __webpack_require__(13);
            var _code2 = _interopRequireDefault(_code);
            var _cursor = __webpack_require__(24);
            var _cursor2 = _interopRequireDefault(_cursor);
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            var _break = __webpack_require__(16);
            var _break2 = _interopRequireDefault(_break);
            var _clone = __webpack_require__(21);
            var _clone2 = _interopRequireDefault(_clone);
            var _deepEqual = __webpack_require__(11);
            var _deepEqual2 = _interopRequireDefault(_deepEqual);
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _defineProperty(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var ASCII = /^[ -~]*$/;
            var Editor = function() {
              function Editor2(scroll) {
                _classCallCheck(this, Editor2);
                this.scroll = scroll;
                this.delta = this.getDelta();
              }
              _createClass(Editor2, [{
                key: "applyDelta",
                value: function applyDelta(delta) {
                  var _this = this;
                  var consumeNextNewline = false;
                  this.scroll.update();
                  var scrollLength = this.scroll.length();
                  this.scroll.batchStart();
                  delta = normalizeDelta(delta);
                  delta.reduce(function(index, op) {
                    var length = op.retain || op.delete || op.insert.length || 1;
                    var attributes = op.attributes || {};
                    if (op.insert != null) {
                      if (typeof op.insert === "string") {
                        var text = op.insert;
                        if (text.endsWith("\n") && consumeNextNewline) {
                          consumeNextNewline = false;
                          text = text.slice(0, -1);
                        }
                        if (index >= scrollLength && !text.endsWith("\n")) {
                          consumeNextNewline = true;
                        }
                        _this.scroll.insertAt(index, text);
                        var _scroll$line = _this.scroll.line(index), _scroll$line2 = _slicedToArray(_scroll$line, 2), line = _scroll$line2[0], offset = _scroll$line2[1];
                        var formats = (0, _extend2.default)({}, (0, _block.bubbleFormats)(line));
                        if (line instanceof _block2.default) {
                          var _line$descendant = line.descendant(_parchment2.default.Leaf, offset), _line$descendant2 = _slicedToArray(_line$descendant, 1), leaf = _line$descendant2[0];
                          formats = (0, _extend2.default)(formats, (0, _block.bubbleFormats)(leaf));
                        }
                        attributes = _op2.default.attributes.diff(formats, attributes) || {};
                      } else if (_typeof(op.insert) === "object") {
                        var key = Object.keys(op.insert)[0];
                        if (key == null) return index;
                        _this.scroll.insertAt(index, key, op.insert[key]);
                      }
                      scrollLength += length;
                    }
                    Object.keys(attributes).forEach(function(name) {
                      _this.scroll.formatAt(index, length, name, attributes[name]);
                    });
                    return index + length;
                  }, 0);
                  delta.reduce(function(index, op) {
                    if (typeof op.delete === "number") {
                      _this.scroll.deleteAt(index, op.delete);
                      return index;
                    }
                    return index + (op.retain || op.insert.length || 1);
                  }, 0);
                  this.scroll.batchEnd();
                  return this.update(delta);
                }
              }, {
                key: "deleteText",
                value: function deleteText(index, length) {
                  this.scroll.deleteAt(index, length);
                  return this.update(new _quillDelta2.default().retain(index).delete(length));
                }
              }, {
                key: "formatLine",
                value: function formatLine(index, length) {
                  var _this2 = this;
                  var formats = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                  this.scroll.update();
                  Object.keys(formats).forEach(function(format) {
                    if (_this2.scroll.whitelist != null && !_this2.scroll.whitelist[format]) return;
                    var lines = _this2.scroll.lines(index, Math.max(length, 1));
                    var lengthRemaining = length;
                    lines.forEach(function(line) {
                      var lineLength = line.length();
                      if (!(line instanceof _code2.default)) {
                        line.format(format, formats[format]);
                      } else {
                        var codeIndex = index - line.offset(_this2.scroll);
                        var codeLength = line.newlineIndex(codeIndex + lengthRemaining) - codeIndex + 1;
                        line.formatAt(codeIndex, codeLength, format, formats[format]);
                      }
                      lengthRemaining -= lineLength;
                    });
                  });
                  this.scroll.optimize();
                  return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
                }
              }, {
                key: "formatText",
                value: function formatText(index, length) {
                  var _this3 = this;
                  var formats = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                  Object.keys(formats).forEach(function(format) {
                    _this3.scroll.formatAt(index, length, format, formats[format]);
                  });
                  return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
                }
              }, {
                key: "getContents",
                value: function getContents(index, length) {
                  return this.delta.slice(index, index + length);
                }
              }, {
                key: "getDelta",
                value: function getDelta() {
                  return this.scroll.lines().reduce(function(delta, line) {
                    return delta.concat(line.delta());
                  }, new _quillDelta2.default());
                }
              }, {
                key: "getFormat",
                value: function getFormat(index) {
                  var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                  var lines = [], leaves = [];
                  if (length === 0) {
                    this.scroll.path(index).forEach(function(path) {
                      var _path = _slicedToArray(path, 1), blot = _path[0];
                      if (blot instanceof _block2.default) {
                        lines.push(blot);
                      } else if (blot instanceof _parchment2.default.Leaf) {
                        leaves.push(blot);
                      }
                    });
                  } else {
                    lines = this.scroll.lines(index, length);
                    leaves = this.scroll.descendants(_parchment2.default.Leaf, index, length);
                  }
                  var formatsArr = [lines, leaves].map(function(blots) {
                    if (blots.length === 0) return {};
                    var formats = (0, _block.bubbleFormats)(blots.shift());
                    while (Object.keys(formats).length > 0) {
                      var blot = blots.shift();
                      if (blot == null) return formats;
                      formats = combineFormats((0, _block.bubbleFormats)(blot), formats);
                    }
                    return formats;
                  });
                  return _extend2.default.apply(_extend2.default, formatsArr);
                }
              }, {
                key: "getText",
                value: function getText(index, length) {
                  return this.getContents(index, length).filter(function(op) {
                    return typeof op.insert === "string";
                  }).map(function(op) {
                    return op.insert;
                  }).join("");
                }
              }, {
                key: "insertEmbed",
                value: function insertEmbed(index, embed, value) {
                  this.scroll.insertAt(index, embed, value);
                  return this.update(new _quillDelta2.default().retain(index).insert(_defineProperty({}, embed, value)));
                }
              }, {
                key: "insertText",
                value: function insertText(index, text) {
                  var _this4 = this;
                  var formats = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                  text = text.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
                  this.scroll.insertAt(index, text);
                  Object.keys(formats).forEach(function(format) {
                    _this4.scroll.formatAt(index, text.length, format, formats[format]);
                  });
                  return this.update(new _quillDelta2.default().retain(index).insert(text, (0, _clone2.default)(formats)));
                }
              }, {
                key: "isBlank",
                value: function isBlank() {
                  if (this.scroll.children.length == 0) return true;
                  if (this.scroll.children.length > 1) return false;
                  var block = this.scroll.children.head;
                  if (block.statics.blotName !== _block2.default.blotName) return false;
                  if (block.children.length > 1) return false;
                  return block.children.head instanceof _break2.default;
                }
              }, {
                key: "removeFormat",
                value: function removeFormat(index, length) {
                  var text = this.getText(index, length);
                  var _scroll$line3 = this.scroll.line(index + length), _scroll$line4 = _slicedToArray(_scroll$line3, 2), line = _scroll$line4[0], offset = _scroll$line4[1];
                  var suffixLength = 0, suffix = new _quillDelta2.default();
                  if (line != null) {
                    if (!(line instanceof _code2.default)) {
                      suffixLength = line.length() - offset;
                    } else {
                      suffixLength = line.newlineIndex(offset) - offset + 1;
                    }
                    suffix = line.delta().slice(offset, offset + suffixLength - 1).insert("\n");
                  }
                  var contents = this.getContents(index, length + suffixLength);
                  var diff = contents.diff(new _quillDelta2.default().insert(text).concat(suffix));
                  var delta = new _quillDelta2.default().retain(index).concat(diff);
                  return this.applyDelta(delta);
                }
              }, {
                key: "update",
                value: function update(change) {
                  var mutations = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
                  var cursorIndex = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
                  var oldDelta = this.delta;
                  if (mutations.length === 1 && mutations[0].type === "characterData" && mutations[0].target.data.match(ASCII) && _parchment2.default.find(mutations[0].target)) {
                    var textBlot = _parchment2.default.find(mutations[0].target);
                    var formats = (0, _block.bubbleFormats)(textBlot);
                    var index = textBlot.offset(this.scroll);
                    var oldValue = mutations[0].oldValue.replace(_cursor2.default.CONTENTS, "");
                    var oldText = new _quillDelta2.default().insert(oldValue);
                    var newText = new _quillDelta2.default().insert(textBlot.value());
                    var diffDelta = new _quillDelta2.default().retain(index).concat(oldText.diff(newText, cursorIndex));
                    change = diffDelta.reduce(function(delta, op) {
                      if (op.insert) {
                        return delta.insert(op.insert, formats);
                      } else {
                        return delta.push(op);
                      }
                    }, new _quillDelta2.default());
                    this.delta = oldDelta.compose(change);
                  } else {
                    this.delta = this.getDelta();
                    if (!change || !(0, _deepEqual2.default)(oldDelta.compose(change), this.delta)) {
                      change = oldDelta.diff(this.delta, cursorIndex);
                    }
                  }
                  return change;
                }
              }]);
              return Editor2;
            }();
            function combineFormats(formats, combined) {
              return Object.keys(combined).reduce(function(merged, name) {
                if (formats[name] == null) return merged;
                if (combined[name] === formats[name]) {
                  merged[name] = combined[name];
                } else if (Array.isArray(combined[name])) {
                  if (combined[name].indexOf(formats[name]) < 0) {
                    merged[name] = combined[name].concat([formats[name]]);
                  }
                } else {
                  merged[name] = [combined[name], formats[name]];
                }
                return merged;
              }, {});
            }
            function normalizeDelta(delta) {
              return delta.reduce(function(delta2, op) {
                if (op.insert === 1) {
                  var attributes = (0, _clone2.default)(op.attributes);
                  delete attributes["image"];
                  return delta2.insert({ image: op.attributes.image }, attributes);
                }
                if (op.attributes != null && (op.attributes.list === true || op.attributes.bullet === true)) {
                  op = (0, _clone2.default)(op);
                  if (op.attributes.list) {
                    op.attributes.list = "ordered";
                  } else {
                    op.attributes.list = "bullet";
                    delete op.attributes.bullet;
                  }
                }
                if (typeof op.insert === "string") {
                  var text = op.insert.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
                  return delta2.insert(text, op.attributes);
                }
                return delta2.push(op);
              }, new _quillDelta2.default());
            }
            exports2.default = Editor;
          },
          /* 15 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = exports2.Range = void 0;
            var _slicedToArray = /* @__PURE__ */ function() {
              function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i) break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"]) _i["return"]();
                  } finally {
                    if (_d) throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _clone = __webpack_require__(21);
            var _clone2 = _interopRequireDefault(_clone);
            var _deepEqual = __webpack_require__(11);
            var _deepEqual2 = _interopRequireDefault(_deepEqual);
            var _emitter3 = __webpack_require__(8);
            var _emitter4 = _interopRequireDefault(_emitter3);
            var _logger = __webpack_require__(10);
            var _logger2 = _interopRequireDefault(_logger);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _toConsumableArray(arr) {
              if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                  arr2[i] = arr[i];
                }
                return arr2;
              } else {
                return Array.from(arr);
              }
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var debug = (0, _logger2.default)("quill:selection");
            var Range = function Range2(index) {
              var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
              _classCallCheck(this, Range2);
              this.index = index;
              this.length = length;
            };
            var Selection = function() {
              function Selection2(scroll, emitter) {
                var _this = this;
                _classCallCheck(this, Selection2);
                this.emitter = emitter;
                this.scroll = scroll;
                this.composing = false;
                this.mouseDown = false;
                this.root = this.scroll.domNode;
                this.cursor = _parchment2.default.create("cursor", this);
                this.lastRange = this.savedRange = new Range(0, 0);
                this.handleComposition();
                this.handleDragging();
                this.emitter.listenDOM("selectionchange", document, function() {
                  if (!_this.mouseDown) {
                    setTimeout(_this.update.bind(_this, _emitter4.default.sources.USER), 1);
                  }
                });
                this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function(type, delta) {
                  if (type === _emitter4.default.events.TEXT_CHANGE && delta.length() > 0) {
                    _this.update(_emitter4.default.sources.SILENT);
                  }
                });
                this.emitter.on(_emitter4.default.events.SCROLL_BEFORE_UPDATE, function() {
                  if (!_this.hasFocus()) return;
                  var native = _this.getNativeRange();
                  if (native == null) return;
                  if (native.start.node === _this.cursor.textNode) return;
                  _this.emitter.once(_emitter4.default.events.SCROLL_UPDATE, function() {
                    try {
                      _this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);
                    } catch (ignored) {
                    }
                  });
                });
                this.emitter.on(_emitter4.default.events.SCROLL_OPTIMIZE, function(mutations, context) {
                  if (context.range) {
                    var _context$range = context.range, startNode = _context$range.startNode, startOffset = _context$range.startOffset, endNode = _context$range.endNode, endOffset = _context$range.endOffset;
                    _this.setNativeRange(startNode, startOffset, endNode, endOffset);
                  }
                });
                this.update(_emitter4.default.sources.SILENT);
              }
              _createClass(Selection2, [{
                key: "handleComposition",
                value: function handleComposition() {
                  var _this2 = this;
                  this.root.addEventListener("compositionstart", function() {
                    _this2.composing = true;
                  });
                  this.root.addEventListener("compositionend", function() {
                    _this2.composing = false;
                    if (_this2.cursor.parent) {
                      var range = _this2.cursor.restore();
                      if (!range) return;
                      setTimeout(function() {
                        _this2.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
                      }, 1);
                    }
                  });
                }
              }, {
                key: "handleDragging",
                value: function handleDragging() {
                  var _this3 = this;
                  this.emitter.listenDOM("mousedown", document.body, function() {
                    _this3.mouseDown = true;
                  });
                  this.emitter.listenDOM("mouseup", document.body, function() {
                    _this3.mouseDown = false;
                    _this3.update(_emitter4.default.sources.USER);
                  });
                }
              }, {
                key: "focus",
                value: function focus() {
                  if (this.hasFocus()) return;
                  this.root.focus();
                  this.setRange(this.savedRange);
                }
              }, {
                key: "format",
                value: function format(_format, value) {
                  if (this.scroll.whitelist != null && !this.scroll.whitelist[_format]) return;
                  this.scroll.update();
                  var nativeRange = this.getNativeRange();
                  if (nativeRange == null || !nativeRange.native.collapsed || _parchment2.default.query(_format, _parchment2.default.Scope.BLOCK)) return;
                  if (nativeRange.start.node !== this.cursor.textNode) {
                    var blot = _parchment2.default.find(nativeRange.start.node, false);
                    if (blot == null) return;
                    if (blot instanceof _parchment2.default.Leaf) {
                      var after = blot.split(nativeRange.start.offset);
                      blot.parent.insertBefore(this.cursor, after);
                    } else {
                      blot.insertBefore(this.cursor, nativeRange.start.node);
                    }
                    this.cursor.attach();
                  }
                  this.cursor.format(_format, value);
                  this.scroll.optimize();
                  this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);
                  this.update();
                }
              }, {
                key: "getBounds",
                value: function getBounds(index) {
                  var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                  var scrollLength = this.scroll.length();
                  index = Math.min(index, scrollLength - 1);
                  length = Math.min(index + length, scrollLength - 1) - index;
                  var node = void 0, _scroll$leaf = this.scroll.leaf(index), _scroll$leaf2 = _slicedToArray(_scroll$leaf, 2), leaf = _scroll$leaf2[0], offset = _scroll$leaf2[1];
                  if (leaf == null) return null;
                  var _leaf$position = leaf.position(offset, true);
                  var _leaf$position2 = _slicedToArray(_leaf$position, 2);
                  node = _leaf$position2[0];
                  offset = _leaf$position2[1];
                  var range = document.createRange();
                  if (length > 0) {
                    range.setStart(node, offset);
                    var _scroll$leaf3 = this.scroll.leaf(index + length);
                    var _scroll$leaf4 = _slicedToArray(_scroll$leaf3, 2);
                    leaf = _scroll$leaf4[0];
                    offset = _scroll$leaf4[1];
                    if (leaf == null) return null;
                    var _leaf$position3 = leaf.position(offset, true);
                    var _leaf$position4 = _slicedToArray(_leaf$position3, 2);
                    node = _leaf$position4[0];
                    offset = _leaf$position4[1];
                    range.setEnd(node, offset);
                    return range.getBoundingClientRect();
                  } else {
                    var side = "left";
                    var rect = void 0;
                    if (node instanceof Text) {
                      if (offset < node.data.length) {
                        range.setStart(node, offset);
                        range.setEnd(node, offset + 1);
                      } else {
                        range.setStart(node, offset - 1);
                        range.setEnd(node, offset);
                        side = "right";
                      }
                      rect = range.getBoundingClientRect();
                    } else {
                      rect = leaf.domNode.getBoundingClientRect();
                      if (offset > 0) side = "right";
                    }
                    return {
                      bottom: rect.top + rect.height,
                      height: rect.height,
                      left: rect[side],
                      right: rect[side],
                      top: rect.top,
                      width: 0
                    };
                  }
                }
              }, {
                key: "getNativeRange",
                value: function getNativeRange() {
                  var selection = document.getSelection();
                  if (selection == null || selection.rangeCount <= 0) return null;
                  var nativeRange = selection.getRangeAt(0);
                  if (nativeRange == null) return null;
                  var range = this.normalizeNative(nativeRange);
                  debug.info("getNativeRange", range);
                  return range;
                }
              }, {
                key: "getRange",
                value: function getRange() {
                  var normalized = this.getNativeRange();
                  if (normalized == null) return [null, null];
                  var range = this.normalizedToRange(normalized);
                  return [range, normalized];
                }
              }, {
                key: "hasFocus",
                value: function hasFocus() {
                  return document.activeElement === this.root;
                }
              }, {
                key: "normalizedToRange",
                value: function normalizedToRange(range) {
                  var _this4 = this;
                  var positions = [[range.start.node, range.start.offset]];
                  if (!range.native.collapsed) {
                    positions.push([range.end.node, range.end.offset]);
                  }
                  var indexes = positions.map(function(position) {
                    var _position = _slicedToArray(position, 2), node = _position[0], offset = _position[1];
                    var blot = _parchment2.default.find(node, true);
                    var index = blot.offset(_this4.scroll);
                    if (offset === 0) {
                      return index;
                    } else if (blot instanceof _parchment2.default.Container) {
                      return index + blot.length();
                    } else {
                      return index + blot.index(node, offset);
                    }
                  });
                  var end = Math.min(Math.max.apply(Math, _toConsumableArray(indexes)), this.scroll.length() - 1);
                  var start = Math.min.apply(Math, [end].concat(_toConsumableArray(indexes)));
                  return new Range(start, end - start);
                }
              }, {
                key: "normalizeNative",
                value: function normalizeNative(nativeRange) {
                  if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {
                    return null;
                  }
                  var range = {
                    start: { node: nativeRange.startContainer, offset: nativeRange.startOffset },
                    end: { node: nativeRange.endContainer, offset: nativeRange.endOffset },
                    native: nativeRange
                  };
                  [range.start, range.end].forEach(function(position) {
                    var node = position.node, offset = position.offset;
                    while (!(node instanceof Text) && node.childNodes.length > 0) {
                      if (node.childNodes.length > offset) {
                        node = node.childNodes[offset];
                        offset = 0;
                      } else if (node.childNodes.length === offset) {
                        node = node.lastChild;
                        offset = node instanceof Text ? node.data.length : node.childNodes.length + 1;
                      } else {
                        break;
                      }
                    }
                    position.node = node, position.offset = offset;
                  });
                  return range;
                }
              }, {
                key: "rangeToNative",
                value: function rangeToNative(range) {
                  var _this5 = this;
                  var indexes = range.collapsed ? [range.index] : [range.index, range.index + range.length];
                  var args = [];
                  var scrollLength = this.scroll.length();
                  indexes.forEach(function(index, i) {
                    index = Math.min(scrollLength - 1, index);
                    var node = void 0, _scroll$leaf5 = _this5.scroll.leaf(index), _scroll$leaf6 = _slicedToArray(_scroll$leaf5, 2), leaf = _scroll$leaf6[0], offset = _scroll$leaf6[1];
                    var _leaf$position5 = leaf.position(offset, i !== 0);
                    var _leaf$position6 = _slicedToArray(_leaf$position5, 2);
                    node = _leaf$position6[0];
                    offset = _leaf$position6[1];
                    args.push(node, offset);
                  });
                  if (args.length < 2) {
                    args = args.concat(args);
                  }
                  return args;
                }
              }, {
                key: "scrollIntoView",
                value: function scrollIntoView(scrollingContainer) {
                  var range = this.lastRange;
                  if (range == null) return;
                  var bounds = this.getBounds(range.index, range.length);
                  if (bounds == null) return;
                  var limit2 = this.scroll.length() - 1;
                  var _scroll$line = this.scroll.line(Math.min(range.index, limit2)), _scroll$line2 = _slicedToArray(_scroll$line, 1), first = _scroll$line2[0];
                  var last = first;
                  if (range.length > 0) {
                    var _scroll$line3 = this.scroll.line(Math.min(range.index + range.length, limit2));
                    var _scroll$line4 = _slicedToArray(_scroll$line3, 1);
                    last = _scroll$line4[0];
                  }
                  if (first == null || last == null) return;
                  var scrollBounds = scrollingContainer.getBoundingClientRect();
                  if (bounds.top < scrollBounds.top) {
                    scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;
                  } else if (bounds.bottom > scrollBounds.bottom) {
                    scrollingContainer.scrollTop += bounds.bottom - scrollBounds.bottom;
                  }
                }
              }, {
                key: "setNativeRange",
                value: function setNativeRange(startNode, startOffset) {
                  var endNode = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : startNode;
                  var endOffset = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : startOffset;
                  var force = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : false;
                  debug.info("setNativeRange", startNode, startOffset, endNode, endOffset);
                  if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {
                    return;
                  }
                  var selection = document.getSelection();
                  if (selection == null) return;
                  if (startNode != null) {
                    if (!this.hasFocus()) this.root.focus();
                    var native = (this.getNativeRange() || {}).native;
                    if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {
                      if (startNode.tagName == "BR") {
                        startOffset = [].indexOf.call(startNode.parentNode.childNodes, startNode);
                        startNode = startNode.parentNode;
                      }
                      if (endNode.tagName == "BR") {
                        endOffset = [].indexOf.call(endNode.parentNode.childNodes, endNode);
                        endNode = endNode.parentNode;
                      }
                      var range = document.createRange();
                      range.setStart(startNode, startOffset);
                      range.setEnd(endNode, endOffset);
                      selection.removeAllRanges();
                      selection.addRange(range);
                    }
                  } else {
                    selection.removeAllRanges();
                    this.root.blur();
                    document.body.focus();
                  }
                }
              }, {
                key: "setRange",
                value: function setRange(range) {
                  var force = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                  var source = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _emitter4.default.sources.API;
                  if (typeof force === "string") {
                    source = force;
                    force = false;
                  }
                  debug.info("setRange", range);
                  if (range != null) {
                    var args = this.rangeToNative(range);
                    this.setNativeRange.apply(this, _toConsumableArray(args).concat([force]));
                  } else {
                    this.setNativeRange(null);
                  }
                  this.update(source);
                }
              }, {
                key: "update",
                value: function update() {
                  var source = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : _emitter4.default.sources.USER;
                  var oldRange = this.lastRange;
                  var _getRange = this.getRange(), _getRange2 = _slicedToArray(_getRange, 2), lastRange = _getRange2[0], nativeRange = _getRange2[1];
                  this.lastRange = lastRange;
                  if (this.lastRange != null) {
                    this.savedRange = this.lastRange;
                  }
                  if (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {
                    var _emitter;
                    if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {
                      this.cursor.restore();
                    }
                    var args = [_emitter4.default.events.SELECTION_CHANGE, (0, _clone2.default)(this.lastRange), (0, _clone2.default)(oldRange), source];
                    (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
                    if (source !== _emitter4.default.sources.SILENT) {
                      var _emitter2;
                      (_emitter2 = this.emitter).emit.apply(_emitter2, args);
                    }
                  }
                }
              }]);
              return Selection2;
            }();
            function contains(parent, descendant) {
              try {
                descendant.parentNode;
              } catch (e) {
                return false;
              }
              if (descendant instanceof Text) {
                descendant = descendant.parentNode;
              }
              return parent.contains(descendant);
            }
            exports2.Range = Range;
            exports2.default = Selection;
          },
          /* 16 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Break = function(_Parchment$Embed) {
              _inherits(Break2, _Parchment$Embed);
              function Break2() {
                _classCallCheck(this, Break2);
                return _possibleConstructorReturn(this, (Break2.__proto__ || Object.getPrototypeOf(Break2)).apply(this, arguments));
              }
              _createClass(Break2, [{
                key: "insertInto",
                value: function insertInto(parent, ref2) {
                  if (parent.children.length === 0) {
                    _get(Break2.prototype.__proto__ || Object.getPrototypeOf(Break2.prototype), "insertInto", this).call(this, parent, ref2);
                  } else {
                    this.remove();
                  }
                }
              }, {
                key: "length",
                value: function length() {
                  return 0;
                }
              }, {
                key: "value",
                value: function value() {
                  return "";
                }
              }], [{
                key: "value",
                value: function value() {
                  return void 0;
                }
              }]);
              return Break2;
            }(_parchment2.default.Embed);
            Break.blotName = "break";
            Break.tagName = "BR";
            exports2.default = Break;
          },
          /* 17 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
                d.__proto__ = b;
              } || function(d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
              return function(d, b) {
                extendStatics(d, b);
                function __() {
                  this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var linked_list_1 = __webpack_require__(44);
            var shadow_1 = __webpack_require__(30);
            var Registry = __webpack_require__(1);
            var ContainerBlot = (
              /** @class */
              function(_super) {
                __extends(ContainerBlot2, _super);
                function ContainerBlot2(domNode) {
                  var _this = _super.call(this, domNode) || this;
                  _this.build();
                  return _this;
                }
                ContainerBlot2.prototype.appendChild = function(other) {
                  this.insertBefore(other);
                };
                ContainerBlot2.prototype.attach = function() {
                  _super.prototype.attach.call(this);
                  this.children.forEach(function(child) {
                    child.attach();
                  });
                };
                ContainerBlot2.prototype.build = function() {
                  var _this = this;
                  this.children = new linked_list_1.default();
                  [].slice.call(this.domNode.childNodes).reverse().forEach(function(node) {
                    try {
                      var child = makeBlot(node);
                      _this.insertBefore(child, _this.children.head || void 0);
                    } catch (err) {
                      if (err instanceof Registry.ParchmentError)
                        return;
                      else
                        throw err;
                    }
                  });
                };
                ContainerBlot2.prototype.deleteAt = function(index, length) {
                  if (index === 0 && length === this.length()) {
                    return this.remove();
                  }
                  this.children.forEachAt(index, length, function(child, offset, length2) {
                    child.deleteAt(offset, length2);
                  });
                };
                ContainerBlot2.prototype.descendant = function(criteria, index) {
                  var _a = this.children.find(index), child = _a[0], offset = _a[1];
                  if (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {
                    return [child, offset];
                  } else if (child instanceof ContainerBlot2) {
                    return child.descendant(criteria, offset);
                  } else {
                    return [null, -1];
                  }
                };
                ContainerBlot2.prototype.descendants = function(criteria, index, length) {
                  if (index === void 0) {
                    index = 0;
                  }
                  if (length === void 0) {
                    length = Number.MAX_VALUE;
                  }
                  var descendants = [];
                  var lengthLeft = length;
                  this.children.forEachAt(index, length, function(child, index2, length2) {
                    if (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {
                      descendants.push(child);
                    }
                    if (child instanceof ContainerBlot2) {
                      descendants = descendants.concat(child.descendants(criteria, index2, lengthLeft));
                    }
                    lengthLeft -= length2;
                  });
                  return descendants;
                };
                ContainerBlot2.prototype.detach = function() {
                  this.children.forEach(function(child) {
                    child.detach();
                  });
                  _super.prototype.detach.call(this);
                };
                ContainerBlot2.prototype.formatAt = function(index, length, name, value) {
                  this.children.forEachAt(index, length, function(child, offset, length2) {
                    child.formatAt(offset, length2, name, value);
                  });
                };
                ContainerBlot2.prototype.insertAt = function(index, value, def) {
                  var _a = this.children.find(index), child = _a[0], offset = _a[1];
                  if (child) {
                    child.insertAt(offset, value, def);
                  } else {
                    var blot = def == null ? Registry.create("text", value) : Registry.create(value, def);
                    this.appendChild(blot);
                  }
                };
                ContainerBlot2.prototype.insertBefore = function(childBlot, refBlot) {
                  if (this.statics.allowedChildren != null && !this.statics.allowedChildren.some(function(child) {
                    return childBlot instanceof child;
                  })) {
                    throw new Registry.ParchmentError("Cannot insert " + childBlot.statics.blotName + " into " + this.statics.blotName);
                  }
                  childBlot.insertInto(this, refBlot);
                };
                ContainerBlot2.prototype.length = function() {
                  return this.children.reduce(function(memo, child) {
                    return memo + child.length();
                  }, 0);
                };
                ContainerBlot2.prototype.moveChildren = function(targetParent, refNode) {
                  this.children.forEach(function(child) {
                    targetParent.insertBefore(child, refNode);
                  });
                };
                ContainerBlot2.prototype.optimize = function(context) {
                  _super.prototype.optimize.call(this, context);
                  if (this.children.length === 0) {
                    if (this.statics.defaultChild != null) {
                      var child = Registry.create(this.statics.defaultChild);
                      this.appendChild(child);
                      child.optimize(context);
                    } else {
                      this.remove();
                    }
                  }
                };
                ContainerBlot2.prototype.path = function(index, inclusive) {
                  if (inclusive === void 0) {
                    inclusive = false;
                  }
                  var _a = this.children.find(index, inclusive), child = _a[0], offset = _a[1];
                  var position = [[this, index]];
                  if (child instanceof ContainerBlot2) {
                    return position.concat(child.path(offset, inclusive));
                  } else if (child != null) {
                    position.push([child, offset]);
                  }
                  return position;
                };
                ContainerBlot2.prototype.removeChild = function(child) {
                  this.children.remove(child);
                };
                ContainerBlot2.prototype.replace = function(target) {
                  if (target instanceof ContainerBlot2) {
                    target.moveChildren(this);
                  }
                  _super.prototype.replace.call(this, target);
                };
                ContainerBlot2.prototype.split = function(index, force) {
                  if (force === void 0) {
                    force = false;
                  }
                  if (!force) {
                    if (index === 0)
                      return this;
                    if (index === this.length())
                      return this.next;
                  }
                  var after = this.clone();
                  this.parent.insertBefore(after, this.next);
                  this.children.forEachAt(index, this.length(), function(child, offset, length) {
                    child = child.split(offset, force);
                    after.appendChild(child);
                  });
                  return after;
                };
                ContainerBlot2.prototype.unwrap = function() {
                  this.moveChildren(this.parent, this.next);
                  this.remove();
                };
                ContainerBlot2.prototype.update = function(mutations, context) {
                  var _this = this;
                  var addedNodes = [];
                  var removedNodes = [];
                  mutations.forEach(function(mutation) {
                    if (mutation.target === _this.domNode && mutation.type === "childList") {
                      addedNodes.push.apply(addedNodes, mutation.addedNodes);
                      removedNodes.push.apply(removedNodes, mutation.removedNodes);
                    }
                  });
                  removedNodes.forEach(function(node) {
                    if (node.parentNode != null && // @ts-ignore
                    node.tagName !== "IFRAME" && document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
                      return;
                    }
                    var blot = Registry.find(node);
                    if (blot == null)
                      return;
                    if (blot.domNode.parentNode == null || blot.domNode.parentNode === _this.domNode) {
                      blot.detach();
                    }
                  });
                  addedNodes.filter(function(node) {
                    return node.parentNode == _this.domNode;
                  }).sort(function(a, b) {
                    if (a === b)
                      return 0;
                    if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {
                      return 1;
                    }
                    return -1;
                  }).forEach(function(node) {
                    var refBlot = null;
                    if (node.nextSibling != null) {
                      refBlot = Registry.find(node.nextSibling);
                    }
                    var blot = makeBlot(node);
                    if (blot.next != refBlot || blot.next == null) {
                      if (blot.parent != null) {
                        blot.parent.removeChild(_this);
                      }
                      _this.insertBefore(blot, refBlot || void 0);
                    }
                  });
                };
                return ContainerBlot2;
              }(shadow_1.default)
            );
            function makeBlot(node) {
              var blot = Registry.find(node);
              if (blot == null) {
                try {
                  blot = Registry.create(node);
                } catch (e) {
                  blot = Registry.create(Registry.Scope.INLINE);
                  [].slice.call(node.childNodes).forEach(function(child) {
                    blot.domNode.appendChild(child);
                  });
                  if (node.parentNode) {
                    node.parentNode.replaceChild(blot.domNode, node);
                  }
                  blot.attach();
                }
              }
              return blot;
            }
            exports2.default = ContainerBlot;
          },
          /* 18 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
                d.__proto__ = b;
              } || function(d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
              return function(d, b) {
                extendStatics(d, b);
                function __() {
                  this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var attributor_1 = __webpack_require__(12);
            var store_1 = __webpack_require__(31);
            var container_1 = __webpack_require__(17);
            var Registry = __webpack_require__(1);
            var FormatBlot = (
              /** @class */
              function(_super) {
                __extends(FormatBlot2, _super);
                function FormatBlot2(domNode) {
                  var _this = _super.call(this, domNode) || this;
                  _this.attributes = new store_1.default(_this.domNode);
                  return _this;
                }
                FormatBlot2.formats = function(domNode) {
                  if (typeof this.tagName === "string") {
                    return true;
                  } else if (Array.isArray(this.tagName)) {
                    return domNode.tagName.toLowerCase();
                  }
                  return void 0;
                };
                FormatBlot2.prototype.format = function(name, value) {
                  var format = Registry.query(name);
                  if (format instanceof attributor_1.default) {
                    this.attributes.attribute(format, value);
                  } else if (value) {
                    if (format != null && (name !== this.statics.blotName || this.formats()[name] !== value)) {
                      this.replaceWith(name, value);
                    }
                  }
                };
                FormatBlot2.prototype.formats = function() {
                  var formats = this.attributes.values();
                  var format = this.statics.formats(this.domNode);
                  if (format != null) {
                    formats[this.statics.blotName] = format;
                  }
                  return formats;
                };
                FormatBlot2.prototype.replaceWith = function(name, value) {
                  var replacement = _super.prototype.replaceWith.call(this, name, value);
                  this.attributes.copy(replacement);
                  return replacement;
                };
                FormatBlot2.prototype.update = function(mutations, context) {
                  var _this = this;
                  _super.prototype.update.call(this, mutations, context);
                  if (mutations.some(function(mutation) {
                    return mutation.target === _this.domNode && mutation.type === "attributes";
                  })) {
                    this.attributes.build();
                  }
                };
                FormatBlot2.prototype.wrap = function(name, value) {
                  var wrapper = _super.prototype.wrap.call(this, name, value);
                  if (wrapper instanceof FormatBlot2 && wrapper.statics.scope === this.statics.scope) {
                    this.attributes.move(wrapper);
                  }
                  return wrapper;
                };
                return FormatBlot2;
              }(container_1.default)
            );
            exports2.default = FormatBlot;
          },
          /* 19 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
                d.__proto__ = b;
              } || function(d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
              return function(d, b) {
                extendStatics(d, b);
                function __() {
                  this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var shadow_1 = __webpack_require__(30);
            var Registry = __webpack_require__(1);
            var LeafBlot = (
              /** @class */
              function(_super) {
                __extends(LeafBlot2, _super);
                function LeafBlot2() {
                  return _super !== null && _super.apply(this, arguments) || this;
                }
                LeafBlot2.value = function(domNode) {
                  return true;
                };
                LeafBlot2.prototype.index = function(node, offset) {
                  if (this.domNode === node || this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
                    return Math.min(offset, 1);
                  }
                  return -1;
                };
                LeafBlot2.prototype.position = function(index, inclusive) {
                  var offset = [].indexOf.call(this.parent.domNode.childNodes, this.domNode);
                  if (index > 0)
                    offset += 1;
                  return [this.parent.domNode, offset];
                };
                LeafBlot2.prototype.value = function() {
                  var _a;
                  return _a = {}, _a[this.statics.blotName] = this.statics.value(this.domNode) || true, _a;
                };
                LeafBlot2.scope = Registry.Scope.INLINE_BLOT;
                return LeafBlot2;
              }(shadow_1.default)
            );
            exports2.default = LeafBlot;
          },
          /* 20 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var equal = __webpack_require__(11);
            var extend = __webpack_require__(3);
            var lib = {
              attributes: {
                compose: function(a, b, keepNull) {
                  if (typeof a !== "object") a = {};
                  if (typeof b !== "object") b = {};
                  var attributes = extend(true, {}, b);
                  if (!keepNull) {
                    attributes = Object.keys(attributes).reduce(function(copy, key2) {
                      if (attributes[key2] != null) {
                        copy[key2] = attributes[key2];
                      }
                      return copy;
                    }, {});
                  }
                  for (var key in a) {
                    if (a[key] !== void 0 && b[key] === void 0) {
                      attributes[key] = a[key];
                    }
                  }
                  return Object.keys(attributes).length > 0 ? attributes : void 0;
                },
                diff: function(a, b) {
                  if (typeof a !== "object") a = {};
                  if (typeof b !== "object") b = {};
                  var attributes = Object.keys(a).concat(Object.keys(b)).reduce(function(attributes2, key) {
                    if (!equal(a[key], b[key])) {
                      attributes2[key] = b[key] === void 0 ? null : b[key];
                    }
                    return attributes2;
                  }, {});
                  return Object.keys(attributes).length > 0 ? attributes : void 0;
                },
                transform: function(a, b, priority) {
                  if (typeof a !== "object") return b;
                  if (typeof b !== "object") return void 0;
                  if (!priority) return b;
                  var attributes = Object.keys(b).reduce(function(attributes2, key) {
                    if (a[key] === void 0) attributes2[key] = b[key];
                    return attributes2;
                  }, {});
                  return Object.keys(attributes).length > 0 ? attributes : void 0;
                }
              },
              iterator: function(ops) {
                return new Iterator(ops);
              },
              length: function(op) {
                if (typeof op["delete"] === "number") {
                  return op["delete"];
                } else if (typeof op.retain === "number") {
                  return op.retain;
                } else {
                  return typeof op.insert === "string" ? op.insert.length : 1;
                }
              }
            };
            function Iterator(ops) {
              this.ops = ops;
              this.index = 0;
              this.offset = 0;
            }
            ;
            Iterator.prototype.hasNext = function() {
              return this.peekLength() < Infinity;
            };
            Iterator.prototype.next = function(length) {
              if (!length) length = Infinity;
              var nextOp = this.ops[this.index];
              if (nextOp) {
                var offset = this.offset;
                var opLength = lib.length(nextOp);
                if (length >= opLength - offset) {
                  length = opLength - offset;
                  this.index += 1;
                  this.offset = 0;
                } else {
                  this.offset += length;
                }
                if (typeof nextOp["delete"] === "number") {
                  return { "delete": length };
                } else {
                  var retOp = {};
                  if (nextOp.attributes) {
                    retOp.attributes = nextOp.attributes;
                  }
                  if (typeof nextOp.retain === "number") {
                    retOp.retain = length;
                  } else if (typeof nextOp.insert === "string") {
                    retOp.insert = nextOp.insert.substr(offset, length);
                  } else {
                    retOp.insert = nextOp.insert;
                  }
                  return retOp;
                }
              } else {
                return { retain: Infinity };
              }
            };
            Iterator.prototype.peek = function() {
              return this.ops[this.index];
            };
            Iterator.prototype.peekLength = function() {
              if (this.ops[this.index]) {
                return lib.length(this.ops[this.index]) - this.offset;
              } else {
                return Infinity;
              }
            };
            Iterator.prototype.peekType = function() {
              if (this.ops[this.index]) {
                if (typeof this.ops[this.index]["delete"] === "number") {
                  return "delete";
                } else if (typeof this.ops[this.index].retain === "number") {
                  return "retain";
                } else {
                  return "insert";
                }
              }
              return "retain";
            };
            Iterator.prototype.rest = function() {
              if (!this.hasNext()) {
                return [];
              } else if (this.offset === 0) {
                return this.ops.slice(this.index);
              } else {
                var offset = this.offset;
                var index = this.index;
                var next = this.next();
                var rest = this.ops.slice(this.index);
                this.offset = offset;
                this.index = index;
                return [next].concat(rest);
              }
            };
            module2.exports = lib;
          },
          /* 21 */
          /***/
          function(module2, exports2) {
            var clone = function() {
              "use strict";
              function _instanceof(obj, type) {
                return type != null && obj instanceof type;
              }
              var nativeMap;
              try {
                nativeMap = Map;
              } catch (_) {
                nativeMap = function() {
                };
              }
              var nativeSet;
              try {
                nativeSet = Set;
              } catch (_) {
                nativeSet = function() {
                };
              }
              var nativePromise;
              try {
                nativePromise = Promise;
              } catch (_) {
                nativePromise = function() {
                };
              }
              function clone2(parent, circular, depth, prototype, includeNonEnumerable) {
                if (typeof circular === "object") {
                  depth = circular.depth;
                  prototype = circular.prototype;
                  includeNonEnumerable = circular.includeNonEnumerable;
                  circular = circular.circular;
                }
                var allParents = [];
                var allChildren = [];
                var useBuffer = typeof Buffer != "undefined";
                if (typeof circular == "undefined")
                  circular = true;
                if (typeof depth == "undefined")
                  depth = Infinity;
                function _clone(parent2, depth2) {
                  if (parent2 === null)
                    return null;
                  if (depth2 === 0)
                    return parent2;
                  var child;
                  var proto;
                  if (typeof parent2 != "object") {
                    return parent2;
                  }
                  if (_instanceof(parent2, nativeMap)) {
                    child = new nativeMap();
                  } else if (_instanceof(parent2, nativeSet)) {
                    child = new nativeSet();
                  } else if (_instanceof(parent2, nativePromise)) {
                    child = new nativePromise(function(resolve, reject) {
                      parent2.then(function(value) {
                        resolve(_clone(value, depth2 - 1));
                      }, function(err) {
                        reject(_clone(err, depth2 - 1));
                      });
                    });
                  } else if (clone2.__isArray(parent2)) {
                    child = [];
                  } else if (clone2.__isRegExp(parent2)) {
                    child = new RegExp(parent2.source, __getRegExpFlags(parent2));
                    if (parent2.lastIndex) child.lastIndex = parent2.lastIndex;
                  } else if (clone2.__isDate(parent2)) {
                    child = new Date(parent2.getTime());
                  } else if (useBuffer && Buffer.isBuffer(parent2)) {
                    if (Buffer.allocUnsafe) {
                      child = Buffer.allocUnsafe(parent2.length);
                    } else {
                      child = new Buffer(parent2.length);
                    }
                    parent2.copy(child);
                    return child;
                  } else if (_instanceof(parent2, Error)) {
                    child = Object.create(parent2);
                  } else {
                    if (typeof prototype == "undefined") {
                      proto = Object.getPrototypeOf(parent2);
                      child = Object.create(proto);
                    } else {
                      child = Object.create(prototype);
                      proto = prototype;
                    }
                  }
                  if (circular) {
                    var index = allParents.indexOf(parent2);
                    if (index != -1) {
                      return allChildren[index];
                    }
                    allParents.push(parent2);
                    allChildren.push(child);
                  }
                  if (_instanceof(parent2, nativeMap)) {
                    parent2.forEach(function(value, key) {
                      var keyChild = _clone(key, depth2 - 1);
                      var valueChild = _clone(value, depth2 - 1);
                      child.set(keyChild, valueChild);
                    });
                  }
                  if (_instanceof(parent2, nativeSet)) {
                    parent2.forEach(function(value) {
                      var entryChild = _clone(value, depth2 - 1);
                      child.add(entryChild);
                    });
                  }
                  for (var i in parent2) {
                    var attrs;
                    if (proto) {
                      attrs = Object.getOwnPropertyDescriptor(proto, i);
                    }
                    if (attrs && attrs.set == null) {
                      continue;
                    }
                    child[i] = _clone(parent2[i], depth2 - 1);
                  }
                  if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(parent2);
                    for (var i = 0; i < symbols.length; i++) {
                      var symbol = symbols[i];
                      var descriptor = Object.getOwnPropertyDescriptor(parent2, symbol);
                      if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
                        continue;
                      }
                      child[symbol] = _clone(parent2[symbol], depth2 - 1);
                      if (!descriptor.enumerable) {
                        Object.defineProperty(child, symbol, {
                          enumerable: false
                        });
                      }
                    }
                  }
                  if (includeNonEnumerable) {
                    var allPropertyNames = Object.getOwnPropertyNames(parent2);
                    for (var i = 0; i < allPropertyNames.length; i++) {
                      var propertyName = allPropertyNames[i];
                      var descriptor = Object.getOwnPropertyDescriptor(parent2, propertyName);
                      if (descriptor && descriptor.enumerable) {
                        continue;
                      }
                      child[propertyName] = _clone(parent2[propertyName], depth2 - 1);
                      Object.defineProperty(child, propertyName, {
                        enumerable: false
                      });
                    }
                  }
                  return child;
                }
                return _clone(parent, depth);
              }
              clone2.clonePrototype = function clonePrototype(parent) {
                if (parent === null)
                  return null;
                var c = function() {
                };
                c.prototype = parent;
                return new c();
              };
              function __objToStr(o) {
                return Object.prototype.toString.call(o);
              }
              clone2.__objToStr = __objToStr;
              function __isDate(o) {
                return typeof o === "object" && __objToStr(o) === "[object Date]";
              }
              clone2.__isDate = __isDate;
              function __isArray(o) {
                return typeof o === "object" && __objToStr(o) === "[object Array]";
              }
              clone2.__isArray = __isArray;
              function __isRegExp(o) {
                return typeof o === "object" && __objToStr(o) === "[object RegExp]";
              }
              clone2.__isRegExp = __isRegExp;
              function __getRegExpFlags(re) {
                var flags = "";
                if (re.global) flags += "g";
                if (re.ignoreCase) flags += "i";
                if (re.multiline) flags += "m";
                return flags;
              }
              clone2.__getRegExpFlags = __getRegExpFlags;
              return clone2;
            }();
            if (typeof module2 === "object" && module2.exports) {
              module2.exports = clone;
            }
          },
          /* 22 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _slicedToArray = /* @__PURE__ */ function() {
              function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i) break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"]) _i["return"]();
                  } finally {
                    if (_d) throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _emitter = __webpack_require__(8);
            var _emitter2 = _interopRequireDefault(_emitter);
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            var _break = __webpack_require__(16);
            var _break2 = _interopRequireDefault(_break);
            var _code = __webpack_require__(13);
            var _code2 = _interopRequireDefault(_code);
            var _container = __webpack_require__(25);
            var _container2 = _interopRequireDefault(_container);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            function isLine(blot) {
              return blot instanceof _block2.default || blot instanceof _block.BlockEmbed;
            }
            var Scroll = function(_Parchment$Scroll) {
              _inherits(Scroll2, _Parchment$Scroll);
              function Scroll2(domNode, config) {
                _classCallCheck(this, Scroll2);
                var _this = _possibleConstructorReturn(this, (Scroll2.__proto__ || Object.getPrototypeOf(Scroll2)).call(this, domNode));
                _this.emitter = config.emitter;
                if (Array.isArray(config.whitelist)) {
                  _this.whitelist = config.whitelist.reduce(function(whitelist, format) {
                    whitelist[format] = true;
                    return whitelist;
                  }, {});
                }
                _this.domNode.addEventListener("DOMNodeInserted", function() {
                });
                _this.optimize();
                _this.enable();
                return _this;
              }
              _createClass(Scroll2, [{
                key: "batchStart",
                value: function batchStart() {
                  this.batch = true;
                }
              }, {
                key: "batchEnd",
                value: function batchEnd() {
                  this.batch = false;
                  this.optimize();
                }
              }, {
                key: "deleteAt",
                value: function deleteAt(index, length) {
                  var _line = this.line(index), _line2 = _slicedToArray(_line, 2), first = _line2[0], offset = _line2[1];
                  var _line3 = this.line(index + length), _line4 = _slicedToArray(_line3, 1), last = _line4[0];
                  _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "deleteAt", this).call(this, index, length);
                  if (last != null && first !== last && offset > 0) {
                    if (first instanceof _block.BlockEmbed || last instanceof _block.BlockEmbed) {
                      this.optimize();
                      return;
                    }
                    if (first instanceof _code2.default) {
                      var newlineIndex = first.newlineIndex(first.length(), true);
                      if (newlineIndex > -1) {
                        first = first.split(newlineIndex + 1);
                        if (first === last) {
                          this.optimize();
                          return;
                        }
                      }
                    } else if (last instanceof _code2.default) {
                      var _newlineIndex = last.newlineIndex(0);
                      if (_newlineIndex > -1) {
                        last.split(_newlineIndex + 1);
                      }
                    }
                    var ref2 = last.children.head instanceof _break2.default ? null : last.children.head;
                    first.moveChildren(last, ref2);
                    first.remove();
                  }
                  this.optimize();
                }
              }, {
                key: "enable",
                value: function enable() {
                  var enabled = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
                  this.domNode.setAttribute("contenteditable", enabled);
                }
              }, {
                key: "formatAt",
                value: function formatAt(index, length, format, value) {
                  if (this.whitelist != null && !this.whitelist[format]) return;
                  _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "formatAt", this).call(this, index, length, format, value);
                  this.optimize();
                }
              }, {
                key: "insertAt",
                value: function insertAt(index, value, def) {
                  if (def != null && this.whitelist != null && !this.whitelist[value]) return;
                  if (index >= this.length()) {
                    if (def == null || _parchment2.default.query(value, _parchment2.default.Scope.BLOCK) == null) {
                      var blot = _parchment2.default.create(this.statics.defaultChild);
                      this.appendChild(blot);
                      if (def == null && value.endsWith("\n")) {
                        value = value.slice(0, -1);
                      }
                      blot.insertAt(0, value, def);
                    } else {
                      var embed = _parchment2.default.create(value, def);
                      this.appendChild(embed);
                    }
                  } else {
                    _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "insertAt", this).call(this, index, value, def);
                  }
                  this.optimize();
                }
              }, {
                key: "insertBefore",
                value: function insertBefore(blot, ref2) {
                  if (blot.statics.scope === _parchment2.default.Scope.INLINE_BLOT) {
                    var wrapper = _parchment2.default.create(this.statics.defaultChild);
                    wrapper.appendChild(blot);
                    blot = wrapper;
                  }
                  _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "insertBefore", this).call(this, blot, ref2);
                }
              }, {
                key: "leaf",
                value: function leaf(index) {
                  return this.path(index).pop() || [null, -1];
                }
              }, {
                key: "line",
                value: function line(index) {
                  if (index === this.length()) {
                    return this.line(index - 1);
                  }
                  return this.descendant(isLine, index);
                }
              }, {
                key: "lines",
                value: function lines() {
                  var index = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
                  var length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Number.MAX_VALUE;
                  var getLines = function getLines2(blot, index2, length2) {
                    var lines2 = [], lengthLeft = length2;
                    blot.children.forEachAt(index2, length2, function(child, index3, length3) {
                      if (isLine(child)) {
                        lines2.push(child);
                      } else if (child instanceof _parchment2.default.Container) {
                        lines2 = lines2.concat(getLines2(child, index3, lengthLeft));
                      }
                      lengthLeft -= length3;
                    });
                    return lines2;
                  };
                  return getLines(this, index, length);
                }
              }, {
                key: "optimize",
                value: function optimize() {
                  var mutations = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
                  var context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                  if (this.batch === true) return;
                  _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "optimize", this).call(this, mutations, context);
                  if (mutations.length > 0) {
                    this.emitter.emit(_emitter2.default.events.SCROLL_OPTIMIZE, mutations, context);
                  }
                }
              }, {
                key: "path",
                value: function path(index) {
                  return _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "path", this).call(this, index).slice(1);
                }
              }, {
                key: "update",
                value: function update(mutations) {
                  if (this.batch === true) return;
                  var source = _emitter2.default.sources.USER;
                  if (typeof mutations === "string") {
                    source = mutations;
                  }
                  if (!Array.isArray(mutations)) {
                    mutations = this.observer.takeRecords();
                  }
                  if (mutations.length > 0) {
                    this.emitter.emit(_emitter2.default.events.SCROLL_BEFORE_UPDATE, source, mutations);
                  }
                  _get(Scroll2.prototype.__proto__ || Object.getPrototypeOf(Scroll2.prototype), "update", this).call(this, mutations.concat([]));
                  if (mutations.length > 0) {
                    this.emitter.emit(_emitter2.default.events.SCROLL_UPDATE, source, mutations);
                  }
                }
              }]);
              return Scroll2;
            }(_parchment2.default.Scroll);
            Scroll.blotName = "scroll";
            Scroll.className = "ql-editor";
            Scroll.tagName = "DIV";
            Scroll.defaultChild = "block";
            Scroll.allowedChildren = [_block2.default, _block.BlockEmbed, _container2.default];
            exports2.default = Scroll;
          },
          /* 23 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.SHORTKEY = exports2.default = void 0;
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var _slicedToArray = /* @__PURE__ */ function() {
              function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i) break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"]) _i["return"]();
                  } finally {
                    if (_d) throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _clone = __webpack_require__(21);
            var _clone2 = _interopRequireDefault(_clone);
            var _deepEqual = __webpack_require__(11);
            var _deepEqual2 = _interopRequireDefault(_deepEqual);
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _op = __webpack_require__(20);
            var _op2 = _interopRequireDefault(_op);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _logger = __webpack_require__(10);
            var _logger2 = _interopRequireDefault(_logger);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _defineProperty(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var debug = (0, _logger2.default)("quill:keyboard");
            var SHORTKEY = /Mac/i.test(navigator.platform) ? "metaKey" : "ctrlKey";
            var Keyboard = function(_Module) {
              _inherits(Keyboard2, _Module);
              _createClass(Keyboard2, null, [{
                key: "match",
                value: function match(evt, binding) {
                  binding = normalize(binding);
                  if (["altKey", "ctrlKey", "metaKey", "shiftKey"].some(function(key) {
                    return !!binding[key] !== evt[key] && binding[key] !== null;
                  })) {
                    return false;
                  }
                  return binding.key === (evt.which || evt.keyCode);
                }
              }]);
              function Keyboard2(quill, options) {
                _classCallCheck(this, Keyboard2);
                var _this = _possibleConstructorReturn(this, (Keyboard2.__proto__ || Object.getPrototypeOf(Keyboard2)).call(this, quill, options));
                _this.bindings = {};
                Object.keys(_this.options.bindings).forEach(function(name) {
                  if (name === "list autofill" && quill.scroll.whitelist != null && !quill.scroll.whitelist["list"]) {
                    return;
                  }
                  if (_this.options.bindings[name]) {
                    _this.addBinding(_this.options.bindings[name]);
                  }
                });
                _this.addBinding({ key: Keyboard2.keys.ENTER, shiftKey: null }, handleEnter);
                _this.addBinding({ key: Keyboard2.keys.ENTER, metaKey: null, ctrlKey: null, altKey: null }, function() {
                });
                if (/Firefox/i.test(navigator.userAgent)) {
                  _this.addBinding({ key: Keyboard2.keys.BACKSPACE }, { collapsed: true }, handleBackspace);
                  _this.addBinding({ key: Keyboard2.keys.DELETE }, { collapsed: true }, handleDelete);
                } else {
                  _this.addBinding({ key: Keyboard2.keys.BACKSPACE }, { collapsed: true, prefix: /^.?$/ }, handleBackspace);
                  _this.addBinding({ key: Keyboard2.keys.DELETE }, { collapsed: true, suffix: /^.?$/ }, handleDelete);
                }
                _this.addBinding({ key: Keyboard2.keys.BACKSPACE }, { collapsed: false }, handleDeleteRange);
                _this.addBinding({ key: Keyboard2.keys.DELETE }, { collapsed: false }, handleDeleteRange);
                _this.addBinding({ key: Keyboard2.keys.BACKSPACE, altKey: null, ctrlKey: null, metaKey: null, shiftKey: null }, { collapsed: true, offset: 0 }, handleBackspace);
                _this.listen();
                return _this;
              }
              _createClass(Keyboard2, [{
                key: "addBinding",
                value: function addBinding(key) {
                  var context = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
                  var handler = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
                  var binding = normalize(key);
                  if (binding == null || binding.key == null) {
                    return debug.warn("Attempted to add invalid keyboard binding", binding);
                  }
                  if (typeof context === "function") {
                    context = { handler: context };
                  }
                  if (typeof handler === "function") {
                    handler = { handler };
                  }
                  binding = (0, _extend2.default)(binding, context, handler);
                  this.bindings[binding.key] = this.bindings[binding.key] || [];
                  this.bindings[binding.key].push(binding);
                }
              }, {
                key: "listen",
                value: function listen() {
                  var _this2 = this;
                  this.quill.root.addEventListener("keydown", function(evt) {
                    if (evt.defaultPrevented) return;
                    var which = evt.which || evt.keyCode;
                    var bindings = (_this2.bindings[which] || []).filter(function(binding) {
                      return Keyboard2.match(evt, binding);
                    });
                    if (bindings.length === 0) return;
                    var range = _this2.quill.getSelection();
                    if (range == null || !_this2.quill.hasFocus()) return;
                    var _quill$getLine = _this2.quill.getLine(range.index), _quill$getLine2 = _slicedToArray(_quill$getLine, 2), line = _quill$getLine2[0], offset = _quill$getLine2[1];
                    var _quill$getLeaf = _this2.quill.getLeaf(range.index), _quill$getLeaf2 = _slicedToArray(_quill$getLeaf, 2), leafStart = _quill$getLeaf2[0], offsetStart = _quill$getLeaf2[1];
                    var _ref = range.length === 0 ? [leafStart, offsetStart] : _this2.quill.getLeaf(range.index + range.length), _ref2 = _slicedToArray(_ref, 2), leafEnd = _ref2[0], offsetEnd = _ref2[1];
                    var prefixText = leafStart instanceof _parchment2.default.Text ? leafStart.value().slice(0, offsetStart) : "";
                    var suffixText = leafEnd instanceof _parchment2.default.Text ? leafEnd.value().slice(offsetEnd) : "";
                    var curContext = {
                      collapsed: range.length === 0,
                      empty: range.length === 0 && line.length() <= 1,
                      format: _this2.quill.getFormat(range),
                      offset,
                      prefix: prefixText,
                      suffix: suffixText
                    };
                    var prevented = bindings.some(function(binding) {
                      if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) return false;
                      if (binding.empty != null && binding.empty !== curContext.empty) return false;
                      if (binding.offset != null && binding.offset !== curContext.offset) return false;
                      if (Array.isArray(binding.format)) {
                        if (binding.format.every(function(name) {
                          return curContext.format[name] == null;
                        })) {
                          return false;
                        }
                      } else if (_typeof(binding.format) === "object") {
                        if (!Object.keys(binding.format).every(function(name) {
                          if (binding.format[name] === true) return curContext.format[name] != null;
                          if (binding.format[name] === false) return curContext.format[name] == null;
                          return (0, _deepEqual2.default)(binding.format[name], curContext.format[name]);
                        })) {
                          return false;
                        }
                      }
                      if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) return false;
                      if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) return false;
                      return binding.handler.call(_this2, range, curContext) !== true;
                    });
                    if (prevented) {
                      evt.preventDefault();
                    }
                  });
                }
              }]);
              return Keyboard2;
            }(_module2.default);
            Keyboard.keys = {
              BACKSPACE: 8,
              TAB: 9,
              ENTER: 13,
              ESCAPE: 27,
              LEFT: 37,
              UP: 38,
              RIGHT: 39,
              DOWN: 40,
              DELETE: 46
            };
            Keyboard.DEFAULTS = {
              bindings: {
                "bold": makeFormatHandler("bold"),
                "italic": makeFormatHandler("italic"),
                "underline": makeFormatHandler("underline"),
                "indent": {
                  // highlight tab or tab at beginning of list, indent or blockquote
                  key: Keyboard.keys.TAB,
                  format: ["blockquote", "indent", "list"],
                  handler: function handler(range, context) {
                    if (context.collapsed && context.offset !== 0) return true;
                    this.quill.format("indent", "+1", _quill2.default.sources.USER);
                  }
                },
                "outdent": {
                  key: Keyboard.keys.TAB,
                  shiftKey: true,
                  format: ["blockquote", "indent", "list"],
                  // highlight tab or tab at beginning of list, indent or blockquote
                  handler: function handler(range, context) {
                    if (context.collapsed && context.offset !== 0) return true;
                    this.quill.format("indent", "-1", _quill2.default.sources.USER);
                  }
                },
                "outdent backspace": {
                  key: Keyboard.keys.BACKSPACE,
                  collapsed: true,
                  shiftKey: null,
                  metaKey: null,
                  ctrlKey: null,
                  altKey: null,
                  format: ["indent", "list"],
                  offset: 0,
                  handler: function handler(range, context) {
                    if (context.format.indent != null) {
                      this.quill.format("indent", "-1", _quill2.default.sources.USER);
                    } else if (context.format.list != null) {
                      this.quill.format("list", false, _quill2.default.sources.USER);
                    }
                  }
                },
                "indent code-block": makeCodeBlockHandler(true),
                "outdent code-block": makeCodeBlockHandler(false),
                "remove tab": {
                  key: Keyboard.keys.TAB,
                  shiftKey: true,
                  collapsed: true,
                  prefix: /\t$/,
                  handler: function handler(range) {
                    this.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);
                  }
                },
                "tab": {
                  key: Keyboard.keys.TAB,
                  handler: function handler(range) {
                    this.quill.history.cutoff();
                    var delta = new _quillDelta2.default().retain(range.index).delete(range.length).insert("	");
                    this.quill.updateContents(delta, _quill2.default.sources.USER);
                    this.quill.history.cutoff();
                    this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
                  }
                },
                "list empty enter": {
                  key: Keyboard.keys.ENTER,
                  collapsed: true,
                  format: ["list"],
                  empty: true,
                  handler: function handler(range, context) {
                    this.quill.format("list", false, _quill2.default.sources.USER);
                    if (context.format.indent) {
                      this.quill.format("indent", false, _quill2.default.sources.USER);
                    }
                  }
                },
                "checklist enter": {
                  key: Keyboard.keys.ENTER,
                  collapsed: true,
                  format: { list: "checked" },
                  handler: function handler(range) {
                    var _quill$getLine3 = this.quill.getLine(range.index), _quill$getLine4 = _slicedToArray(_quill$getLine3, 2), line = _quill$getLine4[0], offset = _quill$getLine4[1];
                    var formats = (0, _extend2.default)({}, line.formats(), { list: "checked" });
                    var delta = new _quillDelta2.default().retain(range.index).insert("\n", formats).retain(line.length() - offset - 1).retain(1, { list: "unchecked" });
                    this.quill.updateContents(delta, _quill2.default.sources.USER);
                    this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
                    this.quill.scrollIntoView();
                  }
                },
                "header enter": {
                  key: Keyboard.keys.ENTER,
                  collapsed: true,
                  format: ["header"],
                  suffix: /^$/,
                  handler: function handler(range, context) {
                    var _quill$getLine5 = this.quill.getLine(range.index), _quill$getLine6 = _slicedToArray(_quill$getLine5, 2), line = _quill$getLine6[0], offset = _quill$getLine6[1];
                    var delta = new _quillDelta2.default().retain(range.index).insert("\n", context.format).retain(line.length() - offset - 1).retain(1, { header: null });
                    this.quill.updateContents(delta, _quill2.default.sources.USER);
                    this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
                    this.quill.scrollIntoView();
                  }
                },
                "list autofill": {
                  key: " ",
                  collapsed: true,
                  format: { list: false },
                  prefix: /^\s*?(\d+\.|-|\*|\[ ?\]|\[x\])$/,
                  handler: function handler(range, context) {
                    var length = context.prefix.length;
                    var _quill$getLine7 = this.quill.getLine(range.index), _quill$getLine8 = _slicedToArray(_quill$getLine7, 2), line = _quill$getLine8[0], offset = _quill$getLine8[1];
                    if (offset > length) return true;
                    var value = void 0;
                    switch (context.prefix.trim()) {
                      case "[]":
                      case "[ ]":
                        value = "unchecked";
                        break;
                      case "[x]":
                        value = "checked";
                        break;
                      case "-":
                      case "*":
                        value = "bullet";
                        break;
                      default:
                        value = "ordered";
                    }
                    this.quill.insertText(range.index, " ", _quill2.default.sources.USER);
                    this.quill.history.cutoff();
                    var delta = new _quillDelta2.default().retain(range.index - offset).delete(length + 1).retain(line.length() - 2 - offset).retain(1, { list: value });
                    this.quill.updateContents(delta, _quill2.default.sources.USER);
                    this.quill.history.cutoff();
                    this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);
                  }
                },
                "code exit": {
                  key: Keyboard.keys.ENTER,
                  collapsed: true,
                  format: ["code-block"],
                  prefix: /\n\n$/,
                  suffix: /^\s+$/,
                  handler: function handler(range) {
                    var _quill$getLine9 = this.quill.getLine(range.index), _quill$getLine10 = _slicedToArray(_quill$getLine9, 2), line = _quill$getLine10[0], offset = _quill$getLine10[1];
                    var delta = new _quillDelta2.default().retain(range.index + line.length() - offset - 2).retain(1, { "code-block": null }).delete(1);
                    this.quill.updateContents(delta, _quill2.default.sources.USER);
                  }
                },
                "embed left": makeEmbedArrowHandler(Keyboard.keys.LEFT, false),
                "embed left shift": makeEmbedArrowHandler(Keyboard.keys.LEFT, true),
                "embed right": makeEmbedArrowHandler(Keyboard.keys.RIGHT, false),
                "embed right shift": makeEmbedArrowHandler(Keyboard.keys.RIGHT, true)
              }
            };
            function makeEmbedArrowHandler(key, shiftKey) {
              var _ref3;
              var where2 = key === Keyboard.keys.LEFT ? "prefix" : "suffix";
              return _ref3 = {
                key,
                shiftKey,
                altKey: null
              }, _defineProperty(_ref3, where2, /^$/), _defineProperty(_ref3, "handler", function handler(range) {
                var index = range.index;
                if (key === Keyboard.keys.RIGHT) {
                  index += range.length + 1;
                }
                var _quill$getLeaf3 = this.quill.getLeaf(index), _quill$getLeaf4 = _slicedToArray(_quill$getLeaf3, 1), leaf = _quill$getLeaf4[0];
                if (!(leaf instanceof _parchment2.default.Embed)) return true;
                if (key === Keyboard.keys.LEFT) {
                  if (shiftKey) {
                    this.quill.setSelection(range.index - 1, range.length + 1, _quill2.default.sources.USER);
                  } else {
                    this.quill.setSelection(range.index - 1, _quill2.default.sources.USER);
                  }
                } else {
                  if (shiftKey) {
                    this.quill.setSelection(range.index, range.length + 1, _quill2.default.sources.USER);
                  } else {
                    this.quill.setSelection(range.index + range.length + 1, _quill2.default.sources.USER);
                  }
                }
                return false;
              }), _ref3;
            }
            function handleBackspace(range, context) {
              if (range.index === 0 || this.quill.getLength() <= 1) return;
              var _quill$getLine11 = this.quill.getLine(range.index), _quill$getLine12 = _slicedToArray(_quill$getLine11, 1), line = _quill$getLine12[0];
              var formats = {};
              if (context.offset === 0) {
                var _quill$getLine13 = this.quill.getLine(range.index - 1), _quill$getLine14 = _slicedToArray(_quill$getLine13, 1), prev = _quill$getLine14[0];
                if (prev != null && prev.length() > 1) {
                  var curFormats = line.formats();
                  var prevFormats = this.quill.getFormat(range.index - 1, 1);
                  formats = _op2.default.attributes.diff(curFormats, prevFormats) || {};
                }
              }
              var length = /[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(context.prefix) ? 2 : 1;
              this.quill.deleteText(range.index - length, length, _quill2.default.sources.USER);
              if (Object.keys(formats).length > 0) {
                this.quill.formatLine(range.index - length, length, formats, _quill2.default.sources.USER);
              }
              this.quill.focus();
            }
            function handleDelete(range, context) {
              var length = /^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(context.suffix) ? 2 : 1;
              if (range.index >= this.quill.getLength() - length) return;
              var formats = {}, nextLength = 0;
              var _quill$getLine15 = this.quill.getLine(range.index), _quill$getLine16 = _slicedToArray(_quill$getLine15, 1), line = _quill$getLine16[0];
              if (context.offset >= line.length() - 1) {
                var _quill$getLine17 = this.quill.getLine(range.index + 1), _quill$getLine18 = _slicedToArray(_quill$getLine17, 1), next = _quill$getLine18[0];
                if (next) {
                  var curFormats = line.formats();
                  var nextFormats = this.quill.getFormat(range.index, 1);
                  formats = _op2.default.attributes.diff(curFormats, nextFormats) || {};
                  nextLength = next.length();
                }
              }
              this.quill.deleteText(range.index, length, _quill2.default.sources.USER);
              if (Object.keys(formats).length > 0) {
                this.quill.formatLine(range.index + nextLength - 1, length, formats, _quill2.default.sources.USER);
              }
            }
            function handleDeleteRange(range) {
              var lines = this.quill.getLines(range);
              var formats = {};
              if (lines.length > 1) {
                var firstFormats = lines[0].formats();
                var lastFormats = lines[lines.length - 1].formats();
                formats = _op2.default.attributes.diff(lastFormats, firstFormats) || {};
              }
              this.quill.deleteText(range, _quill2.default.sources.USER);
              if (Object.keys(formats).length > 0) {
                this.quill.formatLine(range.index, 1, formats, _quill2.default.sources.USER);
              }
              this.quill.setSelection(range.index, _quill2.default.sources.SILENT);
              this.quill.focus();
            }
            function handleEnter(range, context) {
              var _this3 = this;
              if (range.length > 0) {
                this.quill.scroll.deleteAt(range.index, range.length);
              }
              var lineFormats = Object.keys(context.format).reduce(function(lineFormats2, format) {
                if (_parchment2.default.query(format, _parchment2.default.Scope.BLOCK) && !Array.isArray(context.format[format])) {
                  lineFormats2[format] = context.format[format];
                }
                return lineFormats2;
              }, {});
              this.quill.insertText(range.index, "\n", lineFormats, _quill2.default.sources.USER);
              this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
              this.quill.focus();
              Object.keys(context.format).forEach(function(name) {
                if (lineFormats[name] != null) return;
                if (Array.isArray(context.format[name])) return;
                if (name === "link") return;
                _this3.quill.format(name, context.format[name], _quill2.default.sources.USER);
              });
            }
            function makeCodeBlockHandler(indent) {
              return {
                key: Keyboard.keys.TAB,
                shiftKey: !indent,
                format: { "code-block": true },
                handler: function handler(range) {
                  var CodeBlock = _parchment2.default.query("code-block");
                  var index = range.index, length = range.length;
                  var _quill$scroll$descend = this.quill.scroll.descendant(CodeBlock, index), _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2), block = _quill$scroll$descend2[0], offset = _quill$scroll$descend2[1];
                  if (block == null) return;
                  var scrollIndex = this.quill.getIndex(block);
                  var start = block.newlineIndex(offset, true) + 1;
                  var end = block.newlineIndex(scrollIndex + offset + length);
                  var lines = block.domNode.textContent.slice(start, end).split("\n");
                  offset = 0;
                  lines.forEach(function(line, i) {
                    if (indent) {
                      block.insertAt(start + offset, CodeBlock.TAB);
                      offset += CodeBlock.TAB.length;
                      if (i === 0) {
                        index += CodeBlock.TAB.length;
                      } else {
                        length += CodeBlock.TAB.length;
                      }
                    } else if (line.startsWith(CodeBlock.TAB)) {
                      block.deleteAt(start + offset, CodeBlock.TAB.length);
                      offset -= CodeBlock.TAB.length;
                      if (i === 0) {
                        index -= CodeBlock.TAB.length;
                      } else {
                        length -= CodeBlock.TAB.length;
                      }
                    }
                    offset += line.length + 1;
                  });
                  this.quill.update(_quill2.default.sources.USER);
                  this.quill.setSelection(index, length, _quill2.default.sources.SILENT);
                }
              };
            }
            function makeFormatHandler(format) {
              return {
                key: format[0].toUpperCase(),
                shortKey: true,
                handler: function handler(range, context) {
                  this.quill.format(format, !context.format[format], _quill2.default.sources.USER);
                }
              };
            }
            function normalize(binding) {
              if (typeof binding === "string" || typeof binding === "number") {
                return normalize({ key: binding });
              }
              if ((typeof binding === "undefined" ? "undefined" : _typeof(binding)) === "object") {
                binding = (0, _clone2.default)(binding, false);
              }
              if (typeof binding.key === "string") {
                if (Keyboard.keys[binding.key.toUpperCase()] != null) {
                  binding.key = Keyboard.keys[binding.key.toUpperCase()];
                } else if (binding.key.length === 1) {
                  binding.key = binding.key.toUpperCase().charCodeAt(0);
                } else {
                  return null;
                }
              }
              if (binding.shortKey) {
                binding[SHORTKEY] = binding.shortKey;
                delete binding.shortKey;
              }
              return binding;
            }
            exports2.default = Keyboard;
            exports2.SHORTKEY = SHORTKEY;
          },
          /* 24 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _slicedToArray = /* @__PURE__ */ function() {
              function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i) break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"]) _i["return"]();
                  } finally {
                    if (_d) throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _text = __webpack_require__(7);
            var _text2 = _interopRequireDefault(_text);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Cursor = function(_Parchment$Embed) {
              _inherits(Cursor2, _Parchment$Embed);
              _createClass(Cursor2, null, [{
                key: "value",
                value: function value() {
                  return void 0;
                }
              }]);
              function Cursor2(domNode, selection) {
                _classCallCheck(this, Cursor2);
                var _this = _possibleConstructorReturn(this, (Cursor2.__proto__ || Object.getPrototypeOf(Cursor2)).call(this, domNode));
                _this.selection = selection;
                _this.textNode = document.createTextNode(Cursor2.CONTENTS);
                _this.domNode.appendChild(_this.textNode);
                _this._length = 0;
                return _this;
              }
              _createClass(Cursor2, [{
                key: "detach",
                value: function detach() {
                  if (this.parent != null) this.parent.removeChild(this);
                }
              }, {
                key: "format",
                value: function format(name, value) {
                  if (this._length !== 0) {
                    return _get(Cursor2.prototype.__proto__ || Object.getPrototypeOf(Cursor2.prototype), "format", this).call(this, name, value);
                  }
                  var target = this, index = 0;
                  while (target != null && target.statics.scope !== _parchment2.default.Scope.BLOCK_BLOT) {
                    index += target.offset(target.parent);
                    target = target.parent;
                  }
                  if (target != null) {
                    this._length = Cursor2.CONTENTS.length;
                    target.optimize();
                    target.formatAt(index, Cursor2.CONTENTS.length, name, value);
                    this._length = 0;
                  }
                }
              }, {
                key: "index",
                value: function index(node, offset) {
                  if (node === this.textNode) return 0;
                  return _get(Cursor2.prototype.__proto__ || Object.getPrototypeOf(Cursor2.prototype), "index", this).call(this, node, offset);
                }
              }, {
                key: "length",
                value: function length() {
                  return this._length;
                }
              }, {
                key: "position",
                value: function position() {
                  return [this.textNode, this.textNode.data.length];
                }
              }, {
                key: "remove",
                value: function remove() {
                  _get(Cursor2.prototype.__proto__ || Object.getPrototypeOf(Cursor2.prototype), "remove", this).call(this);
                  this.parent = null;
                }
              }, {
                key: "restore",
                value: function restore() {
                  if (this.selection.composing || this.parent == null) return;
                  var textNode = this.textNode;
                  var range = this.selection.getNativeRange();
                  var restoreText = void 0, start = void 0, end = void 0;
                  if (range != null && range.start.node === textNode && range.end.node === textNode) {
                    var _ref = [textNode, range.start.offset, range.end.offset];
                    restoreText = _ref[0];
                    start = _ref[1];
                    end = _ref[2];
                  }
                  while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {
                    this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);
                  }
                  if (this.textNode.data !== Cursor2.CONTENTS) {
                    var text = this.textNode.data.split(Cursor2.CONTENTS).join("");
                    if (this.next instanceof _text2.default) {
                      restoreText = this.next.domNode;
                      this.next.insertAt(0, text);
                      this.textNode.data = Cursor2.CONTENTS;
                    } else {
                      this.textNode.data = text;
                      this.parent.insertBefore(_parchment2.default.create(this.textNode), this);
                      this.textNode = document.createTextNode(Cursor2.CONTENTS);
                      this.domNode.appendChild(this.textNode);
                    }
                  }
                  this.remove();
                  if (start != null) {
                    var _map = [start, end].map(function(offset) {
                      return Math.max(0, Math.min(restoreText.data.length, offset - 1));
                    });
                    var _map2 = _slicedToArray(_map, 2);
                    start = _map2[0];
                    end = _map2[1];
                    return {
                      startNode: restoreText,
                      startOffset: start,
                      endNode: restoreText,
                      endOffset: end
                    };
                  }
                }
              }, {
                key: "update",
                value: function update(mutations, context) {
                  var _this2 = this;
                  if (mutations.some(function(mutation) {
                    return mutation.type === "characterData" && mutation.target === _this2.textNode;
                  })) {
                    var range = this.restore();
                    if (range) context.range = range;
                  }
                }
              }, {
                key: "value",
                value: function value() {
                  return "";
                }
              }]);
              return Cursor2;
            }(_parchment2.default.Embed);
            Cursor.blotName = "cursor";
            Cursor.className = "ql-cursor";
            Cursor.tagName = "span";
            Cursor.CONTENTS = "\uFEFF";
            exports2.default = Cursor;
          },
          /* 25 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Container = function(_Parchment$Container) {
              _inherits(Container2, _Parchment$Container);
              function Container2() {
                _classCallCheck(this, Container2);
                return _possibleConstructorReturn(this, (Container2.__proto__ || Object.getPrototypeOf(Container2)).apply(this, arguments));
              }
              return Container2;
            }(_parchment2.default.Container);
            Container.allowedChildren = [_block2.default, _block.BlockEmbed, Container];
            exports2.default = Container;
          },
          /* 26 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.ColorStyle = exports2.ColorClass = exports2.ColorAttributor = void 0;
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var ColorAttributor = function(_Parchment$Attributor) {
              _inherits(ColorAttributor2, _Parchment$Attributor);
              function ColorAttributor2() {
                _classCallCheck(this, ColorAttributor2);
                return _possibleConstructorReturn(this, (ColorAttributor2.__proto__ || Object.getPrototypeOf(ColorAttributor2)).apply(this, arguments));
              }
              _createClass(ColorAttributor2, [{
                key: "value",
                value: function value(domNode) {
                  var value2 = _get(ColorAttributor2.prototype.__proto__ || Object.getPrototypeOf(ColorAttributor2.prototype), "value", this).call(this, domNode);
                  if (!value2.startsWith("rgb(")) return value2;
                  value2 = value2.replace(/^[^\d]+/, "").replace(/[^\d]+$/, "");
                  return "#" + value2.split(",").map(function(component) {
                    return ("00" + parseInt(component).toString(16)).slice(-2);
                  }).join("");
                }
              }]);
              return ColorAttributor2;
            }(_parchment2.default.Attributor.Style);
            var ColorClass = new _parchment2.default.Attributor.Class("color", "ql-color", {
              scope: _parchment2.default.Scope.INLINE
            });
            var ColorStyle = new ColorAttributor("color", "color", {
              scope: _parchment2.default.Scope.INLINE
            });
            exports2.ColorAttributor = ColorAttributor;
            exports2.ColorClass = ColorClass;
            exports2.ColorStyle = ColorStyle;
          },
          /* 27 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.sanitize = exports2.default = void 0;
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Link2 = function(_Inline) {
              _inherits(Link3, _Inline);
              function Link3() {
                _classCallCheck(this, Link3);
                return _possibleConstructorReturn(this, (Link3.__proto__ || Object.getPrototypeOf(Link3)).apply(this, arguments));
              }
              _createClass(Link3, [{
                key: "format",
                value: function format(name, value) {
                  if (name !== this.statics.blotName || !value) return _get(Link3.prototype.__proto__ || Object.getPrototypeOf(Link3.prototype), "format", this).call(this, name, value);
                  value = this.constructor.sanitize(value);
                  this.domNode.setAttribute("href", value);
                }
              }], [{
                key: "create",
                value: function create(value) {
                  var node = _get(Link3.__proto__ || Object.getPrototypeOf(Link3), "create", this).call(this, value);
                  value = this.sanitize(value);
                  node.setAttribute("href", value);
                  node.setAttribute("rel", "noopener noreferrer");
                  node.setAttribute("target", "_blank");
                  return node;
                }
              }, {
                key: "formats",
                value: function formats(domNode) {
                  return domNode.getAttribute("href");
                }
              }, {
                key: "sanitize",
                value: function sanitize(url) {
                  return _sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;
                }
              }]);
              return Link3;
            }(_inline2.default);
            Link2.blotName = "link";
            Link2.tagName = "A";
            Link2.SANITIZED_URL = "about:blank";
            Link2.PROTOCOL_WHITELIST = ["http", "https", "mailto", "tel"];
            function _sanitize(url, protocols) {
              var anchor = document.createElement("a");
              anchor.href = url;
              var protocol = anchor.href.slice(0, anchor.href.indexOf(":"));
              return protocols.indexOf(protocol) > -1;
            }
            exports2.default = Link2;
            exports2.sanitize = _sanitize;
          },
          /* 28 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _keyboard = __webpack_require__(23);
            var _keyboard2 = _interopRequireDefault(_keyboard);
            var _dropdown = __webpack_require__(107);
            var _dropdown2 = _interopRequireDefault(_dropdown);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var optionsCounter = 0;
            function toggleAriaAttribute(element, attribute) {
              element.setAttribute(attribute, !(element.getAttribute(attribute) === "true"));
            }
            var Picker = function() {
              function Picker2(select) {
                var _this = this;
                _classCallCheck(this, Picker2);
                this.select = select;
                this.container = document.createElement("span");
                this.buildPicker();
                this.select.style.display = "none";
                this.select.parentNode.insertBefore(this.container, this.select);
                this.label.addEventListener("mousedown", function() {
                  _this.togglePicker();
                });
                this.label.addEventListener("keydown", function(event) {
                  switch (event.keyCode) {
                    // Allows the "Enter" key to open the picker
                    case _keyboard2.default.keys.ENTER:
                      _this.togglePicker();
                      break;
                    // Allows the "Escape" key to close the picker
                    case _keyboard2.default.keys.ESCAPE:
                      _this.escape();
                      event.preventDefault();
                      break;
                    default:
                  }
                });
                this.select.addEventListener("change", this.update.bind(this));
              }
              _createClass(Picker2, [{
                key: "togglePicker",
                value: function togglePicker() {
                  this.container.classList.toggle("ql-expanded");
                  toggleAriaAttribute(this.label, "aria-expanded");
                  toggleAriaAttribute(this.options, "aria-hidden");
                }
              }, {
                key: "buildItem",
                value: function buildItem(option) {
                  var _this2 = this;
                  var item = document.createElement("span");
                  item.tabIndex = "0";
                  item.setAttribute("role", "button");
                  item.classList.add("ql-picker-item");
                  if (option.hasAttribute("value")) {
                    item.setAttribute("data-value", option.getAttribute("value"));
                  }
                  if (option.textContent) {
                    item.setAttribute("data-label", option.textContent);
                  }
                  item.addEventListener("click", function() {
                    _this2.selectItem(item, true);
                  });
                  item.addEventListener("keydown", function(event) {
                    switch (event.keyCode) {
                      // Allows the "Enter" key to select an item
                      case _keyboard2.default.keys.ENTER:
                        _this2.selectItem(item, true);
                        event.preventDefault();
                        break;
                      // Allows the "Escape" key to close the picker
                      case _keyboard2.default.keys.ESCAPE:
                        _this2.escape();
                        event.preventDefault();
                        break;
                      default:
                    }
                  });
                  return item;
                }
              }, {
                key: "buildLabel",
                value: function buildLabel() {
                  var label = document.createElement("span");
                  label.classList.add("ql-picker-label");
                  label.innerHTML = _dropdown2.default;
                  label.tabIndex = "0";
                  label.setAttribute("role", "button");
                  label.setAttribute("aria-expanded", "false");
                  this.container.appendChild(label);
                  return label;
                }
              }, {
                key: "buildOptions",
                value: function buildOptions() {
                  var _this3 = this;
                  var options = document.createElement("span");
                  options.classList.add("ql-picker-options");
                  options.setAttribute("aria-hidden", "true");
                  options.tabIndex = "-1";
                  options.id = "ql-picker-options-" + optionsCounter;
                  optionsCounter += 1;
                  this.label.setAttribute("aria-controls", options.id);
                  this.options = options;
                  [].slice.call(this.select.options).forEach(function(option) {
                    var item = _this3.buildItem(option);
                    options.appendChild(item);
                    if (option.selected === true) {
                      _this3.selectItem(item);
                    }
                  });
                  this.container.appendChild(options);
                }
              }, {
                key: "buildPicker",
                value: function buildPicker() {
                  var _this4 = this;
                  [].slice.call(this.select.attributes).forEach(function(item) {
                    _this4.container.setAttribute(item.name, item.value);
                  });
                  this.container.classList.add("ql-picker");
                  this.label = this.buildLabel();
                  this.buildOptions();
                }
              }, {
                key: "escape",
                value: function escape() {
                  var _this5 = this;
                  this.close();
                  setTimeout(function() {
                    return _this5.label.focus();
                  }, 1);
                }
              }, {
                key: "close",
                value: function close() {
                  this.container.classList.remove("ql-expanded");
                  this.label.setAttribute("aria-expanded", "false");
                  this.options.setAttribute("aria-hidden", "true");
                }
              }, {
                key: "selectItem",
                value: function selectItem(item) {
                  var trigger = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
                  var selected = this.container.querySelector(".ql-selected");
                  if (item === selected) return;
                  if (selected != null) {
                    selected.classList.remove("ql-selected");
                  }
                  if (item == null) return;
                  item.classList.add("ql-selected");
                  this.select.selectedIndex = [].indexOf.call(item.parentNode.children, item);
                  if (item.hasAttribute("data-value")) {
                    this.label.setAttribute("data-value", item.getAttribute("data-value"));
                  } else {
                    this.label.removeAttribute("data-value");
                  }
                  if (item.hasAttribute("data-label")) {
                    this.label.setAttribute("data-label", item.getAttribute("data-label"));
                  } else {
                    this.label.removeAttribute("data-label");
                  }
                  if (trigger) {
                    if (typeof Event === "function") {
                      this.select.dispatchEvent(new Event("change"));
                    } else if ((typeof Event === "undefined" ? "undefined" : _typeof(Event)) === "object") {
                      var event = document.createEvent("Event");
                      event.initEvent("change", true, true);
                      this.select.dispatchEvent(event);
                    }
                    this.close();
                  }
                }
              }, {
                key: "update",
                value: function update() {
                  var option = void 0;
                  if (this.select.selectedIndex > -1) {
                    var item = this.container.querySelector(".ql-picker-options").children[this.select.selectedIndex];
                    option = this.select.options[this.select.selectedIndex];
                    this.selectItem(item);
                  } else {
                    this.selectItem(null);
                  }
                  var isActive = option != null && option !== this.select.querySelector("option[selected]");
                  this.label.classList.toggle("ql-active", isActive);
                }
              }]);
              return Picker2;
            }();
            exports2.default = Picker;
          },
          /* 29 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            var _break = __webpack_require__(16);
            var _break2 = _interopRequireDefault(_break);
            var _container = __webpack_require__(25);
            var _container2 = _interopRequireDefault(_container);
            var _cursor = __webpack_require__(24);
            var _cursor2 = _interopRequireDefault(_cursor);
            var _embed = __webpack_require__(35);
            var _embed2 = _interopRequireDefault(_embed);
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            var _scroll = __webpack_require__(22);
            var _scroll2 = _interopRequireDefault(_scroll);
            var _text = __webpack_require__(7);
            var _text2 = _interopRequireDefault(_text);
            var _clipboard = __webpack_require__(55);
            var _clipboard2 = _interopRequireDefault(_clipboard);
            var _history = __webpack_require__(42);
            var _history2 = _interopRequireDefault(_history);
            var _keyboard = __webpack_require__(23);
            var _keyboard2 = _interopRequireDefault(_keyboard);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            _quill2.default.register({
              "blots/block": _block2.default,
              "blots/block/embed": _block.BlockEmbed,
              "blots/break": _break2.default,
              "blots/container": _container2.default,
              "blots/cursor": _cursor2.default,
              "blots/embed": _embed2.default,
              "blots/inline": _inline2.default,
              "blots/scroll": _scroll2.default,
              "blots/text": _text2.default,
              "modules/clipboard": _clipboard2.default,
              "modules/history": _history2.default,
              "modules/keyboard": _keyboard2.default
            });
            _parchment2.default.register(_block2.default, _break2.default, _cursor2.default, _inline2.default, _scroll2.default, _text2.default);
            exports2.default = _quill2.default;
          },
          /* 30 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", { value: true });
            var Registry = __webpack_require__(1);
            var ShadowBlot = (
              /** @class */
              function() {
                function ShadowBlot2(domNode) {
                  this.domNode = domNode;
                  this.domNode[Registry.DATA_KEY] = { blot: this };
                }
                Object.defineProperty(ShadowBlot2.prototype, "statics", {
                  // Hack for accessing inherited static methods
                  get: function() {
                    return this.constructor;
                  },
                  enumerable: true,
                  configurable: true
                });
                ShadowBlot2.create = function(value) {
                  if (this.tagName == null) {
                    throw new Registry.ParchmentError("Blot definition missing tagName");
                  }
                  var node;
                  if (Array.isArray(this.tagName)) {
                    if (typeof value === "string") {
                      value = value.toUpperCase();
                      if (parseInt(value).toString() === value) {
                        value = parseInt(value);
                      }
                    }
                    if (typeof value === "number") {
                      node = document.createElement(this.tagName[value - 1]);
                    } else if (this.tagName.indexOf(value) > -1) {
                      node = document.createElement(value);
                    } else {
                      node = document.createElement(this.tagName[0]);
                    }
                  } else {
                    node = document.createElement(this.tagName);
                  }
                  if (this.className) {
                    node.classList.add(this.className);
                  }
                  return node;
                };
                ShadowBlot2.prototype.attach = function() {
                  if (this.parent != null) {
                    this.scroll = this.parent.scroll;
                  }
                };
                ShadowBlot2.prototype.clone = function() {
                  var domNode = this.domNode.cloneNode(false);
                  return Registry.create(domNode);
                };
                ShadowBlot2.prototype.detach = function() {
                  if (this.parent != null)
                    this.parent.removeChild(this);
                  delete this.domNode[Registry.DATA_KEY];
                };
                ShadowBlot2.prototype.deleteAt = function(index, length) {
                  var blot = this.isolate(index, length);
                  blot.remove();
                };
                ShadowBlot2.prototype.formatAt = function(index, length, name, value) {
                  var blot = this.isolate(index, length);
                  if (Registry.query(name, Registry.Scope.BLOT) != null && value) {
                    blot.wrap(name, value);
                  } else if (Registry.query(name, Registry.Scope.ATTRIBUTE) != null) {
                    var parent = Registry.create(this.statics.scope);
                    blot.wrap(parent);
                    parent.format(name, value);
                  }
                };
                ShadowBlot2.prototype.insertAt = function(index, value, def) {
                  var blot = def == null ? Registry.create("text", value) : Registry.create(value, def);
                  var ref2 = this.split(index);
                  this.parent.insertBefore(blot, ref2);
                };
                ShadowBlot2.prototype.insertInto = function(parentBlot, refBlot) {
                  if (refBlot === void 0) {
                    refBlot = null;
                  }
                  if (this.parent != null) {
                    this.parent.children.remove(this);
                  }
                  var refDomNode = null;
                  parentBlot.children.insertBefore(this, refBlot);
                  if (refBlot != null) {
                    refDomNode = refBlot.domNode;
                  }
                  if (this.domNode.parentNode != parentBlot.domNode || this.domNode.nextSibling != refDomNode) {
                    parentBlot.domNode.insertBefore(this.domNode, refDomNode);
                  }
                  this.parent = parentBlot;
                  this.attach();
                };
                ShadowBlot2.prototype.isolate = function(index, length) {
                  var target = this.split(index);
                  target.split(length);
                  return target;
                };
                ShadowBlot2.prototype.length = function() {
                  return 1;
                };
                ShadowBlot2.prototype.offset = function(root) {
                  if (root === void 0) {
                    root = this.parent;
                  }
                  if (this.parent == null || this == root)
                    return 0;
                  return this.parent.children.offset(this) + this.parent.offset(root);
                };
                ShadowBlot2.prototype.optimize = function(context) {
                  if (this.domNode[Registry.DATA_KEY] != null) {
                    delete this.domNode[Registry.DATA_KEY].mutations;
                  }
                };
                ShadowBlot2.prototype.remove = function() {
                  if (this.domNode.parentNode != null) {
                    this.domNode.parentNode.removeChild(this.domNode);
                  }
                  this.detach();
                };
                ShadowBlot2.prototype.replace = function(target) {
                  if (target.parent == null)
                    return;
                  target.parent.insertBefore(this, target.next);
                  target.remove();
                };
                ShadowBlot2.prototype.replaceWith = function(name, value) {
                  var replacement = typeof name === "string" ? Registry.create(name, value) : name;
                  replacement.replace(this);
                  return replacement;
                };
                ShadowBlot2.prototype.split = function(index, force) {
                  return index === 0 ? this : this.next;
                };
                ShadowBlot2.prototype.update = function(mutations, context) {
                };
                ShadowBlot2.prototype.wrap = function(name, value) {
                  var wrapper = typeof name === "string" ? Registry.create(name, value) : name;
                  if (this.parent != null) {
                    this.parent.insertBefore(wrapper, this.next);
                  }
                  wrapper.appendChild(this);
                  return wrapper;
                };
                ShadowBlot2.blotName = "abstract";
                return ShadowBlot2;
              }()
            );
            exports2.default = ShadowBlot;
          },
          /* 31 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", { value: true });
            var attributor_1 = __webpack_require__(12);
            var class_1 = __webpack_require__(32);
            var style_1 = __webpack_require__(33);
            var Registry = __webpack_require__(1);
            var AttributorStore = (
              /** @class */
              function() {
                function AttributorStore2(domNode) {
                  this.attributes = {};
                  this.domNode = domNode;
                  this.build();
                }
                AttributorStore2.prototype.attribute = function(attribute, value) {
                  if (value) {
                    if (attribute.add(this.domNode, value)) {
                      if (attribute.value(this.domNode) != null) {
                        this.attributes[attribute.attrName] = attribute;
                      } else {
                        delete this.attributes[attribute.attrName];
                      }
                    }
                  } else {
                    attribute.remove(this.domNode);
                    delete this.attributes[attribute.attrName];
                  }
                };
                AttributorStore2.prototype.build = function() {
                  var _this = this;
                  this.attributes = {};
                  var attributes = attributor_1.default.keys(this.domNode);
                  var classes = class_1.default.keys(this.domNode);
                  var styles = style_1.default.keys(this.domNode);
                  attributes.concat(classes).concat(styles).forEach(function(name) {
                    var attr = Registry.query(name, Registry.Scope.ATTRIBUTE);
                    if (attr instanceof attributor_1.default) {
                      _this.attributes[attr.attrName] = attr;
                    }
                  });
                };
                AttributorStore2.prototype.copy = function(target) {
                  var _this = this;
                  Object.keys(this.attributes).forEach(function(key) {
                    var value = _this.attributes[key].value(_this.domNode);
                    target.format(key, value);
                  });
                };
                AttributorStore2.prototype.move = function(target) {
                  var _this = this;
                  this.copy(target);
                  Object.keys(this.attributes).forEach(function(key) {
                    _this.attributes[key].remove(_this.domNode);
                  });
                  this.attributes = {};
                };
                AttributorStore2.prototype.values = function() {
                  var _this = this;
                  return Object.keys(this.attributes).reduce(function(attributes, name) {
                    attributes[name] = _this.attributes[name].value(_this.domNode);
                    return attributes;
                  }, {});
                };
                return AttributorStore2;
              }()
            );
            exports2.default = AttributorStore;
          },
          /* 32 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
                d.__proto__ = b;
              } || function(d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
              return function(d, b) {
                extendStatics(d, b);
                function __() {
                  this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var attributor_1 = __webpack_require__(12);
            function match(node, prefix) {
              var className = node.getAttribute("class") || "";
              return className.split(/\s+/).filter(function(name) {
                return name.indexOf(prefix + "-") === 0;
              });
            }
            var ClassAttributor = (
              /** @class */
              function(_super) {
                __extends(ClassAttributor2, _super);
                function ClassAttributor2() {
                  return _super !== null && _super.apply(this, arguments) || this;
                }
                ClassAttributor2.keys = function(node) {
                  return (node.getAttribute("class") || "").split(/\s+/).map(function(name) {
                    return name.split("-").slice(0, -1).join("-");
                  });
                };
                ClassAttributor2.prototype.add = function(node, value) {
                  if (!this.canAdd(node, value))
                    return false;
                  this.remove(node);
                  node.classList.add(this.keyName + "-" + value);
                  return true;
                };
                ClassAttributor2.prototype.remove = function(node) {
                  var matches = match(node, this.keyName);
                  matches.forEach(function(name) {
                    node.classList.remove(name);
                  });
                  if (node.classList.length === 0) {
                    node.removeAttribute("class");
                  }
                };
                ClassAttributor2.prototype.value = function(node) {
                  var result = match(node, this.keyName)[0] || "";
                  var value = result.slice(this.keyName.length + 1);
                  return this.canAdd(node, value) ? value : "";
                };
                return ClassAttributor2;
              }(attributor_1.default)
            );
            exports2.default = ClassAttributor;
          },
          /* 33 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
                d.__proto__ = b;
              } || function(d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
              return function(d, b) {
                extendStatics(d, b);
                function __() {
                  this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var attributor_1 = __webpack_require__(12);
            function camelize(name) {
              var parts = name.split("-");
              var rest = parts.slice(1).map(function(part) {
                return part[0].toUpperCase() + part.slice(1);
              }).join("");
              return parts[0] + rest;
            }
            var StyleAttributor = (
              /** @class */
              function(_super) {
                __extends(StyleAttributor2, _super);
                function StyleAttributor2() {
                  return _super !== null && _super.apply(this, arguments) || this;
                }
                StyleAttributor2.keys = function(node) {
                  return (node.getAttribute("style") || "").split(";").map(function(value) {
                    var arr = value.split(":");
                    return arr[0].trim();
                  });
                };
                StyleAttributor2.prototype.add = function(node, value) {
                  if (!this.canAdd(node, value))
                    return false;
                  node.style[camelize(this.keyName)] = value;
                  return true;
                };
                StyleAttributor2.prototype.remove = function(node) {
                  node.style[camelize(this.keyName)] = "";
                  if (!node.getAttribute("style")) {
                    node.removeAttribute("style");
                  }
                };
                StyleAttributor2.prototype.value = function(node) {
                  var value = node.style[camelize(this.keyName)];
                  return this.canAdd(node, value) ? value : "";
                };
                return StyleAttributor2;
              }(attributor_1.default)
            );
            exports2.default = StyleAttributor;
          },
          /* 34 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var Theme = function() {
              function Theme2(quill, options) {
                _classCallCheck(this, Theme2);
                this.quill = quill;
                this.options = options;
                this.modules = {};
              }
              _createClass(Theme2, [{
                key: "init",
                value: function init() {
                  var _this = this;
                  Object.keys(this.options.modules).forEach(function(name) {
                    if (_this.modules[name] == null) {
                      _this.addModule(name);
                    }
                  });
                }
              }, {
                key: "addModule",
                value: function addModule(name) {
                  var moduleClass = this.quill.constructor.import("modules/" + name);
                  this.modules[name] = new moduleClass(this.quill, this.options.modules[name] || {});
                  return this.modules[name];
                }
              }]);
              return Theme2;
            }();
            Theme.DEFAULTS = {
              modules: {}
            };
            Theme.themes = {
              "default": Theme
            };
            exports2.default = Theme;
          },
          /* 35 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _text = __webpack_require__(7);
            var _text2 = _interopRequireDefault(_text);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var GUARD_TEXT = "\uFEFF";
            var Embed = function(_Parchment$Embed) {
              _inherits(Embed2, _Parchment$Embed);
              function Embed2(node) {
                _classCallCheck(this, Embed2);
                var _this = _possibleConstructorReturn(this, (Embed2.__proto__ || Object.getPrototypeOf(Embed2)).call(this, node));
                _this.contentNode = document.createElement("span");
                _this.contentNode.setAttribute("contenteditable", false);
                [].slice.call(_this.domNode.childNodes).forEach(function(childNode) {
                  _this.contentNode.appendChild(childNode);
                });
                _this.leftGuard = document.createTextNode(GUARD_TEXT);
                _this.rightGuard = document.createTextNode(GUARD_TEXT);
                _this.domNode.appendChild(_this.leftGuard);
                _this.domNode.appendChild(_this.contentNode);
                _this.domNode.appendChild(_this.rightGuard);
                return _this;
              }
              _createClass(Embed2, [{
                key: "index",
                value: function index(node, offset) {
                  if (node === this.leftGuard) return 0;
                  if (node === this.rightGuard) return 1;
                  return _get(Embed2.prototype.__proto__ || Object.getPrototypeOf(Embed2.prototype), "index", this).call(this, node, offset);
                }
              }, {
                key: "restore",
                value: function restore(node) {
                  var range = void 0, textNode = void 0;
                  var text = node.data.split(GUARD_TEXT).join("");
                  if (node === this.leftGuard) {
                    if (this.prev instanceof _text2.default) {
                      var prevLength = this.prev.length();
                      this.prev.insertAt(prevLength, text);
                      range = {
                        startNode: this.prev.domNode,
                        startOffset: prevLength + text.length
                      };
                    } else {
                      textNode = document.createTextNode(text);
                      this.parent.insertBefore(_parchment2.default.create(textNode), this);
                      range = {
                        startNode: textNode,
                        startOffset: text.length
                      };
                    }
                  } else if (node === this.rightGuard) {
                    if (this.next instanceof _text2.default) {
                      this.next.insertAt(0, text);
                      range = {
                        startNode: this.next.domNode,
                        startOffset: text.length
                      };
                    } else {
                      textNode = document.createTextNode(text);
                      this.parent.insertBefore(_parchment2.default.create(textNode), this.next);
                      range = {
                        startNode: textNode,
                        startOffset: text.length
                      };
                    }
                  }
                  node.data = GUARD_TEXT;
                  return range;
                }
              }, {
                key: "update",
                value: function update(mutations, context) {
                  var _this2 = this;
                  mutations.forEach(function(mutation) {
                    if (mutation.type === "characterData" && (mutation.target === _this2.leftGuard || mutation.target === _this2.rightGuard)) {
                      var range = _this2.restore(mutation.target);
                      if (range) context.range = range;
                    }
                  });
                }
              }]);
              return Embed2;
            }(_parchment2.default.Embed);
            exports2.default = Embed;
          },
          /* 36 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.AlignStyle = exports2.AlignClass = exports2.AlignAttribute = void 0;
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            var config = {
              scope: _parchment2.default.Scope.BLOCK,
              whitelist: ["right", "center", "justify"]
            };
            var AlignAttribute = new _parchment2.default.Attributor.Attribute("align", "align", config);
            var AlignClass = new _parchment2.default.Attributor.Class("align", "ql-align", config);
            var AlignStyle = new _parchment2.default.Attributor.Style("align", "text-align", config);
            exports2.AlignAttribute = AlignAttribute;
            exports2.AlignClass = AlignClass;
            exports2.AlignStyle = AlignStyle;
          },
          /* 37 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.BackgroundStyle = exports2.BackgroundClass = void 0;
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _color = __webpack_require__(26);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            var BackgroundClass = new _parchment2.default.Attributor.Class("background", "ql-bg", {
              scope: _parchment2.default.Scope.INLINE
            });
            var BackgroundStyle = new _color.ColorAttributor("background", "background-color", {
              scope: _parchment2.default.Scope.INLINE
            });
            exports2.BackgroundClass = BackgroundClass;
            exports2.BackgroundStyle = BackgroundStyle;
          },
          /* 38 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.DirectionStyle = exports2.DirectionClass = exports2.DirectionAttribute = void 0;
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            var config = {
              scope: _parchment2.default.Scope.BLOCK,
              whitelist: ["rtl"]
            };
            var DirectionAttribute = new _parchment2.default.Attributor.Attribute("direction", "dir", config);
            var DirectionClass = new _parchment2.default.Attributor.Class("direction", "ql-direction", config);
            var DirectionStyle = new _parchment2.default.Attributor.Style("direction", "direction", config);
            exports2.DirectionAttribute = DirectionAttribute;
            exports2.DirectionClass = DirectionClass;
            exports2.DirectionStyle = DirectionStyle;
          },
          /* 39 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.FontClass = exports2.FontStyle = void 0;
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var config = {
              scope: _parchment2.default.Scope.INLINE,
              whitelist: ["serif", "monospace"]
            };
            var FontClass = new _parchment2.default.Attributor.Class("font", "ql-font", config);
            var FontStyleAttributor = function(_Parchment$Attributor) {
              _inherits(FontStyleAttributor2, _Parchment$Attributor);
              function FontStyleAttributor2() {
                _classCallCheck(this, FontStyleAttributor2);
                return _possibleConstructorReturn(this, (FontStyleAttributor2.__proto__ || Object.getPrototypeOf(FontStyleAttributor2)).apply(this, arguments));
              }
              _createClass(FontStyleAttributor2, [{
                key: "value",
                value: function value(node) {
                  return _get(FontStyleAttributor2.prototype.__proto__ || Object.getPrototypeOf(FontStyleAttributor2.prototype), "value", this).call(this, node).replace(/["']/g, "");
                }
              }]);
              return FontStyleAttributor2;
            }(_parchment2.default.Attributor.Style);
            var FontStyle = new FontStyleAttributor("font", "font-family", config);
            exports2.FontStyle = FontStyle;
            exports2.FontClass = FontClass;
          },
          /* 40 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.SizeStyle = exports2.SizeClass = void 0;
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            var SizeClass = new _parchment2.default.Attributor.Class("size", "ql-size", {
              scope: _parchment2.default.Scope.INLINE,
              whitelist: ["small", "large", "huge"]
            });
            var SizeStyle = new _parchment2.default.Attributor.Style("size", "font-size", {
              scope: _parchment2.default.Scope.INLINE,
              whitelist: ["10px", "18px", "32px"]
            });
            exports2.SizeClass = SizeClass;
            exports2.SizeStyle = SizeStyle;
          },
          /* 41 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            module2.exports = {
              "align": {
                "": __webpack_require__(76),
                "center": __webpack_require__(77),
                "right": __webpack_require__(78),
                "justify": __webpack_require__(79)
              },
              "background": __webpack_require__(80),
              "blockquote": __webpack_require__(81),
              "bold": __webpack_require__(82),
              "clean": __webpack_require__(83),
              "code": __webpack_require__(58),
              "code-block": __webpack_require__(58),
              "color": __webpack_require__(84),
              "direction": {
                "": __webpack_require__(85),
                "rtl": __webpack_require__(86)
              },
              "float": {
                "center": __webpack_require__(87),
                "full": __webpack_require__(88),
                "left": __webpack_require__(89),
                "right": __webpack_require__(90)
              },
              "formula": __webpack_require__(91),
              "header": {
                "1": __webpack_require__(92),
                "2": __webpack_require__(93)
              },
              "italic": __webpack_require__(94),
              "image": __webpack_require__(95),
              "indent": {
                "+1": __webpack_require__(96),
                "-1": __webpack_require__(97)
              },
              "link": __webpack_require__(98),
              "list": {
                "ordered": __webpack_require__(99),
                "bullet": __webpack_require__(100),
                "check": __webpack_require__(101)
              },
              "script": {
                "sub": __webpack_require__(102),
                "super": __webpack_require__(103)
              },
              "strike": __webpack_require__(104),
              "underline": __webpack_require__(105),
              "video": __webpack_require__(106)
            };
          },
          /* 42 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.getLastChangeIndex = exports2.default = void 0;
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var History = function(_Module) {
              _inherits(History2, _Module);
              function History2(quill, options) {
                _classCallCheck(this, History2);
                var _this = _possibleConstructorReturn(this, (History2.__proto__ || Object.getPrototypeOf(History2)).call(this, quill, options));
                _this.lastRecorded = 0;
                _this.ignoreChange = false;
                _this.clear();
                _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function(eventName, delta, oldDelta, source) {
                  if (eventName !== _quill2.default.events.TEXT_CHANGE || _this.ignoreChange) return;
                  if (!_this.options.userOnly || source === _quill2.default.sources.USER) {
                    _this.record(delta, oldDelta);
                  } else {
                    _this.transform(delta);
                  }
                });
                _this.quill.keyboard.addBinding({ key: "Z", shortKey: true }, _this.undo.bind(_this));
                _this.quill.keyboard.addBinding({ key: "Z", shortKey: true, shiftKey: true }, _this.redo.bind(_this));
                if (/Win/i.test(navigator.platform)) {
                  _this.quill.keyboard.addBinding({ key: "Y", shortKey: true }, _this.redo.bind(_this));
                }
                return _this;
              }
              _createClass(History2, [{
                key: "change",
                value: function change(source, dest) {
                  if (this.stack[source].length === 0) return;
                  var delta = this.stack[source].pop();
                  this.stack[dest].push(delta);
                  this.lastRecorded = 0;
                  this.ignoreChange = true;
                  this.quill.updateContents(delta[source], _quill2.default.sources.USER);
                  this.ignoreChange = false;
                  var index = getLastChangeIndex(delta[source]);
                  this.quill.setSelection(index);
                }
              }, {
                key: "clear",
                value: function clear() {
                  this.stack = { undo: [], redo: [] };
                }
              }, {
                key: "cutoff",
                value: function cutoff() {
                  this.lastRecorded = 0;
                }
              }, {
                key: "record",
                value: function record(changeDelta, oldDelta) {
                  if (changeDelta.ops.length === 0) return;
                  this.stack.redo = [];
                  var undoDelta = this.quill.getContents().diff(oldDelta);
                  var timestamp = Date.now();
                  if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {
                    var delta = this.stack.undo.pop();
                    undoDelta = undoDelta.compose(delta.undo);
                    changeDelta = delta.redo.compose(changeDelta);
                  } else {
                    this.lastRecorded = timestamp;
                  }
                  this.stack.undo.push({
                    redo: changeDelta,
                    undo: undoDelta
                  });
                  if (this.stack.undo.length > this.options.maxStack) {
                    this.stack.undo.shift();
                  }
                }
              }, {
                key: "redo",
                value: function redo() {
                  this.change("redo", "undo");
                }
              }, {
                key: "transform",
                value: function transform(delta) {
                  this.stack.undo.forEach(function(change) {
                    change.undo = delta.transform(change.undo, true);
                    change.redo = delta.transform(change.redo, true);
                  });
                  this.stack.redo.forEach(function(change) {
                    change.undo = delta.transform(change.undo, true);
                    change.redo = delta.transform(change.redo, true);
                  });
                }
              }, {
                key: "undo",
                value: function undo() {
                  this.change("undo", "redo");
                }
              }]);
              return History2;
            }(_module2.default);
            History.DEFAULTS = {
              delay: 1e3,
              maxStack: 100,
              userOnly: false
            };
            function endsWithNewlineChange(delta) {
              var lastOp = delta.ops[delta.ops.length - 1];
              if (lastOp == null) return false;
              if (lastOp.insert != null) {
                return typeof lastOp.insert === "string" && lastOp.insert.endsWith("\n");
              }
              if (lastOp.attributes != null) {
                return Object.keys(lastOp.attributes).some(function(attr) {
                  return _parchment2.default.query(attr, _parchment2.default.Scope.BLOCK) != null;
                });
              }
              return false;
            }
            function getLastChangeIndex(delta) {
              var deleteLength = delta.reduce(function(length, op) {
                length += op.delete || 0;
                return length;
              }, 0);
              var changeIndex = delta.length() - deleteLength;
              if (endsWithNewlineChange(delta)) {
                changeIndex -= 1;
              }
              return changeIndex;
            }
            exports2.default = History;
            exports2.getLastChangeIndex = getLastChangeIndex;
          },
          /* 43 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = exports2.BaseTooltip = void 0;
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _emitter = __webpack_require__(8);
            var _emitter2 = _interopRequireDefault(_emitter);
            var _keyboard = __webpack_require__(23);
            var _keyboard2 = _interopRequireDefault(_keyboard);
            var _theme = __webpack_require__(34);
            var _theme2 = _interopRequireDefault(_theme);
            var _colorPicker = __webpack_require__(59);
            var _colorPicker2 = _interopRequireDefault(_colorPicker);
            var _iconPicker = __webpack_require__(60);
            var _iconPicker2 = _interopRequireDefault(_iconPicker);
            var _picker = __webpack_require__(28);
            var _picker2 = _interopRequireDefault(_picker);
            var _tooltip = __webpack_require__(61);
            var _tooltip2 = _interopRequireDefault(_tooltip);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var ALIGNS = [false, "center", "right", "justify"];
            var COLORS = ["#000000", "#e60000", "#ff9900", "#ffff00", "#008a00", "#0066cc", "#9933ff", "#ffffff", "#facccc", "#ffebcc", "#ffffcc", "#cce8cc", "#cce0f5", "#ebd6ff", "#bbbbbb", "#f06666", "#ffc266", "#ffff66", "#66b966", "#66a3e0", "#c285ff", "#888888", "#a10000", "#b26b00", "#b2b200", "#006100", "#0047b2", "#6b24b2", "#444444", "#5c0000", "#663d00", "#666600", "#003700", "#002966", "#3d1466"];
            var FONTS = [false, "serif", "monospace"];
            var HEADERS = ["1", "2", "3", false];
            var SIZES = ["small", false, "large", "huge"];
            var BaseTheme = function(_Theme) {
              _inherits(BaseTheme2, _Theme);
              function BaseTheme2(quill, options) {
                _classCallCheck(this, BaseTheme2);
                var _this = _possibleConstructorReturn(this, (BaseTheme2.__proto__ || Object.getPrototypeOf(BaseTheme2)).call(this, quill, options));
                var listener = function listener2(e) {
                  if (!document.body.contains(quill.root)) {
                    return document.body.removeEventListener("click", listener2);
                  }
                  if (_this.tooltip != null && !_this.tooltip.root.contains(e.target) && document.activeElement !== _this.tooltip.textbox && !_this.quill.hasFocus()) {
                    _this.tooltip.hide();
                  }
                  if (_this.pickers != null) {
                    _this.pickers.forEach(function(picker) {
                      if (!picker.container.contains(e.target)) {
                        picker.close();
                      }
                    });
                  }
                };
                quill.emitter.listenDOM("click", document.body, listener);
                return _this;
              }
              _createClass(BaseTheme2, [{
                key: "addModule",
                value: function addModule(name) {
                  var module3 = _get(BaseTheme2.prototype.__proto__ || Object.getPrototypeOf(BaseTheme2.prototype), "addModule", this).call(this, name);
                  if (name === "toolbar") {
                    this.extendToolbar(module3);
                  }
                  return module3;
                }
              }, {
                key: "buildButtons",
                value: function buildButtons(buttons, icons) {
                  buttons.forEach(function(button) {
                    var className = button.getAttribute("class") || "";
                    className.split(/\s+/).forEach(function(name) {
                      if (!name.startsWith("ql-")) return;
                      name = name.slice("ql-".length);
                      if (icons[name] == null) return;
                      if (name === "direction") {
                        button.innerHTML = icons[name][""] + icons[name]["rtl"];
                      } else if (typeof icons[name] === "string") {
                        button.innerHTML = icons[name];
                      } else {
                        var value = button.value || "";
                        if (value != null && icons[name][value]) {
                          button.innerHTML = icons[name][value];
                        }
                      }
                    });
                  });
                }
              }, {
                key: "buildPickers",
                value: function buildPickers(selects, icons) {
                  var _this2 = this;
                  this.pickers = selects.map(function(select) {
                    if (select.classList.contains("ql-align")) {
                      if (select.querySelector("option") == null) {
                        fillSelect(select, ALIGNS);
                      }
                      return new _iconPicker2.default(select, icons.align);
                    } else if (select.classList.contains("ql-background") || select.classList.contains("ql-color")) {
                      var format = select.classList.contains("ql-background") ? "background" : "color";
                      if (select.querySelector("option") == null) {
                        fillSelect(select, COLORS, format === "background" ? "#ffffff" : "#000000");
                      }
                      return new _colorPicker2.default(select, icons[format]);
                    } else {
                      if (select.querySelector("option") == null) {
                        if (select.classList.contains("ql-font")) {
                          fillSelect(select, FONTS);
                        } else if (select.classList.contains("ql-header")) {
                          fillSelect(select, HEADERS);
                        } else if (select.classList.contains("ql-size")) {
                          fillSelect(select, SIZES);
                        }
                      }
                      return new _picker2.default(select);
                    }
                  });
                  var update = function update2() {
                    _this2.pickers.forEach(function(picker) {
                      picker.update();
                    });
                  };
                  this.quill.on(_emitter2.default.events.EDITOR_CHANGE, update);
                }
              }]);
              return BaseTheme2;
            }(_theme2.default);
            BaseTheme.DEFAULTS = (0, _extend2.default)(true, {}, _theme2.default.DEFAULTS, {
              modules: {
                toolbar: {
                  handlers: {
                    formula: function formula() {
                      this.quill.theme.tooltip.edit("formula");
                    },
                    image: function image() {
                      var _this3 = this;
                      var fileInput = this.container.querySelector("input.ql-image[type=file]");
                      if (fileInput == null) {
                        fileInput = document.createElement("input");
                        fileInput.setAttribute("type", "file");
                        fileInput.setAttribute("accept", "image/png, image/gif, image/jpeg, image/bmp, image/x-icon");
                        fileInput.classList.add("ql-image");
                        fileInput.addEventListener("change", function() {
                          if (fileInput.files != null && fileInput.files[0] != null) {
                            var reader = new FileReader();
                            reader.onload = function(e) {
                              var range = _this3.quill.getSelection(true);
                              _this3.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert({ image: e.target.result }), _emitter2.default.sources.USER);
                              _this3.quill.setSelection(range.index + 1, _emitter2.default.sources.SILENT);
                              fileInput.value = "";
                            };
                            reader.readAsDataURL(fileInput.files[0]);
                          }
                        });
                        this.container.appendChild(fileInput);
                      }
                      fileInput.click();
                    },
                    video: function video() {
                      this.quill.theme.tooltip.edit("video");
                    }
                  }
                }
              }
            });
            var BaseTooltip = function(_Tooltip) {
              _inherits(BaseTooltip2, _Tooltip);
              function BaseTooltip2(quill, boundsContainer) {
                _classCallCheck(this, BaseTooltip2);
                var _this4 = _possibleConstructorReturn(this, (BaseTooltip2.__proto__ || Object.getPrototypeOf(BaseTooltip2)).call(this, quill, boundsContainer));
                _this4.textbox = _this4.root.querySelector('input[type="text"]');
                _this4.listen();
                return _this4;
              }
              _createClass(BaseTooltip2, [{
                key: "listen",
                value: function listen() {
                  var _this5 = this;
                  this.textbox.addEventListener("keydown", function(event) {
                    if (_keyboard2.default.match(event, "enter")) {
                      _this5.save();
                      event.preventDefault();
                    } else if (_keyboard2.default.match(event, "escape")) {
                      _this5.cancel();
                      event.preventDefault();
                    }
                  });
                }
              }, {
                key: "cancel",
                value: function cancel() {
                  this.hide();
                }
              }, {
                key: "edit",
                value: function edit() {
                  var mode = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "link";
                  var preview = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;
                  this.root.classList.remove("ql-hidden");
                  this.root.classList.add("ql-editing");
                  if (preview != null) {
                    this.textbox.value = preview;
                  } else if (mode !== this.root.getAttribute("data-mode")) {
                    this.textbox.value = "";
                  }
                  this.position(this.quill.getBounds(this.quill.selection.savedRange));
                  this.textbox.select();
                  this.textbox.setAttribute("placeholder", this.textbox.getAttribute("data-" + mode) || "");
                  this.root.setAttribute("data-mode", mode);
                }
              }, {
                key: "restoreFocus",
                value: function restoreFocus() {
                  var scrollTop = this.quill.scrollingContainer.scrollTop;
                  this.quill.focus();
                  this.quill.scrollingContainer.scrollTop = scrollTop;
                }
              }, {
                key: "save",
                value: function save() {
                  var value = this.textbox.value;
                  switch (this.root.getAttribute("data-mode")) {
                    case "link": {
                      var scrollTop = this.quill.root.scrollTop;
                      if (this.linkRange) {
                        this.quill.formatText(this.linkRange, "link", value, _emitter2.default.sources.USER);
                        delete this.linkRange;
                      } else {
                        this.restoreFocus();
                        this.quill.format("link", value, _emitter2.default.sources.USER);
                      }
                      this.quill.root.scrollTop = scrollTop;
                      break;
                    }
                    case "video": {
                      value = extractVideoUrl(value);
                    }
                    // eslint-disable-next-line no-fallthrough
                    case "formula": {
                      if (!value) break;
                      var range = this.quill.getSelection(true);
                      if (range != null) {
                        var index = range.index + range.length;
                        this.quill.insertEmbed(index, this.root.getAttribute("data-mode"), value, _emitter2.default.sources.USER);
                        if (this.root.getAttribute("data-mode") === "formula") {
                          this.quill.insertText(index + 1, " ", _emitter2.default.sources.USER);
                        }
                        this.quill.setSelection(index + 2, _emitter2.default.sources.USER);
                      }
                      break;
                    }
                    default:
                  }
                  this.textbox.value = "";
                  this.hide();
                }
              }]);
              return BaseTooltip2;
            }(_tooltip2.default);
            function extractVideoUrl(url) {
              var match = url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);
              if (match) {
                return (match[1] || "https") + "://www.youtube.com/embed/" + match[2] + "?showinfo=0";
              }
              if (match = url.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/)) {
                return (match[1] || "https") + "://player.vimeo.com/video/" + match[2] + "/";
              }
              return url;
            }
            function fillSelect(select, values) {
              var defaultValue = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
              values.forEach(function(value) {
                var option = document.createElement("option");
                if (value === defaultValue) {
                  option.setAttribute("selected", "selected");
                } else {
                  option.setAttribute("value", value);
                }
                select.appendChild(option);
              });
            }
            exports2.BaseTooltip = BaseTooltip;
            exports2.default = BaseTheme;
          },
          /* 44 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", { value: true });
            var LinkedList = (
              /** @class */
              function() {
                function LinkedList2() {
                  this.head = this.tail = null;
                  this.length = 0;
                }
                LinkedList2.prototype.append = function() {
                  var nodes = [];
                  for (var _i = 0; _i < arguments.length; _i++) {
                    nodes[_i] = arguments[_i];
                  }
                  this.insertBefore(nodes[0], null);
                  if (nodes.length > 1) {
                    this.append.apply(this, nodes.slice(1));
                  }
                };
                LinkedList2.prototype.contains = function(node) {
                  var cur, next = this.iterator();
                  while (cur = next()) {
                    if (cur === node)
                      return true;
                  }
                  return false;
                };
                LinkedList2.prototype.insertBefore = function(node, refNode) {
                  if (!node)
                    return;
                  node.next = refNode;
                  if (refNode != null) {
                    node.prev = refNode.prev;
                    if (refNode.prev != null) {
                      refNode.prev.next = node;
                    }
                    refNode.prev = node;
                    if (refNode === this.head) {
                      this.head = node;
                    }
                  } else if (this.tail != null) {
                    this.tail.next = node;
                    node.prev = this.tail;
                    this.tail = node;
                  } else {
                    node.prev = null;
                    this.head = this.tail = node;
                  }
                  this.length += 1;
                };
                LinkedList2.prototype.offset = function(target) {
                  var index = 0, cur = this.head;
                  while (cur != null) {
                    if (cur === target)
                      return index;
                    index += cur.length();
                    cur = cur.next;
                  }
                  return -1;
                };
                LinkedList2.prototype.remove = function(node) {
                  if (!this.contains(node))
                    return;
                  if (node.prev != null)
                    node.prev.next = node.next;
                  if (node.next != null)
                    node.next.prev = node.prev;
                  if (node === this.head)
                    this.head = node.next;
                  if (node === this.tail)
                    this.tail = node.prev;
                  this.length -= 1;
                };
                LinkedList2.prototype.iterator = function(curNode) {
                  if (curNode === void 0) {
                    curNode = this.head;
                  }
                  return function() {
                    var ret = curNode;
                    if (curNode != null)
                      curNode = curNode.next;
                    return ret;
                  };
                };
                LinkedList2.prototype.find = function(index, inclusive) {
                  if (inclusive === void 0) {
                    inclusive = false;
                  }
                  var cur, next = this.iterator();
                  while (cur = next()) {
                    var length = cur.length();
                    if (index < length || inclusive && index === length && (cur.next == null || cur.next.length() !== 0)) {
                      return [cur, index];
                    }
                    index -= length;
                  }
                  return [null, 0];
                };
                LinkedList2.prototype.forEach = function(callback) {
                  var cur, next = this.iterator();
                  while (cur = next()) {
                    callback(cur);
                  }
                };
                LinkedList2.prototype.forEachAt = function(index, length, callback) {
                  if (length <= 0)
                    return;
                  var _a = this.find(index), startNode = _a[0], offset = _a[1];
                  var cur, curIndex = index - offset, next = this.iterator(startNode);
                  while ((cur = next()) && curIndex < index + length) {
                    var curLength = cur.length();
                    if (index > curIndex) {
                      callback(cur, index - curIndex, Math.min(length, curIndex + curLength - index));
                    } else {
                      callback(cur, 0, Math.min(curLength, index + length - curIndex));
                    }
                    curIndex += curLength;
                  }
                };
                LinkedList2.prototype.map = function(callback) {
                  return this.reduce(function(memo, cur) {
                    memo.push(callback(cur));
                    return memo;
                  }, []);
                };
                LinkedList2.prototype.reduce = function(callback, memo) {
                  var cur, next = this.iterator();
                  while (cur = next()) {
                    memo = callback(memo, cur);
                  }
                  return memo;
                };
                return LinkedList2;
              }()
            );
            exports2.default = LinkedList;
          },
          /* 45 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
                d.__proto__ = b;
              } || function(d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
              return function(d, b) {
                extendStatics(d, b);
                function __() {
                  this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var container_1 = __webpack_require__(17);
            var Registry = __webpack_require__(1);
            var OBSERVER_CONFIG = {
              attributes: true,
              characterData: true,
              characterDataOldValue: true,
              childList: true,
              subtree: true
            };
            var MAX_OPTIMIZE_ITERATIONS = 100;
            var ScrollBlot = (
              /** @class */
              function(_super) {
                __extends(ScrollBlot2, _super);
                function ScrollBlot2(node) {
                  var _this = _super.call(this, node) || this;
                  _this.scroll = _this;
                  _this.observer = new MutationObserver(function(mutations) {
                    _this.update(mutations);
                  });
                  _this.observer.observe(_this.domNode, OBSERVER_CONFIG);
                  _this.attach();
                  return _this;
                }
                ScrollBlot2.prototype.detach = function() {
                  _super.prototype.detach.call(this);
                  this.observer.disconnect();
                };
                ScrollBlot2.prototype.deleteAt = function(index, length) {
                  this.update();
                  if (index === 0 && length === this.length()) {
                    this.children.forEach(function(child) {
                      child.remove();
                    });
                  } else {
                    _super.prototype.deleteAt.call(this, index, length);
                  }
                };
                ScrollBlot2.prototype.formatAt = function(index, length, name, value) {
                  this.update();
                  _super.prototype.formatAt.call(this, index, length, name, value);
                };
                ScrollBlot2.prototype.insertAt = function(index, value, def) {
                  this.update();
                  _super.prototype.insertAt.call(this, index, value, def);
                };
                ScrollBlot2.prototype.optimize = function(mutations, context) {
                  var _this = this;
                  if (mutations === void 0) {
                    mutations = [];
                  }
                  if (context === void 0) {
                    context = {};
                  }
                  _super.prototype.optimize.call(this, context);
                  var records = [].slice.call(this.observer.takeRecords());
                  while (records.length > 0)
                    mutations.push(records.pop());
                  var mark = function(blot, markParent) {
                    if (markParent === void 0) {
                      markParent = true;
                    }
                    if (blot == null || blot === _this)
                      return;
                    if (blot.domNode.parentNode == null)
                      return;
                    if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                      blot.domNode[Registry.DATA_KEY].mutations = [];
                    }
                    if (markParent)
                      mark(blot.parent);
                  };
                  var optimize = function(blot) {
                    if (
                      // @ts-ignore
                      blot.domNode[Registry.DATA_KEY] == null || // @ts-ignore
                      blot.domNode[Registry.DATA_KEY].mutations == null
                    ) {
                      return;
                    }
                    if (blot instanceof container_1.default) {
                      blot.children.forEach(optimize);
                    }
                    blot.optimize(context);
                  };
                  var remaining = mutations;
                  for (var i = 0; remaining.length > 0; i += 1) {
                    if (i >= MAX_OPTIMIZE_ITERATIONS) {
                      throw new Error("[Parchment] Maximum optimize iterations reached");
                    }
                    remaining.forEach(function(mutation) {
                      var blot = Registry.find(mutation.target, true);
                      if (blot == null)
                        return;
                      if (blot.domNode === mutation.target) {
                        if (mutation.type === "childList") {
                          mark(Registry.find(mutation.previousSibling, false));
                          [].forEach.call(mutation.addedNodes, function(node) {
                            var child = Registry.find(node, false);
                            mark(child, false);
                            if (child instanceof container_1.default) {
                              child.children.forEach(function(grandChild) {
                                mark(grandChild, false);
                              });
                            }
                          });
                        } else if (mutation.type === "attributes") {
                          mark(blot.prev);
                        }
                      }
                      mark(blot);
                    });
                    this.children.forEach(optimize);
                    remaining = [].slice.call(this.observer.takeRecords());
                    records = remaining.slice();
                    while (records.length > 0)
                      mutations.push(records.pop());
                  }
                };
                ScrollBlot2.prototype.update = function(mutations, context) {
                  var _this = this;
                  if (context === void 0) {
                    context = {};
                  }
                  mutations = mutations || this.observer.takeRecords();
                  mutations.map(function(mutation) {
                    var blot = Registry.find(mutation.target, true);
                    if (blot == null)
                      return null;
                    if (blot.domNode[Registry.DATA_KEY].mutations == null) {
                      blot.domNode[Registry.DATA_KEY].mutations = [mutation];
                      return blot;
                    } else {
                      blot.domNode[Registry.DATA_KEY].mutations.push(mutation);
                      return null;
                    }
                  }).forEach(function(blot) {
                    if (blot == null || blot === _this || //@ts-ignore
                    blot.domNode[Registry.DATA_KEY] == null)
                      return;
                    blot.update(blot.domNode[Registry.DATA_KEY].mutations || [], context);
                  });
                  if (this.domNode[Registry.DATA_KEY].mutations != null) {
                    _super.prototype.update.call(this, this.domNode[Registry.DATA_KEY].mutations, context);
                  }
                  this.optimize(mutations, context);
                };
                ScrollBlot2.blotName = "scroll";
                ScrollBlot2.defaultChild = "block";
                ScrollBlot2.scope = Registry.Scope.BLOCK_BLOT;
                ScrollBlot2.tagName = "DIV";
                return ScrollBlot2;
              }(container_1.default)
            );
            exports2.default = ScrollBlot;
          },
          /* 46 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
                d.__proto__ = b;
              } || function(d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
              return function(d, b) {
                extendStatics(d, b);
                function __() {
                  this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var format_1 = __webpack_require__(18);
            var Registry = __webpack_require__(1);
            function isEqual(obj1, obj2) {
              if (Object.keys(obj1).length !== Object.keys(obj2).length)
                return false;
              for (var prop in obj1) {
                if (obj1[prop] !== obj2[prop])
                  return false;
              }
              return true;
            }
            var InlineBlot = (
              /** @class */
              function(_super) {
                __extends(InlineBlot2, _super);
                function InlineBlot2() {
                  return _super !== null && _super.apply(this, arguments) || this;
                }
                InlineBlot2.formats = function(domNode) {
                  if (domNode.tagName === InlineBlot2.tagName)
                    return void 0;
                  return _super.formats.call(this, domNode);
                };
                InlineBlot2.prototype.format = function(name, value) {
                  var _this = this;
                  if (name === this.statics.blotName && !value) {
                    this.children.forEach(function(child) {
                      if (!(child instanceof format_1.default)) {
                        child = child.wrap(InlineBlot2.blotName, true);
                      }
                      _this.attributes.copy(child);
                    });
                    this.unwrap();
                  } else {
                    _super.prototype.format.call(this, name, value);
                  }
                };
                InlineBlot2.prototype.formatAt = function(index, length, name, value) {
                  if (this.formats()[name] != null || Registry.query(name, Registry.Scope.ATTRIBUTE)) {
                    var blot = this.isolate(index, length);
                    blot.format(name, value);
                  } else {
                    _super.prototype.formatAt.call(this, index, length, name, value);
                  }
                };
                InlineBlot2.prototype.optimize = function(context) {
                  _super.prototype.optimize.call(this, context);
                  var formats = this.formats();
                  if (Object.keys(formats).length === 0) {
                    return this.unwrap();
                  }
                  var next = this.next;
                  if (next instanceof InlineBlot2 && next.prev === this && isEqual(formats, next.formats())) {
                    next.moveChildren(this);
                    next.remove();
                  }
                };
                InlineBlot2.blotName = "inline";
                InlineBlot2.scope = Registry.Scope.INLINE_BLOT;
                InlineBlot2.tagName = "SPAN";
                return InlineBlot2;
              }(format_1.default)
            );
            exports2.default = InlineBlot;
          },
          /* 47 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
                d.__proto__ = b;
              } || function(d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
              return function(d, b) {
                extendStatics(d, b);
                function __() {
                  this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var format_1 = __webpack_require__(18);
            var Registry = __webpack_require__(1);
            var BlockBlot = (
              /** @class */
              function(_super) {
                __extends(BlockBlot2, _super);
                function BlockBlot2() {
                  return _super !== null && _super.apply(this, arguments) || this;
                }
                BlockBlot2.formats = function(domNode) {
                  var tagName = Registry.query(BlockBlot2.blotName).tagName;
                  if (domNode.tagName === tagName)
                    return void 0;
                  return _super.formats.call(this, domNode);
                };
                BlockBlot2.prototype.format = function(name, value) {
                  if (Registry.query(name, Registry.Scope.BLOCK) == null) {
                    return;
                  } else if (name === this.statics.blotName && !value) {
                    this.replaceWith(BlockBlot2.blotName);
                  } else {
                    _super.prototype.format.call(this, name, value);
                  }
                };
                BlockBlot2.prototype.formatAt = function(index, length, name, value) {
                  if (Registry.query(name, Registry.Scope.BLOCK) != null) {
                    this.format(name, value);
                  } else {
                    _super.prototype.formatAt.call(this, index, length, name, value);
                  }
                };
                BlockBlot2.prototype.insertAt = function(index, value, def) {
                  if (def == null || Registry.query(value, Registry.Scope.INLINE) != null) {
                    _super.prototype.insertAt.call(this, index, value, def);
                  } else {
                    var after = this.split(index);
                    var blot = Registry.create(value, def);
                    after.parent.insertBefore(blot, after);
                  }
                };
                BlockBlot2.prototype.update = function(mutations, context) {
                  if (navigator.userAgent.match(/Trident/)) {
                    this.build();
                  } else {
                    _super.prototype.update.call(this, mutations, context);
                  }
                };
                BlockBlot2.blotName = "block";
                BlockBlot2.scope = Registry.Scope.BLOCK_BLOT;
                BlockBlot2.tagName = "P";
                return BlockBlot2;
              }(format_1.default)
            );
            exports2.default = BlockBlot;
          },
          /* 48 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
                d.__proto__ = b;
              } || function(d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
              return function(d, b) {
                extendStatics(d, b);
                function __() {
                  this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var leaf_1 = __webpack_require__(19);
            var EmbedBlot = (
              /** @class */
              function(_super) {
                __extends(EmbedBlot2, _super);
                function EmbedBlot2() {
                  return _super !== null && _super.apply(this, arguments) || this;
                }
                EmbedBlot2.formats = function(domNode) {
                  return void 0;
                };
                EmbedBlot2.prototype.format = function(name, value) {
                  _super.prototype.formatAt.call(this, 0, this.length(), name, value);
                };
                EmbedBlot2.prototype.formatAt = function(index, length, name, value) {
                  if (index === 0 && length === this.length()) {
                    this.format(name, value);
                  } else {
                    _super.prototype.formatAt.call(this, index, length, name, value);
                  }
                };
                EmbedBlot2.prototype.formats = function() {
                  return this.statics.formats(this.domNode);
                };
                return EmbedBlot2;
              }(leaf_1.default)
            );
            exports2.default = EmbedBlot;
          },
          /* 49 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var __extends = this && this.__extends || function() {
              var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
                d.__proto__ = b;
              } || function(d, b) {
                for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
              };
              return function(d, b) {
                extendStatics(d, b);
                function __() {
                  this.constructor = d;
                }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
              };
            }();
            Object.defineProperty(exports2, "__esModule", { value: true });
            var leaf_1 = __webpack_require__(19);
            var Registry = __webpack_require__(1);
            var TextBlot = (
              /** @class */
              function(_super) {
                __extends(TextBlot2, _super);
                function TextBlot2(node) {
                  var _this = _super.call(this, node) || this;
                  _this.text = _this.statics.value(_this.domNode);
                  return _this;
                }
                TextBlot2.create = function(value) {
                  return document.createTextNode(value);
                };
                TextBlot2.value = function(domNode) {
                  var text = domNode.data;
                  if (text["normalize"])
                    text = text["normalize"]();
                  return text;
                };
                TextBlot2.prototype.deleteAt = function(index, length) {
                  this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);
                };
                TextBlot2.prototype.index = function(node, offset) {
                  if (this.domNode === node) {
                    return offset;
                  }
                  return -1;
                };
                TextBlot2.prototype.insertAt = function(index, value, def) {
                  if (def == null) {
                    this.text = this.text.slice(0, index) + value + this.text.slice(index);
                    this.domNode.data = this.text;
                  } else {
                    _super.prototype.insertAt.call(this, index, value, def);
                  }
                };
                TextBlot2.prototype.length = function() {
                  return this.text.length;
                };
                TextBlot2.prototype.optimize = function(context) {
                  _super.prototype.optimize.call(this, context);
                  this.text = this.statics.value(this.domNode);
                  if (this.text.length === 0) {
                    this.remove();
                  } else if (this.next instanceof TextBlot2 && this.next.prev === this) {
                    this.insertAt(this.length(), this.next.value());
                    this.next.remove();
                  }
                };
                TextBlot2.prototype.position = function(index, inclusive) {
                  if (inclusive === void 0) {
                    inclusive = false;
                  }
                  return [this.domNode, index];
                };
                TextBlot2.prototype.split = function(index, force) {
                  if (force === void 0) {
                    force = false;
                  }
                  if (!force) {
                    if (index === 0)
                      return this;
                    if (index === this.length())
                      return this.next;
                  }
                  var after = Registry.create(this.domNode.splitText(index));
                  this.parent.insertBefore(after, this.next);
                  this.text = this.statics.value(this.domNode);
                  return after;
                };
                TextBlot2.prototype.update = function(mutations, context) {
                  var _this = this;
                  if (mutations.some(function(mutation) {
                    return mutation.type === "characterData" && mutation.target === _this.domNode;
                  })) {
                    this.text = this.statics.value(this.domNode);
                  }
                };
                TextBlot2.prototype.value = function() {
                  return this.text;
                };
                TextBlot2.blotName = "text";
                TextBlot2.scope = Registry.Scope.INLINE_BLOT;
                return TextBlot2;
              }(leaf_1.default)
            );
            exports2.default = TextBlot;
          },
          /* 50 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            var elem = document.createElement("div");
            elem.classList.toggle("test-class", false);
            if (elem.classList.contains("test-class")) {
              var _toggle = DOMTokenList.prototype.toggle;
              DOMTokenList.prototype.toggle = function(token, force) {
                if (arguments.length > 1 && !this.contains(token) === !force) {
                  return force;
                } else {
                  return _toggle.call(this, token);
                }
              };
            }
            if (!String.prototype.startsWith) {
              String.prototype.startsWith = function(searchString, position) {
                position = position || 0;
                return this.substr(position, searchString.length) === searchString;
              };
            }
            if (!String.prototype.endsWith) {
              String.prototype.endsWith = function(searchString, position) {
                var subjectString = this.toString();
                if (typeof position !== "number" || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
                  position = subjectString.length;
                }
                position -= searchString.length;
                var lastIndex = subjectString.indexOf(searchString, position);
                return lastIndex !== -1 && lastIndex === position;
              };
            }
            if (!Array.prototype.find) {
              Object.defineProperty(Array.prototype, "find", {
                value: function value(predicate) {
                  if (this === null) {
                    throw new TypeError("Array.prototype.find called on null or undefined");
                  }
                  if (typeof predicate !== "function") {
                    throw new TypeError("predicate must be a function");
                  }
                  var list = Object(this);
                  var length = list.length >>> 0;
                  var thisArg = arguments[1];
                  var value2;
                  for (var i = 0; i < length; i++) {
                    value2 = list[i];
                    if (predicate.call(thisArg, value2, i, list)) {
                      return value2;
                    }
                  }
                  return void 0;
                }
              });
            }
            document.addEventListener("DOMContentLoaded", function() {
              document.execCommand("enableObjectResizing", false, false);
              document.execCommand("autoUrlDetect", false, false);
            });
          },
          /* 51 */
          /***/
          function(module2, exports2) {
            var DIFF_DELETE = -1;
            var DIFF_INSERT = 1;
            var DIFF_EQUAL = 0;
            function diff_main(text1, text2, cursor_pos) {
              if (text1 == text2) {
                if (text1) {
                  return [[DIFF_EQUAL, text1]];
                }
                return [];
              }
              if (cursor_pos < 0 || text1.length < cursor_pos) {
                cursor_pos = null;
              }
              var commonlength = diff_commonPrefix(text1, text2);
              var commonprefix = text1.substring(0, commonlength);
              text1 = text1.substring(commonlength);
              text2 = text2.substring(commonlength);
              commonlength = diff_commonSuffix(text1, text2);
              var commonsuffix = text1.substring(text1.length - commonlength);
              text1 = text1.substring(0, text1.length - commonlength);
              text2 = text2.substring(0, text2.length - commonlength);
              var diffs = diff_compute_(text1, text2);
              if (commonprefix) {
                diffs.unshift([DIFF_EQUAL, commonprefix]);
              }
              if (commonsuffix) {
                diffs.push([DIFF_EQUAL, commonsuffix]);
              }
              diff_cleanupMerge(diffs);
              if (cursor_pos != null) {
                diffs = fix_cursor(diffs, cursor_pos);
              }
              diffs = fix_emoji(diffs);
              return diffs;
            }
            ;
            function diff_compute_(text1, text2) {
              var diffs;
              if (!text1) {
                return [[DIFF_INSERT, text2]];
              }
              if (!text2) {
                return [[DIFF_DELETE, text1]];
              }
              var longtext = text1.length > text2.length ? text1 : text2;
              var shorttext = text1.length > text2.length ? text2 : text1;
              var i = longtext.indexOf(shorttext);
              if (i != -1) {
                diffs = [
                  [DIFF_INSERT, longtext.substring(0, i)],
                  [DIFF_EQUAL, shorttext],
                  [DIFF_INSERT, longtext.substring(i + shorttext.length)]
                ];
                if (text1.length > text2.length) {
                  diffs[0][0] = diffs[2][0] = DIFF_DELETE;
                }
                return diffs;
              }
              if (shorttext.length == 1) {
                return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
              }
              var hm = diff_halfMatch_(text1, text2);
              if (hm) {
                var text1_a = hm[0];
                var text1_b = hm[1];
                var text2_a = hm[2];
                var text2_b = hm[3];
                var mid_common = hm[4];
                var diffs_a = diff_main(text1_a, text2_a);
                var diffs_b = diff_main(text1_b, text2_b);
                return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
              }
              return diff_bisect_(text1, text2);
            }
            ;
            function diff_bisect_(text1, text2) {
              var text1_length = text1.length;
              var text2_length = text2.length;
              var max_d = Math.ceil((text1_length + text2_length) / 2);
              var v_offset = max_d;
              var v_length = 2 * max_d;
              var v1 = new Array(v_length);
              var v2 = new Array(v_length);
              for (var x = 0; x < v_length; x++) {
                v1[x] = -1;
                v2[x] = -1;
              }
              v1[v_offset + 1] = 0;
              v2[v_offset + 1] = 0;
              var delta = text1_length - text2_length;
              var front = delta % 2 != 0;
              var k1start = 0;
              var k1end = 0;
              var k2start = 0;
              var k2end = 0;
              for (var d = 0; d < max_d; d++) {
                for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
                  var k1_offset = v_offset + k1;
                  var x1;
                  if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {
                    x1 = v1[k1_offset + 1];
                  } else {
                    x1 = v1[k1_offset - 1] + 1;
                  }
                  var y1 = x1 - k1;
                  while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {
                    x1++;
                    y1++;
                  }
                  v1[k1_offset] = x1;
                  if (x1 > text1_length) {
                    k1end += 2;
                  } else if (y1 > text2_length) {
                    k1start += 2;
                  } else if (front) {
                    var k2_offset = v_offset + delta - k1;
                    if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
                      var x2 = text1_length - v2[k2_offset];
                      if (x1 >= x2) {
                        return diff_bisectSplit_(text1, text2, x1, y1);
                      }
                    }
                  }
                }
                for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
                  var k2_offset = v_offset + k2;
                  var x2;
                  if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {
                    x2 = v2[k2_offset + 1];
                  } else {
                    x2 = v2[k2_offset - 1] + 1;
                  }
                  var y2 = x2 - k2;
                  while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {
                    x2++;
                    y2++;
                  }
                  v2[k2_offset] = x2;
                  if (x2 > text1_length) {
                    k2end += 2;
                  } else if (y2 > text2_length) {
                    k2start += 2;
                  } else if (!front) {
                    var k1_offset = v_offset + delta - k2;
                    if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
                      var x1 = v1[k1_offset];
                      var y1 = v_offset + x1 - k1_offset;
                      x2 = text1_length - x2;
                      if (x1 >= x2) {
                        return diff_bisectSplit_(text1, text2, x1, y1);
                      }
                    }
                  }
                }
              }
              return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
            }
            ;
            function diff_bisectSplit_(text1, text2, x, y) {
              var text1a = text1.substring(0, x);
              var text2a = text2.substring(0, y);
              var text1b = text1.substring(x);
              var text2b = text2.substring(y);
              var diffs = diff_main(text1a, text2a);
              var diffsb = diff_main(text1b, text2b);
              return diffs.concat(diffsb);
            }
            ;
            function diff_commonPrefix(text1, text2) {
              if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
                return 0;
              }
              var pointermin = 0;
              var pointermax = Math.min(text1.length, text2.length);
              var pointermid = pointermax;
              var pointerstart = 0;
              while (pointermin < pointermid) {
                if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {
                  pointermin = pointermid;
                  pointerstart = pointermin;
                } else {
                  pointermax = pointermid;
                }
                pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
              }
              return pointermid;
            }
            ;
            function diff_commonSuffix(text1, text2) {
              if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
                return 0;
              }
              var pointermin = 0;
              var pointermax = Math.min(text1.length, text2.length);
              var pointermid = pointermax;
              var pointerend = 0;
              while (pointermin < pointermid) {
                if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {
                  pointermin = pointermid;
                  pointerend = pointermin;
                } else {
                  pointermax = pointermid;
                }
                pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
              }
              return pointermid;
            }
            ;
            function diff_halfMatch_(text1, text2) {
              var longtext = text1.length > text2.length ? text1 : text2;
              var shorttext = text1.length > text2.length ? text2 : text1;
              if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
                return null;
              }
              function diff_halfMatchI_(longtext2, shorttext2, i) {
                var seed = longtext2.substring(i, i + Math.floor(longtext2.length / 4));
                var j = -1;
                var best_common = "";
                var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
                while ((j = shorttext2.indexOf(seed, j + 1)) != -1) {
                  var prefixLength = diff_commonPrefix(
                    longtext2.substring(i),
                    shorttext2.substring(j)
                  );
                  var suffixLength = diff_commonSuffix(
                    longtext2.substring(0, i),
                    shorttext2.substring(0, j)
                  );
                  if (best_common.length < suffixLength + prefixLength) {
                    best_common = shorttext2.substring(j - suffixLength, j) + shorttext2.substring(j, j + prefixLength);
                    best_longtext_a = longtext2.substring(0, i - suffixLength);
                    best_longtext_b = longtext2.substring(i + prefixLength);
                    best_shorttext_a = shorttext2.substring(0, j - suffixLength);
                    best_shorttext_b = shorttext2.substring(j + prefixLength);
                  }
                }
                if (best_common.length * 2 >= longtext2.length) {
                  return [
                    best_longtext_a,
                    best_longtext_b,
                    best_shorttext_a,
                    best_shorttext_b,
                    best_common
                  ];
                } else {
                  return null;
                }
              }
              var hm1 = diff_halfMatchI_(
                longtext,
                shorttext,
                Math.ceil(longtext.length / 4)
              );
              var hm2 = diff_halfMatchI_(
                longtext,
                shorttext,
                Math.ceil(longtext.length / 2)
              );
              var hm;
              if (!hm1 && !hm2) {
                return null;
              } else if (!hm2) {
                hm = hm1;
              } else if (!hm1) {
                hm = hm2;
              } else {
                hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
              }
              var text1_a, text1_b, text2_a, text2_b;
              if (text1.length > text2.length) {
                text1_a = hm[0];
                text1_b = hm[1];
                text2_a = hm[2];
                text2_b = hm[3];
              } else {
                text2_a = hm[0];
                text2_b = hm[1];
                text1_a = hm[2];
                text1_b = hm[3];
              }
              var mid_common = hm[4];
              return [text1_a, text1_b, text2_a, text2_b, mid_common];
            }
            ;
            function diff_cleanupMerge(diffs) {
              diffs.push([DIFF_EQUAL, ""]);
              var pointer = 0;
              var count_delete = 0;
              var count_insert = 0;
              var text_delete = "";
              var text_insert = "";
              var commonlength;
              while (pointer < diffs.length) {
                switch (diffs[pointer][0]) {
                  case DIFF_INSERT:
                    count_insert++;
                    text_insert += diffs[pointer][1];
                    pointer++;
                    break;
                  case DIFF_DELETE:
                    count_delete++;
                    text_delete += diffs[pointer][1];
                    pointer++;
                    break;
                  case DIFF_EQUAL:
                    if (count_delete + count_insert > 1) {
                      if (count_delete !== 0 && count_insert !== 0) {
                        commonlength = diff_commonPrefix(text_insert, text_delete);
                        if (commonlength !== 0) {
                          if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {
                            diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);
                          } else {
                            diffs.splice(0, 0, [
                              DIFF_EQUAL,
                              text_insert.substring(0, commonlength)
                            ]);
                            pointer++;
                          }
                          text_insert = text_insert.substring(commonlength);
                          text_delete = text_delete.substring(commonlength);
                        }
                        commonlength = diff_commonSuffix(text_insert, text_delete);
                        if (commonlength !== 0) {
                          diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];
                          text_insert = text_insert.substring(0, text_insert.length - commonlength);
                          text_delete = text_delete.substring(0, text_delete.length - commonlength);
                        }
                      }
                      if (count_delete === 0) {
                        diffs.splice(
                          pointer - count_insert,
                          count_delete + count_insert,
                          [DIFF_INSERT, text_insert]
                        );
                      } else if (count_insert === 0) {
                        diffs.splice(
                          pointer - count_delete,
                          count_delete + count_insert,
                          [DIFF_DELETE, text_delete]
                        );
                      } else {
                        diffs.splice(
                          pointer - count_delete - count_insert,
                          count_delete + count_insert,
                          [DIFF_DELETE, text_delete],
                          [DIFF_INSERT, text_insert]
                        );
                      }
                      pointer = pointer - count_delete - count_insert + (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
                    } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
                      diffs[pointer - 1][1] += diffs[pointer][1];
                      diffs.splice(pointer, 1);
                    } else {
                      pointer++;
                    }
                    count_insert = 0;
                    count_delete = 0;
                    text_delete = "";
                    text_insert = "";
                    break;
                }
              }
              if (diffs[diffs.length - 1][1] === "") {
                diffs.pop();
              }
              var changes = false;
              pointer = 1;
              while (pointer < diffs.length - 1) {
                if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {
                  if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
                    diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);
                    diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
                    diffs.splice(pointer - 1, 1);
                    changes = true;
                  } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {
                    diffs[pointer - 1][1] += diffs[pointer + 1][1];
                    diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];
                    diffs.splice(pointer + 1, 1);
                    changes = true;
                  }
                }
                pointer++;
              }
              if (changes) {
                diff_cleanupMerge(diffs);
              }
            }
            ;
            var diff = diff_main;
            diff.INSERT = DIFF_INSERT;
            diff.DELETE = DIFF_DELETE;
            diff.EQUAL = DIFF_EQUAL;
            module2.exports = diff;
            function cursor_normalize_diff(diffs, cursor_pos) {
              if (cursor_pos === 0) {
                return [DIFF_EQUAL, diffs];
              }
              for (var current_pos = 0, i = 0; i < diffs.length; i++) {
                var d = diffs[i];
                if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {
                  var next_pos = current_pos + d[1].length;
                  if (cursor_pos === next_pos) {
                    return [i + 1, diffs];
                  } else if (cursor_pos < next_pos) {
                    diffs = diffs.slice();
                    var split_pos = cursor_pos - current_pos;
                    var d_left = [d[0], d[1].slice(0, split_pos)];
                    var d_right = [d[0], d[1].slice(split_pos)];
                    diffs.splice(i, 1, d_left, d_right);
                    return [i + 1, diffs];
                  } else {
                    current_pos = next_pos;
                  }
                }
              }
              throw new Error("cursor_pos is out of bounds!");
            }
            function fix_cursor(diffs, cursor_pos) {
              var norm = cursor_normalize_diff(diffs, cursor_pos);
              var ndiffs = norm[1];
              var cursor_pointer = norm[0];
              var d = ndiffs[cursor_pointer];
              var d_next = ndiffs[cursor_pointer + 1];
              if (d == null) {
                return diffs;
              } else if (d[0] !== DIFF_EQUAL) {
                return diffs;
              } else {
                if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {
                  ndiffs.splice(cursor_pointer, 2, d_next, d);
                  return merge_tuples(ndiffs, cursor_pointer, 2);
                } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {
                  ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);
                  var suffix = d_next[1].slice(d[1].length);
                  if (suffix.length > 0) {
                    ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);
                  }
                  return merge_tuples(ndiffs, cursor_pointer, 3);
                } else {
                  return diffs;
                }
              }
            }
            function fix_emoji(diffs) {
              var compact = false;
              var starts_with_pair_end = function(str) {
                return str.charCodeAt(0) >= 56320 && str.charCodeAt(0) <= 57343;
              };
              var ends_with_pair_start = function(str) {
                return str.charCodeAt(str.length - 1) >= 55296 && str.charCodeAt(str.length - 1) <= 56319;
              };
              for (var i = 2; i < diffs.length; i += 1) {
                if (diffs[i - 2][0] === DIFF_EQUAL && ends_with_pair_start(diffs[i - 2][1]) && diffs[i - 1][0] === DIFF_DELETE && starts_with_pair_end(diffs[i - 1][1]) && diffs[i][0] === DIFF_INSERT && starts_with_pair_end(diffs[i][1])) {
                  compact = true;
                  diffs[i - 1][1] = diffs[i - 2][1].slice(-1) + diffs[i - 1][1];
                  diffs[i][1] = diffs[i - 2][1].slice(-1) + diffs[i][1];
                  diffs[i - 2][1] = diffs[i - 2][1].slice(0, -1);
                }
              }
              if (!compact) {
                return diffs;
              }
              var fixed_diffs = [];
              for (var i = 0; i < diffs.length; i += 1) {
                if (diffs[i][1].length > 0) {
                  fixed_diffs.push(diffs[i]);
                }
              }
              return fixed_diffs;
            }
            function merge_tuples(diffs, start, length) {
              for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {
                if (i + 1 < diffs.length) {
                  var left_d = diffs[i];
                  var right_d = diffs[i + 1];
                  if (left_d[0] === right_d[1]) {
                    diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);
                  }
                }
              }
              return diffs;
            }
          },
          /* 52 */
          /***/
          function(module2, exports2) {
            exports2 = module2.exports = typeof Object.keys === "function" ? Object.keys : shim;
            exports2.shim = shim;
            function shim(obj) {
              var keys = [];
              for (var key in obj) keys.push(key);
              return keys;
            }
          },
          /* 53 */
          /***/
          function(module2, exports2) {
            var supportsArgumentsClass = function() {
              return Object.prototype.toString.call(arguments);
            }() == "[object Arguments]";
            exports2 = module2.exports = supportsArgumentsClass ? supported : unsupported;
            exports2.supported = supported;
            function supported(object) {
              return Object.prototype.toString.call(object) == "[object Arguments]";
            }
            ;
            exports2.unsupported = unsupported;
            function unsupported(object) {
              return object && typeof object == "object" && typeof object.length == "number" && Object.prototype.hasOwnProperty.call(object, "callee") && !Object.prototype.propertyIsEnumerable.call(object, "callee") || false;
            }
            ;
          },
          /* 54 */
          /***/
          function(module2, exports2) {
            "use strict";
            var has = Object.prototype.hasOwnProperty, prefix = "~";
            function Events() {
            }
            if (Object.create) {
              Events.prototype = /* @__PURE__ */ Object.create(null);
              if (!new Events().__proto__) prefix = false;
            }
            function EE(fn, context, once) {
              this.fn = fn;
              this.context = context;
              this.once = once || false;
            }
            function EventEmitter() {
              this._events = new Events();
              this._eventsCount = 0;
            }
            EventEmitter.prototype.eventNames = function eventNames() {
              var names = [], events, name;
              if (this._eventsCount === 0) return names;
              for (name in events = this._events) {
                if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
              }
              if (Object.getOwnPropertySymbols) {
                return names.concat(Object.getOwnPropertySymbols(events));
              }
              return names;
            };
            EventEmitter.prototype.listeners = function listeners(event, exists) {
              var evt = prefix ? prefix + event : event, available = this._events[evt];
              if (exists) return !!available;
              if (!available) return [];
              if (available.fn) return [available.fn];
              for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
                ee[i] = available[i].fn;
              }
              return ee;
            };
            EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
              var evt = prefix ? prefix + event : event;
              if (!this._events[evt]) return false;
              var listeners = this._events[evt], len = arguments.length, args, i;
              if (listeners.fn) {
                if (listeners.once) this.removeListener(event, listeners.fn, void 0, true);
                switch (len) {
                  case 1:
                    return listeners.fn.call(listeners.context), true;
                  case 2:
                    return listeners.fn.call(listeners.context, a1), true;
                  case 3:
                    return listeners.fn.call(listeners.context, a1, a2), true;
                  case 4:
                    return listeners.fn.call(listeners.context, a1, a2, a3), true;
                  case 5:
                    return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
                  case 6:
                    return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
                }
                for (i = 1, args = new Array(len - 1); i < len; i++) {
                  args[i - 1] = arguments[i];
                }
                listeners.fn.apply(listeners.context, args);
              } else {
                var length = listeners.length, j;
                for (i = 0; i < length; i++) {
                  if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true);
                  switch (len) {
                    case 1:
                      listeners[i].fn.call(listeners[i].context);
                      break;
                    case 2:
                      listeners[i].fn.call(listeners[i].context, a1);
                      break;
                    case 3:
                      listeners[i].fn.call(listeners[i].context, a1, a2);
                      break;
                    case 4:
                      listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                      break;
                    default:
                      if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                        args[j - 1] = arguments[j];
                      }
                      listeners[i].fn.apply(listeners[i].context, args);
                  }
                }
              }
              return true;
            };
            EventEmitter.prototype.on = function on(event, fn, context) {
              var listener = new EE(fn, context || this), evt = prefix ? prefix + event : event;
              if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
              else if (!this._events[evt].fn) this._events[evt].push(listener);
              else this._events[evt] = [this._events[evt], listener];
              return this;
            };
            EventEmitter.prototype.once = function once(event, fn, context) {
              var listener = new EE(fn, context || this, true), evt = prefix ? prefix + event : event;
              if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;
              else if (!this._events[evt].fn) this._events[evt].push(listener);
              else this._events[evt] = [this._events[evt], listener];
              return this;
            };
            EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
              var evt = prefix ? prefix + event : event;
              if (!this._events[evt]) return this;
              if (!fn) {
                if (--this._eventsCount === 0) this._events = new Events();
                else delete this._events[evt];
                return this;
              }
              var listeners = this._events[evt];
              if (listeners.fn) {
                if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
                  if (--this._eventsCount === 0) this._events = new Events();
                  else delete this._events[evt];
                }
              } else {
                for (var i = 0, events = [], length = listeners.length; i < length; i++) {
                  if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
                    events.push(listeners[i]);
                  }
                }
                if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
                else if (--this._eventsCount === 0) this._events = new Events();
                else delete this._events[evt];
              }
              return this;
            };
            EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
              var evt;
              if (event) {
                evt = prefix ? prefix + event : event;
                if (this._events[evt]) {
                  if (--this._eventsCount === 0) this._events = new Events();
                  else delete this._events[evt];
                }
              } else {
                this._events = new Events();
                this._eventsCount = 0;
              }
              return this;
            };
            EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
            EventEmitter.prototype.addListener = EventEmitter.prototype.on;
            EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
              return this;
            };
            EventEmitter.prefixed = prefix;
            EventEmitter.EventEmitter = EventEmitter;
            if ("undefined" !== typeof module2) {
              module2.exports = EventEmitter;
            }
          },
          /* 55 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.matchText = exports2.matchSpacing = exports2.matchNewline = exports2.matchBlot = exports2.matchAttributor = exports2.default = void 0;
            var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
              return typeof obj;
            } : function(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
            var _slicedToArray = /* @__PURE__ */ function() {
              function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i) break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"]) _i["return"]();
                  } finally {
                    if (_d) throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _extend2 = __webpack_require__(3);
            var _extend3 = _interopRequireDefault(_extend2);
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _logger = __webpack_require__(10);
            var _logger2 = _interopRequireDefault(_logger);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            var _align = __webpack_require__(36);
            var _background = __webpack_require__(37);
            var _code = __webpack_require__(13);
            var _code2 = _interopRequireDefault(_code);
            var _color = __webpack_require__(26);
            var _direction = __webpack_require__(38);
            var _font = __webpack_require__(39);
            var _size = __webpack_require__(40);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _defineProperty(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var debug = (0, _logger2.default)("quill:clipboard");
            var DOM_KEY = "__ql-matcher";
            var CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ["br", matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchSpacing], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ["li", matchIndent], ["b", matchAlias.bind(matchAlias, "bold")], ["i", matchAlias.bind(matchAlias, "italic")], ["style", matchIgnore]];
            var ATTRIBUTE_ATTRIBUTORS = [_align.AlignAttribute, _direction.DirectionAttribute].reduce(function(memo, attr) {
              memo[attr.keyName] = attr;
              return memo;
            }, {});
            var STYLE_ATTRIBUTORS = [_align.AlignStyle, _background.BackgroundStyle, _color.ColorStyle, _direction.DirectionStyle, _font.FontStyle, _size.SizeStyle].reduce(function(memo, attr) {
              memo[attr.keyName] = attr;
              return memo;
            }, {});
            var Clipboard = function(_Module) {
              _inherits(Clipboard2, _Module);
              function Clipboard2(quill, options) {
                _classCallCheck(this, Clipboard2);
                var _this = _possibleConstructorReturn(this, (Clipboard2.__proto__ || Object.getPrototypeOf(Clipboard2)).call(this, quill, options));
                _this.quill.root.addEventListener("paste", _this.onPaste.bind(_this));
                _this.container = _this.quill.addContainer("ql-clipboard");
                _this.container.setAttribute("contenteditable", true);
                _this.container.setAttribute("tabindex", -1);
                _this.matchers = [];
                CLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function(_ref) {
                  var _ref2 = _slicedToArray(_ref, 2), selector = _ref2[0], matcher = _ref2[1];
                  if (!options.matchVisual && matcher === matchSpacing) return;
                  _this.addMatcher(selector, matcher);
                });
                return _this;
              }
              _createClass(Clipboard2, [{
                key: "addMatcher",
                value: function addMatcher(selector, matcher) {
                  this.matchers.push([selector, matcher]);
                }
              }, {
                key: "convert",
                value: function convert(html) {
                  if (typeof html === "string") {
                    this.container.innerHTML = html.replace(/\>\r?\n +\</g, "><");
                    return this.convert();
                  }
                  var formats = this.quill.getFormat(this.quill.selection.savedRange.index);
                  if (formats[_code2.default.blotName]) {
                    var text = this.container.innerText;
                    this.container.innerHTML = "";
                    return new _quillDelta2.default().insert(text, _defineProperty({}, _code2.default.blotName, formats[_code2.default.blotName]));
                  }
                  var _prepareMatching = this.prepareMatching(), _prepareMatching2 = _slicedToArray(_prepareMatching, 2), elementMatchers = _prepareMatching2[0], textMatchers = _prepareMatching2[1];
                  var delta = traverse(this.container, elementMatchers, textMatchers);
                  if (deltaEndsWith(delta, "\n") && delta.ops[delta.ops.length - 1].attributes == null) {
                    delta = delta.compose(new _quillDelta2.default().retain(delta.length() - 1).delete(1));
                  }
                  debug.log("convert", this.container.innerHTML, delta);
                  this.container.innerHTML = "";
                  return delta;
                }
              }, {
                key: "dangerouslyPasteHTML",
                value: function dangerouslyPasteHTML(index, html) {
                  var source = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : _quill2.default.sources.API;
                  if (typeof index === "string") {
                    this.quill.setContents(this.convert(index), html);
                    this.quill.setSelection(0, _quill2.default.sources.SILENT);
                  } else {
                    var paste = this.convert(html);
                    this.quill.updateContents(new _quillDelta2.default().retain(index).concat(paste), source);
                    this.quill.setSelection(index + paste.length(), _quill2.default.sources.SILENT);
                  }
                }
              }, {
                key: "onPaste",
                value: function onPaste(e) {
                  var _this2 = this;
                  if (e.defaultPrevented || !this.quill.isEnabled()) return;
                  var range = this.quill.getSelection();
                  var delta = new _quillDelta2.default().retain(range.index);
                  var scrollTop = this.quill.scrollingContainer.scrollTop;
                  this.container.focus();
                  this.quill.selection.update(_quill2.default.sources.SILENT);
                  setTimeout(function() {
                    delta = delta.concat(_this2.convert()).delete(range.length);
                    _this2.quill.updateContents(delta, _quill2.default.sources.USER);
                    _this2.quill.setSelection(delta.length() - range.length, _quill2.default.sources.SILENT);
                    _this2.quill.scrollingContainer.scrollTop = scrollTop;
                    _this2.quill.focus();
                  }, 1);
                }
              }, {
                key: "prepareMatching",
                value: function prepareMatching() {
                  var _this3 = this;
                  var elementMatchers = [], textMatchers = [];
                  this.matchers.forEach(function(pair) {
                    var _pair = _slicedToArray(pair, 2), selector = _pair[0], matcher = _pair[1];
                    switch (selector) {
                      case Node.TEXT_NODE:
                        textMatchers.push(matcher);
                        break;
                      case Node.ELEMENT_NODE:
                        elementMatchers.push(matcher);
                        break;
                      default:
                        [].forEach.call(_this3.container.querySelectorAll(selector), function(node) {
                          node[DOM_KEY] = node[DOM_KEY] || [];
                          node[DOM_KEY].push(matcher);
                        });
                        break;
                    }
                  });
                  return [elementMatchers, textMatchers];
                }
              }]);
              return Clipboard2;
            }(_module2.default);
            Clipboard.DEFAULTS = {
              matchers: [],
              matchVisual: true
            };
            function applyFormat(delta, format, value) {
              if ((typeof format === "undefined" ? "undefined" : _typeof(format)) === "object") {
                return Object.keys(format).reduce(function(delta2, key) {
                  return applyFormat(delta2, key, format[key]);
                }, delta);
              } else {
                return delta.reduce(function(delta2, op) {
                  if (op.attributes && op.attributes[format]) {
                    return delta2.push(op);
                  } else {
                    return delta2.insert(op.insert, (0, _extend3.default)({}, _defineProperty({}, format, value), op.attributes));
                  }
                }, new _quillDelta2.default());
              }
            }
            function computeStyle(node) {
              if (node.nodeType !== Node.ELEMENT_NODE) return {};
              var DOM_KEY2 = "__ql-computed-style";
              return node[DOM_KEY2] || (node[DOM_KEY2] = window.getComputedStyle(node));
            }
            function deltaEndsWith(delta, text) {
              var endText = "";
              for (var i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i) {
                var op = delta.ops[i];
                if (typeof op.insert !== "string") break;
                endText = op.insert + endText;
              }
              return endText.slice(-1 * text.length) === text;
            }
            function isLine(node) {
              if (node.childNodes.length === 0) return false;
              var style = computeStyle(node);
              return ["block", "list-item"].indexOf(style.display) > -1;
            }
            function traverse(node, elementMatchers, textMatchers) {
              if (node.nodeType === node.TEXT_NODE) {
                return textMatchers.reduce(function(delta, matcher) {
                  return matcher(node, delta);
                }, new _quillDelta2.default());
              } else if (node.nodeType === node.ELEMENT_NODE) {
                return [].reduce.call(node.childNodes || [], function(delta, childNode) {
                  var childrenDelta = traverse(childNode, elementMatchers, textMatchers);
                  if (childNode.nodeType === node.ELEMENT_NODE) {
                    childrenDelta = elementMatchers.reduce(function(childrenDelta2, matcher) {
                      return matcher(childNode, childrenDelta2);
                    }, childrenDelta);
                    childrenDelta = (childNode[DOM_KEY] || []).reduce(function(childrenDelta2, matcher) {
                      return matcher(childNode, childrenDelta2);
                    }, childrenDelta);
                  }
                  return delta.concat(childrenDelta);
                }, new _quillDelta2.default());
              } else {
                return new _quillDelta2.default();
              }
            }
            function matchAlias(format, node, delta) {
              return applyFormat(delta, format, true);
            }
            function matchAttributor(node, delta) {
              var attributes = _parchment2.default.Attributor.Attribute.keys(node);
              var classes = _parchment2.default.Attributor.Class.keys(node);
              var styles = _parchment2.default.Attributor.Style.keys(node);
              var formats = {};
              attributes.concat(classes).concat(styles).forEach(function(name) {
                var attr = _parchment2.default.query(name, _parchment2.default.Scope.ATTRIBUTE);
                if (attr != null) {
                  formats[attr.attrName] = attr.value(node);
                  if (formats[attr.attrName]) return;
                }
                attr = ATTRIBUTE_ATTRIBUTORS[name];
                if (attr != null && (attr.attrName === name || attr.keyName === name)) {
                  formats[attr.attrName] = attr.value(node) || void 0;
                }
                attr = STYLE_ATTRIBUTORS[name];
                if (attr != null && (attr.attrName === name || attr.keyName === name)) {
                  attr = STYLE_ATTRIBUTORS[name];
                  formats[attr.attrName] = attr.value(node) || void 0;
                }
              });
              if (Object.keys(formats).length > 0) {
                delta = applyFormat(delta, formats);
              }
              return delta;
            }
            function matchBlot(node, delta) {
              var match = _parchment2.default.query(node);
              if (match == null) return delta;
              if (match.prototype instanceof _parchment2.default.Embed) {
                var embed = {};
                var value = match.value(node);
                if (value != null) {
                  embed[match.blotName] = value;
                  delta = new _quillDelta2.default().insert(embed, match.formats(node));
                }
              } else if (typeof match.formats === "function") {
                delta = applyFormat(delta, match.blotName, match.formats(node));
              }
              return delta;
            }
            function matchBreak(node, delta) {
              if (!deltaEndsWith(delta, "\n")) {
                delta.insert("\n");
              }
              return delta;
            }
            function matchIgnore() {
              return new _quillDelta2.default();
            }
            function matchIndent(node, delta) {
              var match = _parchment2.default.query(node);
              if (match == null || match.blotName !== "list-item" || !deltaEndsWith(delta, "\n")) {
                return delta;
              }
              var indent = -1, parent = node.parentNode;
              while (!parent.classList.contains("ql-clipboard")) {
                if ((_parchment2.default.query(parent) || {}).blotName === "list") {
                  indent += 1;
                }
                parent = parent.parentNode;
              }
              if (indent <= 0) return delta;
              return delta.compose(new _quillDelta2.default().retain(delta.length() - 1).retain(1, { indent }));
            }
            function matchNewline(node, delta) {
              if (!deltaEndsWith(delta, "\n")) {
                if (isLine(node) || delta.length() > 0 && node.nextSibling && isLine(node.nextSibling)) {
                  delta.insert("\n");
                }
              }
              return delta;
            }
            function matchSpacing(node, delta) {
              if (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, "\n\n")) {
                var nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);
                if (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight * 1.5) {
                  delta.insert("\n");
                }
              }
              return delta;
            }
            function matchStyles(node, delta) {
              var formats = {};
              var style = node.style || {};
              if (style.fontStyle && computeStyle(node).fontStyle === "italic") {
                formats.italic = true;
              }
              if (style.fontWeight && (computeStyle(node).fontWeight.startsWith("bold") || parseInt(computeStyle(node).fontWeight) >= 700)) {
                formats.bold = true;
              }
              if (Object.keys(formats).length > 0) {
                delta = applyFormat(delta, formats);
              }
              if (parseFloat(style.textIndent || 0) > 0) {
                delta = new _quillDelta2.default().insert("	").concat(delta);
              }
              return delta;
            }
            function matchText(node, delta) {
              var text = node.data;
              if (node.parentNode.tagName === "O:P") {
                return delta.insert(text.trim());
              }
              if (text.trim().length === 0 && node.parentNode.classList.contains("ql-clipboard")) {
                return delta;
              }
              if (!computeStyle(node.parentNode).whiteSpace.startsWith("pre")) {
                var replacer = function replacer2(collapse, match) {
                  match = match.replace(/[^\u00a0]/g, "");
                  return match.length < 1 && collapse ? " " : match;
                };
                text = text.replace(/\r\n/g, " ").replace(/\n/g, " ");
                text = text.replace(/\s\s+/g, replacer.bind(replacer, true));
                if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {
                  text = text.replace(/^\s+/, replacer.bind(replacer, false));
                }
                if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {
                  text = text.replace(/\s+$/, replacer.bind(replacer, false));
                }
              }
              return delta.insert(text);
            }
            exports2.default = Clipboard;
            exports2.matchAttributor = matchAttributor;
            exports2.matchBlot = matchBlot;
            exports2.matchNewline = matchNewline;
            exports2.matchSpacing = matchSpacing;
            exports2.matchText = matchText;
          },
          /* 56 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Bold = function(_Inline) {
              _inherits(Bold2, _Inline);
              function Bold2() {
                _classCallCheck(this, Bold2);
                return _possibleConstructorReturn(this, (Bold2.__proto__ || Object.getPrototypeOf(Bold2)).apply(this, arguments));
              }
              _createClass(Bold2, [{
                key: "optimize",
                value: function optimize(context) {
                  _get(Bold2.prototype.__proto__ || Object.getPrototypeOf(Bold2.prototype), "optimize", this).call(this, context);
                  if (this.domNode.tagName !== this.statics.tagName[0]) {
                    this.replaceWith(this.statics.blotName);
                  }
                }
              }], [{
                key: "create",
                value: function create() {
                  return _get(Bold2.__proto__ || Object.getPrototypeOf(Bold2), "create", this).call(this);
                }
              }, {
                key: "formats",
                value: function formats() {
                  return true;
                }
              }]);
              return Bold2;
            }(_inline2.default);
            Bold.blotName = "bold";
            Bold.tagName = ["STRONG", "B"];
            exports2.default = Bold;
          },
          /* 57 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.addControls = exports2.default = void 0;
            var _slicedToArray = /* @__PURE__ */ function() {
              function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i) break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"]) _i["return"]();
                  } finally {
                    if (_d) throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _quillDelta = __webpack_require__(2);
            var _quillDelta2 = _interopRequireDefault(_quillDelta);
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _logger = __webpack_require__(10);
            var _logger2 = _interopRequireDefault(_logger);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _defineProperty(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var debug = (0, _logger2.default)("quill:toolbar");
            var Toolbar = function(_Module) {
              _inherits(Toolbar2, _Module);
              function Toolbar2(quill, options) {
                _classCallCheck(this, Toolbar2);
                var _this = _possibleConstructorReturn(this, (Toolbar2.__proto__ || Object.getPrototypeOf(Toolbar2)).call(this, quill, options));
                if (Array.isArray(_this.options.container)) {
                  var container = document.createElement("div");
                  addControls(container, _this.options.container);
                  quill.container.parentNode.insertBefore(container, quill.container);
                  _this.container = container;
                } else if (typeof _this.options.container === "string") {
                  _this.container = document.querySelector(_this.options.container);
                } else {
                  _this.container = _this.options.container;
                }
                if (!(_this.container instanceof HTMLElement)) {
                  var _ret;
                  return _ret = debug.error("Container required for toolbar", _this.options), _possibleConstructorReturn(_this, _ret);
                }
                _this.container.classList.add("ql-toolbar");
                _this.controls = [];
                _this.handlers = {};
                Object.keys(_this.options.handlers).forEach(function(format) {
                  _this.addHandler(format, _this.options.handlers[format]);
                });
                [].forEach.call(_this.container.querySelectorAll("button, select"), function(input) {
                  _this.attach(input);
                });
                _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function(type, range) {
                  if (type === _quill2.default.events.SELECTION_CHANGE) {
                    _this.update(range);
                  }
                });
                _this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function() {
                  var _this$quill$selection = _this.quill.selection.getRange(), _this$quill$selection2 = _slicedToArray(_this$quill$selection, 1), range = _this$quill$selection2[0];
                  _this.update(range);
                });
                return _this;
              }
              _createClass(Toolbar2, [{
                key: "addHandler",
                value: function addHandler(format, handler) {
                  this.handlers[format] = handler;
                }
              }, {
                key: "attach",
                value: function attach(input) {
                  var _this2 = this;
                  var format = [].find.call(input.classList, function(className) {
                    return className.indexOf("ql-") === 0;
                  });
                  if (!format) return;
                  format = format.slice("ql-".length);
                  if (input.tagName === "BUTTON") {
                    input.setAttribute("type", "button");
                  }
                  if (this.handlers[format] == null) {
                    if (this.quill.scroll.whitelist != null && this.quill.scroll.whitelist[format] == null) {
                      debug.warn("ignoring attaching to disabled format", format, input);
                      return;
                    }
                    if (_parchment2.default.query(format) == null) {
                      debug.warn("ignoring attaching to nonexistent format", format, input);
                      return;
                    }
                  }
                  var eventName = input.tagName === "SELECT" ? "change" : "click";
                  input.addEventListener(eventName, function(e) {
                    var value = void 0;
                    if (input.tagName === "SELECT") {
                      if (input.selectedIndex < 0) return;
                      var selected = input.options[input.selectedIndex];
                      if (selected.hasAttribute("selected")) {
                        value = false;
                      } else {
                        value = selected.value || false;
                      }
                    } else {
                      if (input.classList.contains("ql-active")) {
                        value = false;
                      } else {
                        value = input.value || !input.hasAttribute("value");
                      }
                      e.preventDefault();
                    }
                    _this2.quill.focus();
                    var _quill$selection$getR = _this2.quill.selection.getRange(), _quill$selection$getR2 = _slicedToArray(_quill$selection$getR, 1), range = _quill$selection$getR2[0];
                    if (_this2.handlers[format] != null) {
                      _this2.handlers[format].call(_this2, value);
                    } else if (_parchment2.default.query(format).prototype instanceof _parchment2.default.Embed) {
                      value = prompt("Enter " + format);
                      if (!value) return;
                      _this2.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert(_defineProperty({}, format, value)), _quill2.default.sources.USER);
                    } else {
                      _this2.quill.format(format, value, _quill2.default.sources.USER);
                    }
                    _this2.update(range);
                  });
                  this.controls.push([format, input]);
                }
              }, {
                key: "update",
                value: function update(range) {
                  var formats = range == null ? {} : this.quill.getFormat(range);
                  this.controls.forEach(function(pair) {
                    var _pair = _slicedToArray(pair, 2), format = _pair[0], input = _pair[1];
                    if (input.tagName === "SELECT") {
                      var option = void 0;
                      if (range == null) {
                        option = null;
                      } else if (formats[format] == null) {
                        option = input.querySelector("option[selected]");
                      } else if (!Array.isArray(formats[format])) {
                        var value = formats[format];
                        if (typeof value === "string") {
                          value = value.replace(/\"/g, '\\"');
                        }
                        option = input.querySelector('option[value="' + value + '"]');
                      }
                      if (option == null) {
                        input.value = "";
                        input.selectedIndex = -1;
                      } else {
                        option.selected = true;
                      }
                    } else {
                      if (range == null) {
                        input.classList.remove("ql-active");
                      } else if (input.hasAttribute("value")) {
                        var isActive = formats[format] === input.getAttribute("value") || formats[format] != null && formats[format].toString() === input.getAttribute("value") || formats[format] == null && !input.getAttribute("value");
                        input.classList.toggle("ql-active", isActive);
                      } else {
                        input.classList.toggle("ql-active", formats[format] != null);
                      }
                    }
                  });
                }
              }]);
              return Toolbar2;
            }(_module2.default);
            Toolbar.DEFAULTS = {};
            function addButton(container, format, value) {
              var input = document.createElement("button");
              input.setAttribute("type", "button");
              input.classList.add("ql-" + format);
              if (value != null) {
                input.value = value;
              }
              container.appendChild(input);
            }
            function addControls(container, groups) {
              if (!Array.isArray(groups[0])) {
                groups = [groups];
              }
              groups.forEach(function(controls) {
                var group = document.createElement("span");
                group.classList.add("ql-formats");
                controls.forEach(function(control) {
                  if (typeof control === "string") {
                    addButton(group, control);
                  } else {
                    var format = Object.keys(control)[0];
                    var value = control[format];
                    if (Array.isArray(value)) {
                      addSelect(group, format, value);
                    } else {
                      addButton(group, format, value);
                    }
                  }
                });
                container.appendChild(group);
              });
            }
            function addSelect(container, format, values) {
              var input = document.createElement("select");
              input.classList.add("ql-" + format);
              values.forEach(function(value) {
                var option = document.createElement("option");
                if (value !== false) {
                  option.setAttribute("value", value);
                } else {
                  option.setAttribute("selected", "selected");
                }
                input.appendChild(option);
              });
              container.appendChild(input);
            }
            Toolbar.DEFAULTS = {
              container: null,
              handlers: {
                clean: function clean() {
                  var _this3 = this;
                  var range = this.quill.getSelection();
                  if (range == null) return;
                  if (range.length == 0) {
                    var formats = this.quill.getFormat();
                    Object.keys(formats).forEach(function(name) {
                      if (_parchment2.default.query(name, _parchment2.default.Scope.INLINE) != null) {
                        _this3.quill.format(name, false);
                      }
                    });
                  } else {
                    this.quill.removeFormat(range, _quill2.default.sources.USER);
                  }
                },
                direction: function direction(value) {
                  var align = this.quill.getFormat()["align"];
                  if (value === "rtl" && align == null) {
                    this.quill.format("align", "right", _quill2.default.sources.USER);
                  } else if (!value && align === "right") {
                    this.quill.format("align", false, _quill2.default.sources.USER);
                  }
                  this.quill.format("direction", value, _quill2.default.sources.USER);
                },
                indent: function indent(value) {
                  var range = this.quill.getSelection();
                  var formats = this.quill.getFormat(range);
                  var indent2 = parseInt(formats.indent || 0);
                  if (value === "+1" || value === "-1") {
                    var modifier = value === "+1" ? 1 : -1;
                    if (formats.direction === "rtl") modifier *= -1;
                    this.quill.format("indent", indent2 + modifier, _quill2.default.sources.USER);
                  }
                },
                link: function link(value) {
                  if (value === true) {
                    value = prompt("Enter link URL:");
                  }
                  this.quill.format("link", value, _quill2.default.sources.USER);
                },
                list: function list(value) {
                  var range = this.quill.getSelection();
                  var formats = this.quill.getFormat(range);
                  if (value === "check") {
                    if (formats["list"] === "checked" || formats["list"] === "unchecked") {
                      this.quill.format("list", false, _quill2.default.sources.USER);
                    } else {
                      this.quill.format("list", "unchecked", _quill2.default.sources.USER);
                    }
                  } else {
                    this.quill.format("list", value, _quill2.default.sources.USER);
                  }
                }
              }
            };
            exports2.default = Toolbar;
            exports2.addControls = addControls;
          },
          /* 58 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <polyline class="ql-even ql-stroke" points="5 7 3 9 5 11"></polyline> <polyline class="ql-even ql-stroke" points="13 7 15 9 13 11"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>';
          },
          /* 59 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _picker = __webpack_require__(28);
            var _picker2 = _interopRequireDefault(_picker);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var ColorPicker = function(_Picker) {
              _inherits(ColorPicker2, _Picker);
              function ColorPicker2(select, label) {
                _classCallCheck(this, ColorPicker2);
                var _this = _possibleConstructorReturn(this, (ColorPicker2.__proto__ || Object.getPrototypeOf(ColorPicker2)).call(this, select));
                _this.label.innerHTML = label;
                _this.container.classList.add("ql-color-picker");
                [].slice.call(_this.container.querySelectorAll(".ql-picker-item"), 0, 7).forEach(function(item) {
                  item.classList.add("ql-primary");
                });
                return _this;
              }
              _createClass(ColorPicker2, [{
                key: "buildItem",
                value: function buildItem(option) {
                  var item = _get(ColorPicker2.prototype.__proto__ || Object.getPrototypeOf(ColorPicker2.prototype), "buildItem", this).call(this, option);
                  item.style.backgroundColor = option.getAttribute("value") || "";
                  return item;
                }
              }, {
                key: "selectItem",
                value: function selectItem(item, trigger) {
                  _get(ColorPicker2.prototype.__proto__ || Object.getPrototypeOf(ColorPicker2.prototype), "selectItem", this).call(this, item, trigger);
                  var colorLabel = this.label.querySelector(".ql-color-label");
                  var value = item ? item.getAttribute("data-value") || "" : "";
                  if (colorLabel) {
                    if (colorLabel.tagName === "line") {
                      colorLabel.style.stroke = value;
                    } else {
                      colorLabel.style.fill = value;
                    }
                  }
                }
              }]);
              return ColorPicker2;
            }(_picker2.default);
            exports2.default = ColorPicker;
          },
          /* 60 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _picker = __webpack_require__(28);
            var _picker2 = _interopRequireDefault(_picker);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var IconPicker = function(_Picker) {
              _inherits(IconPicker2, _Picker);
              function IconPicker2(select, icons) {
                _classCallCheck(this, IconPicker2);
                var _this = _possibleConstructorReturn(this, (IconPicker2.__proto__ || Object.getPrototypeOf(IconPicker2)).call(this, select));
                _this.container.classList.add("ql-icon-picker");
                [].forEach.call(_this.container.querySelectorAll(".ql-picker-item"), function(item) {
                  item.innerHTML = icons[item.getAttribute("data-value") || ""];
                });
                _this.defaultItem = _this.container.querySelector(".ql-selected");
                _this.selectItem(_this.defaultItem);
                return _this;
              }
              _createClass(IconPicker2, [{
                key: "selectItem",
                value: function selectItem(item, trigger) {
                  _get(IconPicker2.prototype.__proto__ || Object.getPrototypeOf(IconPicker2.prototype), "selectItem", this).call(this, item, trigger);
                  item = item || this.defaultItem;
                  this.label.innerHTML = item.innerHTML;
                }
              }]);
              return IconPicker2;
            }(_picker2.default);
            exports2.default = IconPicker;
          },
          /* 61 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var Tooltip = function() {
              function Tooltip2(quill, boundsContainer) {
                var _this = this;
                _classCallCheck(this, Tooltip2);
                this.quill = quill;
                this.boundsContainer = boundsContainer || document.body;
                this.root = quill.addContainer("ql-tooltip");
                this.root.innerHTML = this.constructor.TEMPLATE;
                if (this.quill.root === this.quill.scrollingContainer) {
                  this.quill.root.addEventListener("scroll", function() {
                    _this.root.style.marginTop = -1 * _this.quill.root.scrollTop + "px";
                  });
                }
                this.hide();
              }
              _createClass(Tooltip2, [{
                key: "hide",
                value: function hide() {
                  this.root.classList.add("ql-hidden");
                }
              }, {
                key: "position",
                value: function position(reference) {
                  var left = reference.left + reference.width / 2 - this.root.offsetWidth / 2;
                  var top = reference.bottom + this.quill.root.scrollTop;
                  this.root.style.left = left + "px";
                  this.root.style.top = top + "px";
                  this.root.classList.remove("ql-flip");
                  var containerBounds = this.boundsContainer.getBoundingClientRect();
                  var rootBounds = this.root.getBoundingClientRect();
                  var shift = 0;
                  if (rootBounds.right > containerBounds.right) {
                    shift = containerBounds.right - rootBounds.right;
                    this.root.style.left = left + shift + "px";
                  }
                  if (rootBounds.left < containerBounds.left) {
                    shift = containerBounds.left - rootBounds.left;
                    this.root.style.left = left + shift + "px";
                  }
                  if (rootBounds.bottom > containerBounds.bottom) {
                    var height = rootBounds.bottom - rootBounds.top;
                    var verticalShift = reference.bottom - reference.top + height;
                    this.root.style.top = top - verticalShift + "px";
                    this.root.classList.add("ql-flip");
                  }
                  return shift;
                }
              }, {
                key: "show",
                value: function show() {
                  this.root.classList.remove("ql-editing");
                  this.root.classList.remove("ql-hidden");
                }
              }]);
              return Tooltip2;
            }();
            exports2.default = Tooltip;
          },
          /* 62 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _slicedToArray = /* @__PURE__ */ function() {
              function sliceIterator(arr, i) {
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = void 0;
                try {
                  for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                    _arr.push(_s.value);
                    if (i && _arr.length === i) break;
                  }
                } catch (err) {
                  _d = true;
                  _e = err;
                } finally {
                  try {
                    if (!_n && _i["return"]) _i["return"]();
                  } finally {
                    if (_d) throw _e;
                  }
                }
                return _arr;
              }
              return function(arr, i) {
                if (Array.isArray(arr)) {
                  return arr;
                } else if (Symbol.iterator in Object(arr)) {
                  return sliceIterator(arr, i);
                } else {
                  throw new TypeError("Invalid attempt to destructure non-iterable instance");
                }
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            var _emitter = __webpack_require__(8);
            var _emitter2 = _interopRequireDefault(_emitter);
            var _base = __webpack_require__(43);
            var _base2 = _interopRequireDefault(_base);
            var _link = __webpack_require__(27);
            var _link2 = _interopRequireDefault(_link);
            var _selection = __webpack_require__(15);
            var _icons = __webpack_require__(41);
            var _icons2 = _interopRequireDefault(_icons);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var TOOLBAR_CONFIG = [[{ header: ["1", "2", "3", false] }], ["bold", "italic", "underline", "link"], [{ list: "ordered" }, { list: "bullet" }], ["clean"]];
            var SnowTheme = function(_BaseTheme) {
              _inherits(SnowTheme2, _BaseTheme);
              function SnowTheme2(quill, options) {
                _classCallCheck(this, SnowTheme2);
                if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
                  options.modules.toolbar.container = TOOLBAR_CONFIG;
                }
                var _this = _possibleConstructorReturn(this, (SnowTheme2.__proto__ || Object.getPrototypeOf(SnowTheme2)).call(this, quill, options));
                _this.quill.container.classList.add("ql-snow");
                return _this;
              }
              _createClass(SnowTheme2, [{
                key: "extendToolbar",
                value: function extendToolbar(toolbar) {
                  toolbar.container.classList.add("ql-snow");
                  this.buildButtons([].slice.call(toolbar.container.querySelectorAll("button")), _icons2.default);
                  this.buildPickers([].slice.call(toolbar.container.querySelectorAll("select")), _icons2.default);
                  this.tooltip = new SnowTooltip(this.quill, this.options.bounds);
                  if (toolbar.container.querySelector(".ql-link")) {
                    this.quill.keyboard.addBinding({ key: "K", shortKey: true }, function(range, context) {
                      toolbar.handlers["link"].call(toolbar, !context.format.link);
                    });
                  }
                }
              }]);
              return SnowTheme2;
            }(_base2.default);
            SnowTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
              modules: {
                toolbar: {
                  handlers: {
                    link: function link(value) {
                      if (value) {
                        var range = this.quill.getSelection();
                        if (range == null || range.length == 0) return;
                        var preview = this.quill.getText(range);
                        if (/^\S+@\S+\.\S+$/.test(preview) && preview.indexOf("mailto:") !== 0) {
                          preview = "mailto:" + preview;
                        }
                        var tooltip = this.quill.theme.tooltip;
                        tooltip.edit("link", preview);
                      } else {
                        this.quill.format("link", false);
                      }
                    }
                  }
                }
              }
            });
            var SnowTooltip = function(_BaseTooltip) {
              _inherits(SnowTooltip2, _BaseTooltip);
              function SnowTooltip2(quill, bounds) {
                _classCallCheck(this, SnowTooltip2);
                var _this2 = _possibleConstructorReturn(this, (SnowTooltip2.__proto__ || Object.getPrototypeOf(SnowTooltip2)).call(this, quill, bounds));
                _this2.preview = _this2.root.querySelector("a.ql-preview");
                return _this2;
              }
              _createClass(SnowTooltip2, [{
                key: "listen",
                value: function listen() {
                  var _this3 = this;
                  _get(SnowTooltip2.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip2.prototype), "listen", this).call(this);
                  this.root.querySelector("a.ql-action").addEventListener("click", function(event) {
                    if (_this3.root.classList.contains("ql-editing")) {
                      _this3.save();
                    } else {
                      _this3.edit("link", _this3.preview.textContent);
                    }
                    event.preventDefault();
                  });
                  this.root.querySelector("a.ql-remove").addEventListener("click", function(event) {
                    if (_this3.linkRange != null) {
                      var range = _this3.linkRange;
                      _this3.restoreFocus();
                      _this3.quill.formatText(range, "link", false, _emitter2.default.sources.USER);
                      delete _this3.linkRange;
                    }
                    event.preventDefault();
                    _this3.hide();
                  });
                  this.quill.on(_emitter2.default.events.SELECTION_CHANGE, function(range, oldRange, source) {
                    if (range == null) return;
                    if (range.length === 0 && source === _emitter2.default.sources.USER) {
                      var _quill$scroll$descend = _this3.quill.scroll.descendant(_link2.default, range.index), _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2), link = _quill$scroll$descend2[0], offset = _quill$scroll$descend2[1];
                      if (link != null) {
                        _this3.linkRange = new _selection.Range(range.index - offset, link.length());
                        var preview = _link2.default.formats(link.domNode);
                        _this3.preview.textContent = preview;
                        _this3.preview.setAttribute("href", preview);
                        _this3.show();
                        _this3.position(_this3.quill.getBounds(_this3.linkRange));
                        return;
                      }
                    } else {
                      delete _this3.linkRange;
                    }
                    _this3.hide();
                  });
                }
              }, {
                key: "show",
                value: function show() {
                  _get(SnowTooltip2.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip2.prototype), "show", this).call(this);
                  this.root.removeAttribute("data-mode");
                }
              }]);
              return SnowTooltip2;
            }(_base.BaseTooltip);
            SnowTooltip.TEMPLATE = ['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-action"></a>', '<a class="ql-remove"></a>'].join("");
            exports2.default = SnowTheme;
          },
          /* 63 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _core = __webpack_require__(29);
            var _core2 = _interopRequireDefault(_core);
            var _align = __webpack_require__(36);
            var _direction = __webpack_require__(38);
            var _indent = __webpack_require__(64);
            var _blockquote = __webpack_require__(65);
            var _blockquote2 = _interopRequireDefault(_blockquote);
            var _header = __webpack_require__(66);
            var _header2 = _interopRequireDefault(_header);
            var _list = __webpack_require__(67);
            var _list2 = _interopRequireDefault(_list);
            var _background = __webpack_require__(37);
            var _color = __webpack_require__(26);
            var _font = __webpack_require__(39);
            var _size = __webpack_require__(40);
            var _bold = __webpack_require__(56);
            var _bold2 = _interopRequireDefault(_bold);
            var _italic = __webpack_require__(68);
            var _italic2 = _interopRequireDefault(_italic);
            var _link = __webpack_require__(27);
            var _link2 = _interopRequireDefault(_link);
            var _script = __webpack_require__(69);
            var _script2 = _interopRequireDefault(_script);
            var _strike = __webpack_require__(70);
            var _strike2 = _interopRequireDefault(_strike);
            var _underline = __webpack_require__(71);
            var _underline2 = _interopRequireDefault(_underline);
            var _image = __webpack_require__(72);
            var _image2 = _interopRequireDefault(_image);
            var _video = __webpack_require__(73);
            var _video2 = _interopRequireDefault(_video);
            var _code = __webpack_require__(13);
            var _code2 = _interopRequireDefault(_code);
            var _formula = __webpack_require__(74);
            var _formula2 = _interopRequireDefault(_formula);
            var _syntax = __webpack_require__(75);
            var _syntax2 = _interopRequireDefault(_syntax);
            var _toolbar = __webpack_require__(57);
            var _toolbar2 = _interopRequireDefault(_toolbar);
            var _icons = __webpack_require__(41);
            var _icons2 = _interopRequireDefault(_icons);
            var _picker = __webpack_require__(28);
            var _picker2 = _interopRequireDefault(_picker);
            var _colorPicker = __webpack_require__(59);
            var _colorPicker2 = _interopRequireDefault(_colorPicker);
            var _iconPicker = __webpack_require__(60);
            var _iconPicker2 = _interopRequireDefault(_iconPicker);
            var _tooltip = __webpack_require__(61);
            var _tooltip2 = _interopRequireDefault(_tooltip);
            var _bubble = __webpack_require__(108);
            var _bubble2 = _interopRequireDefault(_bubble);
            var _snow = __webpack_require__(62);
            var _snow2 = _interopRequireDefault(_snow);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            _core2.default.register({
              "attributors/attribute/direction": _direction.DirectionAttribute,
              "attributors/class/align": _align.AlignClass,
              "attributors/class/background": _background.BackgroundClass,
              "attributors/class/color": _color.ColorClass,
              "attributors/class/direction": _direction.DirectionClass,
              "attributors/class/font": _font.FontClass,
              "attributors/class/size": _size.SizeClass,
              "attributors/style/align": _align.AlignStyle,
              "attributors/style/background": _background.BackgroundStyle,
              "attributors/style/color": _color.ColorStyle,
              "attributors/style/direction": _direction.DirectionStyle,
              "attributors/style/font": _font.FontStyle,
              "attributors/style/size": _size.SizeStyle
            }, true);
            _core2.default.register({
              "formats/align": _align.AlignClass,
              "formats/direction": _direction.DirectionClass,
              "formats/indent": _indent.IndentClass,
              "formats/background": _background.BackgroundStyle,
              "formats/color": _color.ColorStyle,
              "formats/font": _font.FontClass,
              "formats/size": _size.SizeClass,
              "formats/blockquote": _blockquote2.default,
              "formats/code-block": _code2.default,
              "formats/header": _header2.default,
              "formats/list": _list2.default,
              "formats/bold": _bold2.default,
              "formats/code": _code.Code,
              "formats/italic": _italic2.default,
              "formats/link": _link2.default,
              "formats/script": _script2.default,
              "formats/strike": _strike2.default,
              "formats/underline": _underline2.default,
              "formats/image": _image2.default,
              "formats/video": _video2.default,
              "formats/list/item": _list.ListItem,
              "modules/formula": _formula2.default,
              "modules/syntax": _syntax2.default,
              "modules/toolbar": _toolbar2.default,
              "themes/bubble": _bubble2.default,
              "themes/snow": _snow2.default,
              "ui/icons": _icons2.default,
              "ui/picker": _picker2.default,
              "ui/icon-picker": _iconPicker2.default,
              "ui/color-picker": _colorPicker2.default,
              "ui/tooltip": _tooltip2.default
            }, true);
            exports2.default = _core2.default;
          },
          /* 64 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.IndentClass = void 0;
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var IdentAttributor = function(_Parchment$Attributor) {
              _inherits(IdentAttributor2, _Parchment$Attributor);
              function IdentAttributor2() {
                _classCallCheck(this, IdentAttributor2);
                return _possibleConstructorReturn(this, (IdentAttributor2.__proto__ || Object.getPrototypeOf(IdentAttributor2)).apply(this, arguments));
              }
              _createClass(IdentAttributor2, [{
                key: "add",
                value: function add(node, value) {
                  if (value === "+1" || value === "-1") {
                    var indent = this.value(node) || 0;
                    value = value === "+1" ? indent + 1 : indent - 1;
                  }
                  if (value === 0) {
                    this.remove(node);
                    return true;
                  } else {
                    return _get(IdentAttributor2.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor2.prototype), "add", this).call(this, node, value);
                  }
                }
              }, {
                key: "canAdd",
                value: function canAdd(node, value) {
                  return _get(IdentAttributor2.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor2.prototype), "canAdd", this).call(this, node, value) || _get(IdentAttributor2.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor2.prototype), "canAdd", this).call(this, node, parseInt(value));
                }
              }, {
                key: "value",
                value: function value(node) {
                  return parseInt(_get(IdentAttributor2.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor2.prototype), "value", this).call(this, node)) || void 0;
                }
              }]);
              return IdentAttributor2;
            }(_parchment2.default.Attributor.Class);
            var IndentClass = new IdentAttributor("indent", "ql-indent", {
              scope: _parchment2.default.Scope.BLOCK,
              whitelist: [1, 2, 3, 4, 5, 6, 7, 8]
            });
            exports2.IndentClass = IndentClass;
          },
          /* 65 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Blockquote = function(_Block) {
              _inherits(Blockquote2, _Block);
              function Blockquote2() {
                _classCallCheck(this, Blockquote2);
                return _possibleConstructorReturn(this, (Blockquote2.__proto__ || Object.getPrototypeOf(Blockquote2)).apply(this, arguments));
              }
              return Blockquote2;
            }(_block2.default);
            Blockquote.blotName = "blockquote";
            Blockquote.tagName = "blockquote";
            exports2.default = Blockquote;
          },
          /* 66 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Header = function(_Block) {
              _inherits(Header2, _Block);
              function Header2() {
                _classCallCheck(this, Header2);
                return _possibleConstructorReturn(this, (Header2.__proto__ || Object.getPrototypeOf(Header2)).apply(this, arguments));
              }
              _createClass(Header2, null, [{
                key: "formats",
                value: function formats(domNode) {
                  return this.tagName.indexOf(domNode.tagName) + 1;
                }
              }]);
              return Header2;
            }(_block2.default);
            Header.blotName = "header";
            Header.tagName = ["H1", "H2", "H3", "H4", "H5", "H6"];
            exports2.default = Header;
          },
          /* 67 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = exports2.ListItem = void 0;
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _block = __webpack_require__(4);
            var _block2 = _interopRequireDefault(_block);
            var _container = __webpack_require__(25);
            var _container2 = _interopRequireDefault(_container);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _defineProperty(obj, key, value) {
              if (key in obj) {
                Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
              } else {
                obj[key] = value;
              }
              return obj;
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var ListItem = function(_Block) {
              _inherits(ListItem2, _Block);
              function ListItem2() {
                _classCallCheck(this, ListItem2);
                return _possibleConstructorReturn(this, (ListItem2.__proto__ || Object.getPrototypeOf(ListItem2)).apply(this, arguments));
              }
              _createClass(ListItem2, [{
                key: "format",
                value: function format(name, value) {
                  if (name === List.blotName && !value) {
                    this.replaceWith(_parchment2.default.create(this.statics.scope));
                  } else {
                    _get(ListItem2.prototype.__proto__ || Object.getPrototypeOf(ListItem2.prototype), "format", this).call(this, name, value);
                  }
                }
              }, {
                key: "remove",
                value: function remove() {
                  if (this.prev == null && this.next == null) {
                    this.parent.remove();
                  } else {
                    _get(ListItem2.prototype.__proto__ || Object.getPrototypeOf(ListItem2.prototype), "remove", this).call(this);
                  }
                }
              }, {
                key: "replaceWith",
                value: function replaceWith(name, value) {
                  this.parent.isolate(this.offset(this.parent), this.length());
                  if (name === this.parent.statics.blotName) {
                    this.parent.replaceWith(name, value);
                    return this;
                  } else {
                    this.parent.unwrap();
                    return _get(ListItem2.prototype.__proto__ || Object.getPrototypeOf(ListItem2.prototype), "replaceWith", this).call(this, name, value);
                  }
                }
              }], [{
                key: "formats",
                value: function formats(domNode) {
                  return domNode.tagName === this.tagName ? void 0 : _get(ListItem2.__proto__ || Object.getPrototypeOf(ListItem2), "formats", this).call(this, domNode);
                }
              }]);
              return ListItem2;
            }(_block2.default);
            ListItem.blotName = "list-item";
            ListItem.tagName = "LI";
            var List = function(_Container) {
              _inherits(List2, _Container);
              _createClass(List2, null, [{
                key: "create",
                value: function create(value) {
                  var tagName = value === "ordered" ? "OL" : "UL";
                  var node = _get(List2.__proto__ || Object.getPrototypeOf(List2), "create", this).call(this, tagName);
                  if (value === "checked" || value === "unchecked") {
                    node.setAttribute("data-checked", value === "checked");
                  }
                  return node;
                }
              }, {
                key: "formats",
                value: function formats(domNode) {
                  if (domNode.tagName === "OL") return "ordered";
                  if (domNode.tagName === "UL") {
                    if (domNode.hasAttribute("data-checked")) {
                      return domNode.getAttribute("data-checked") === "true" ? "checked" : "unchecked";
                    } else {
                      return "bullet";
                    }
                  }
                  return void 0;
                }
              }]);
              function List2(domNode) {
                _classCallCheck(this, List2);
                var _this2 = _possibleConstructorReturn(this, (List2.__proto__ || Object.getPrototypeOf(List2)).call(this, domNode));
                var listEventHandler = function listEventHandler2(e) {
                  if (e.target.parentNode !== domNode) return;
                  var format = _this2.statics.formats(domNode);
                  var blot = _parchment2.default.find(e.target);
                  if (format === "checked") {
                    blot.format("list", "unchecked");
                  } else if (format === "unchecked") {
                    blot.format("list", "checked");
                  }
                };
                domNode.addEventListener("touchstart", listEventHandler);
                domNode.addEventListener("mousedown", listEventHandler);
                return _this2;
              }
              _createClass(List2, [{
                key: "format",
                value: function format(name, value) {
                  if (this.children.length > 0) {
                    this.children.tail.format(name, value);
                  }
                }
              }, {
                key: "formats",
                value: function formats() {
                  return _defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));
                }
              }, {
                key: "insertBefore",
                value: function insertBefore(blot, ref2) {
                  if (blot instanceof ListItem) {
                    _get(List2.prototype.__proto__ || Object.getPrototypeOf(List2.prototype), "insertBefore", this).call(this, blot, ref2);
                  } else {
                    var index = ref2 == null ? this.length() : ref2.offset(this);
                    var after = this.split(index);
                    after.parent.insertBefore(blot, after);
                  }
                }
              }, {
                key: "optimize",
                value: function optimize(context) {
                  _get(List2.prototype.__proto__ || Object.getPrototypeOf(List2.prototype), "optimize", this).call(this, context);
                  var next = this.next;
                  if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName && next.domNode.getAttribute("data-checked") === this.domNode.getAttribute("data-checked")) {
                    next.moveChildren(this);
                    next.remove();
                  }
                }
              }, {
                key: "replace",
                value: function replace(target) {
                  if (target.statics.blotName !== this.statics.blotName) {
                    var item = _parchment2.default.create(this.statics.defaultChild);
                    target.moveChildren(item);
                    this.appendChild(item);
                  }
                  _get(List2.prototype.__proto__ || Object.getPrototypeOf(List2.prototype), "replace", this).call(this, target);
                }
              }]);
              return List2;
            }(_container2.default);
            List.blotName = "list";
            List.scope = _parchment2.default.Scope.BLOCK_BLOT;
            List.tagName = ["OL", "UL"];
            List.defaultChild = "list-item";
            List.allowedChildren = [ListItem];
            exports2.ListItem = ListItem;
            exports2.default = List;
          },
          /* 68 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _bold = __webpack_require__(56);
            var _bold2 = _interopRequireDefault(_bold);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Italic = function(_Bold) {
              _inherits(Italic2, _Bold);
              function Italic2() {
                _classCallCheck(this, Italic2);
                return _possibleConstructorReturn(this, (Italic2.__proto__ || Object.getPrototypeOf(Italic2)).apply(this, arguments));
              }
              return Italic2;
            }(_bold2.default);
            Italic.blotName = "italic";
            Italic.tagName = ["EM", "I"];
            exports2.default = Italic;
          },
          /* 69 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Script = function(_Inline) {
              _inherits(Script2, _Inline);
              function Script2() {
                _classCallCheck(this, Script2);
                return _possibleConstructorReturn(this, (Script2.__proto__ || Object.getPrototypeOf(Script2)).apply(this, arguments));
              }
              _createClass(Script2, null, [{
                key: "create",
                value: function create(value) {
                  if (value === "super") {
                    return document.createElement("sup");
                  } else if (value === "sub") {
                    return document.createElement("sub");
                  } else {
                    return _get(Script2.__proto__ || Object.getPrototypeOf(Script2), "create", this).call(this, value);
                  }
                }
              }, {
                key: "formats",
                value: function formats(domNode) {
                  if (domNode.tagName === "SUB") return "sub";
                  if (domNode.tagName === "SUP") return "super";
                  return void 0;
                }
              }]);
              return Script2;
            }(_inline2.default);
            Script.blotName = "script";
            Script.tagName = ["SUB", "SUP"];
            exports2.default = Script;
          },
          /* 70 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Strike = function(_Inline) {
              _inherits(Strike2, _Inline);
              function Strike2() {
                _classCallCheck(this, Strike2);
                return _possibleConstructorReturn(this, (Strike2.__proto__ || Object.getPrototypeOf(Strike2)).apply(this, arguments));
              }
              return Strike2;
            }(_inline2.default);
            Strike.blotName = "strike";
            Strike.tagName = "S";
            exports2.default = Strike;
          },
          /* 71 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _inline = __webpack_require__(6);
            var _inline2 = _interopRequireDefault(_inline);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var Underline = function(_Inline) {
              _inherits(Underline2, _Inline);
              function Underline2() {
                _classCallCheck(this, Underline2);
                return _possibleConstructorReturn(this, (Underline2.__proto__ || Object.getPrototypeOf(Underline2)).apply(this, arguments));
              }
              return Underline2;
            }(_inline2.default);
            Underline.blotName = "underline";
            Underline.tagName = "U";
            exports2.default = Underline;
          },
          /* 72 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _link = __webpack_require__(27);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var ATTRIBUTES = ["alt", "height", "width"];
            var Image = function(_Parchment$Embed) {
              _inherits(Image2, _Parchment$Embed);
              function Image2() {
                _classCallCheck(this, Image2);
                return _possibleConstructorReturn(this, (Image2.__proto__ || Object.getPrototypeOf(Image2)).apply(this, arguments));
              }
              _createClass(Image2, [{
                key: "format",
                value: function format(name, value) {
                  if (ATTRIBUTES.indexOf(name) > -1) {
                    if (value) {
                      this.domNode.setAttribute(name, value);
                    } else {
                      this.domNode.removeAttribute(name);
                    }
                  } else {
                    _get(Image2.prototype.__proto__ || Object.getPrototypeOf(Image2.prototype), "format", this).call(this, name, value);
                  }
                }
              }], [{
                key: "create",
                value: function create(value) {
                  var node = _get(Image2.__proto__ || Object.getPrototypeOf(Image2), "create", this).call(this, value);
                  if (typeof value === "string") {
                    node.setAttribute("src", this.sanitize(value));
                  }
                  return node;
                }
              }, {
                key: "formats",
                value: function formats(domNode) {
                  return ATTRIBUTES.reduce(function(formats2, attribute) {
                    if (domNode.hasAttribute(attribute)) {
                      formats2[attribute] = domNode.getAttribute(attribute);
                    }
                    return formats2;
                  }, {});
                }
              }, {
                key: "match",
                value: function match(url) {
                  return /\.(jpe?g|gif|png)$/.test(url) || /^data:image\/.+;base64/.test(url);
                }
              }, {
                key: "sanitize",
                value: function sanitize(url) {
                  return (0, _link.sanitize)(url, ["http", "https", "data"]) ? url : "//:0";
                }
              }, {
                key: "value",
                value: function value(domNode) {
                  return domNode.getAttribute("src");
                }
              }]);
              return Image2;
            }(_parchment2.default.Embed);
            Image.blotName = "image";
            Image.tagName = "IMG";
            exports2.default = Image;
          },
          /* 73 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _block = __webpack_require__(4);
            var _link = __webpack_require__(27);
            var _link2 = _interopRequireDefault(_link);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var ATTRIBUTES = ["height", "width"];
            var Video = function(_BlockEmbed) {
              _inherits(Video2, _BlockEmbed);
              function Video2() {
                _classCallCheck(this, Video2);
                return _possibleConstructorReturn(this, (Video2.__proto__ || Object.getPrototypeOf(Video2)).apply(this, arguments));
              }
              _createClass(Video2, [{
                key: "format",
                value: function format(name, value) {
                  if (ATTRIBUTES.indexOf(name) > -1) {
                    if (value) {
                      this.domNode.setAttribute(name, value);
                    } else {
                      this.domNode.removeAttribute(name);
                    }
                  } else {
                    _get(Video2.prototype.__proto__ || Object.getPrototypeOf(Video2.prototype), "format", this).call(this, name, value);
                  }
                }
              }], [{
                key: "create",
                value: function create(value) {
                  var node = _get(Video2.__proto__ || Object.getPrototypeOf(Video2), "create", this).call(this, value);
                  node.setAttribute("frameborder", "0");
                  node.setAttribute("allowfullscreen", true);
                  node.setAttribute("src", this.sanitize(value));
                  return node;
                }
              }, {
                key: "formats",
                value: function formats(domNode) {
                  return ATTRIBUTES.reduce(function(formats2, attribute) {
                    if (domNode.hasAttribute(attribute)) {
                      formats2[attribute] = domNode.getAttribute(attribute);
                    }
                    return formats2;
                  }, {});
                }
              }, {
                key: "sanitize",
                value: function sanitize(url) {
                  return _link2.default.sanitize(url);
                }
              }, {
                key: "value",
                value: function value(domNode) {
                  return domNode.getAttribute("src");
                }
              }]);
              return Video2;
            }(_block.BlockEmbed);
            Video.blotName = "video";
            Video.className = "ql-video";
            Video.tagName = "IFRAME";
            exports2.default = Video;
          },
          /* 74 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = exports2.FormulaBlot = void 0;
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _embed = __webpack_require__(35);
            var _embed2 = _interopRequireDefault(_embed);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var FormulaBlot = function(_Embed) {
              _inherits(FormulaBlot2, _Embed);
              function FormulaBlot2() {
                _classCallCheck(this, FormulaBlot2);
                return _possibleConstructorReturn(this, (FormulaBlot2.__proto__ || Object.getPrototypeOf(FormulaBlot2)).apply(this, arguments));
              }
              _createClass(FormulaBlot2, null, [{
                key: "create",
                value: function create(value) {
                  var node = _get(FormulaBlot2.__proto__ || Object.getPrototypeOf(FormulaBlot2), "create", this).call(this, value);
                  if (typeof value === "string") {
                    window.katex.render(value, node, {
                      throwOnError: false,
                      errorColor: "#f00"
                    });
                    node.setAttribute("data-value", value);
                  }
                  return node;
                }
              }, {
                key: "value",
                value: function value(domNode) {
                  return domNode.getAttribute("data-value");
                }
              }]);
              return FormulaBlot2;
            }(_embed2.default);
            FormulaBlot.blotName = "formula";
            FormulaBlot.className = "ql-formula";
            FormulaBlot.tagName = "SPAN";
            var Formula = function(_Module) {
              _inherits(Formula2, _Module);
              _createClass(Formula2, null, [{
                key: "register",
                value: function register() {
                  _quill2.default.register(FormulaBlot, true);
                }
              }]);
              function Formula2() {
                _classCallCheck(this, Formula2);
                var _this2 = _possibleConstructorReturn(this, (Formula2.__proto__ || Object.getPrototypeOf(Formula2)).call(this));
                if (window.katex == null) {
                  throw new Error("Formula module requires KaTeX.");
                }
                return _this2;
              }
              return Formula2;
            }(_module2.default);
            exports2.FormulaBlot = FormulaBlot;
            exports2.default = Formula;
          },
          /* 75 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = exports2.CodeToken = exports2.CodeBlock = void 0;
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _parchment = __webpack_require__(0);
            var _parchment2 = _interopRequireDefault(_parchment);
            var _quill = __webpack_require__(5);
            var _quill2 = _interopRequireDefault(_quill);
            var _module = __webpack_require__(9);
            var _module2 = _interopRequireDefault(_module);
            var _code = __webpack_require__(13);
            var _code2 = _interopRequireDefault(_code);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var SyntaxCodeBlock = function(_CodeBlock) {
              _inherits(SyntaxCodeBlock2, _CodeBlock);
              function SyntaxCodeBlock2() {
                _classCallCheck(this, SyntaxCodeBlock2);
                return _possibleConstructorReturn(this, (SyntaxCodeBlock2.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock2)).apply(this, arguments));
              }
              _createClass(SyntaxCodeBlock2, [{
                key: "replaceWith",
                value: function replaceWith(block) {
                  this.domNode.textContent = this.domNode.textContent;
                  this.attach();
                  _get(SyntaxCodeBlock2.prototype.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock2.prototype), "replaceWith", this).call(this, block);
                }
              }, {
                key: "highlight",
                value: function highlight(_highlight) {
                  var text = this.domNode.textContent;
                  if (this.cachedText !== text) {
                    if (text.trim().length > 0 || this.cachedText == null) {
                      this.domNode.innerHTML = _highlight(text);
                      this.domNode.normalize();
                      this.attach();
                    }
                    this.cachedText = text;
                  }
                }
              }]);
              return SyntaxCodeBlock2;
            }(_code2.default);
            SyntaxCodeBlock.className = "ql-syntax";
            var CodeToken = new _parchment2.default.Attributor.Class("token", "hljs", {
              scope: _parchment2.default.Scope.INLINE
            });
            var Syntax = function(_Module) {
              _inherits(Syntax2, _Module);
              _createClass(Syntax2, null, [{
                key: "register",
                value: function register() {
                  _quill2.default.register(CodeToken, true);
                  _quill2.default.register(SyntaxCodeBlock, true);
                }
              }]);
              function Syntax2(quill, options) {
                _classCallCheck(this, Syntax2);
                var _this2 = _possibleConstructorReturn(this, (Syntax2.__proto__ || Object.getPrototypeOf(Syntax2)).call(this, quill, options));
                if (typeof _this2.options.highlight !== "function") {
                  throw new Error("Syntax module requires highlight.js. Please include the library on the page before Quill.");
                }
                var timer = null;
                _this2.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function() {
                  clearTimeout(timer);
                  timer = setTimeout(function() {
                    _this2.highlight();
                    timer = null;
                  }, _this2.options.interval);
                });
                _this2.highlight();
                return _this2;
              }
              _createClass(Syntax2, [{
                key: "highlight",
                value: function highlight() {
                  var _this3 = this;
                  if (this.quill.selection.composing) return;
                  this.quill.update(_quill2.default.sources.USER);
                  var range = this.quill.getSelection();
                  this.quill.scroll.descendants(SyntaxCodeBlock).forEach(function(code) {
                    code.highlight(_this3.options.highlight);
                  });
                  this.quill.update(_quill2.default.sources.SILENT);
                  if (range != null) {
                    this.quill.setSelection(range, _quill2.default.sources.SILENT);
                  }
                }
              }]);
              return Syntax2;
            }(_module2.default);
            Syntax.DEFAULTS = {
              highlight: function() {
                if (window.hljs == null) return null;
                return function(text) {
                  var result = window.hljs.highlightAuto(text);
                  return result.value;
                };
              }(),
              interval: 1e3
            };
            exports2.CodeBlock = SyntaxCodeBlock;
            exports2.CodeToken = CodeToken;
            exports2.default = Syntax;
          },
          /* 76 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>';
          },
          /* 77 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>';
          },
          /* 78 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>';
          },
          /* 79 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>';
          },
          /* 80 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <g class="ql-fill ql-color-label"> <polygon points="6 6.868 6 6 5 6 5 7 5.942 7 6 6.868"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points="6.817 5 6 5 6 6 6.38 6 6.817 5"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points="4 11.439 4 11 3 11 3 12 3.755 12 4 11.439"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points="4.63 10 4 10 4 11 4.192 11 4.63 10"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points="13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points="12 6.868 12 6 11.62 6 12 6.868"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points="12.933 9 13 9 13 8 12.495 8 12.933 9"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points="5.5 13 9 5 12.5 13"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>';
          },
          /* 81 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <rect class="ql-fill ql-stroke" height=3 width=3 x=4 y=5></rect> <rect class="ql-fill ql-stroke" height=3 width=3 x=11 y=5></rect> <path class="ql-even ql-fill ql-stroke" d=M7,8c0,4.031-3,5-3,5></path> <path class="ql-even ql-fill ql-stroke" d=M14,8c0,4.031-3,5-3,5></path> </svg>';
          },
          /* 82 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>';
          },
          /* 83 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg class="" viewbox="0 0 18 18"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>';
          },
          /* 84 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class="ql-color-label ql-stroke ql-transparent" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points="5.5 11 9 3 12.5 11"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>';
          },
          /* 85 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="3 11 5 9 3 7 3 11"></polygon> <line class="ql-stroke ql-fill" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>';
          },
          /* 86 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <polygon class="ql-stroke ql-fill" points="15 12 13 10 15 8 15 12"></polygon> <line class="ql-stroke ql-fill" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>';
          },
          /* 87 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>';
          },
          /* 88 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>';
          },
          /* 89 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>';
          },
          /* 90 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform="translate(24 18) rotate(-180)"/> </svg>';
          },
          /* 91 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>';
          },
          /* 92 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewBox="0 0 18 18"> <path class=ql-fill d=M10,4V14a1,1,0,0,1-2,0V10H3v4a1,1,0,0,1-2,0V4A1,1,0,0,1,3,4V8H8V4a1,1,0,0,1,2,0Zm6.06787,9.209H14.98975V7.59863a.54085.54085,0,0,0-.605-.60547h-.62744a1.01119,1.01119,0,0,0-.748.29688L11.645,8.56641a.5435.5435,0,0,0-.022.8584l.28613.30762a.53861.53861,0,0,0,.84717.0332l.09912-.08789a1.2137,1.2137,0,0,0,.2417-.35254h.02246s-.01123.30859-.01123.60547V13.209H12.041a.54085.54085,0,0,0-.605.60547v.43945a.54085.54085,0,0,0,.605.60547h4.02686a.54085.54085,0,0,0,.605-.60547v-.43945A.54085.54085,0,0,0,16.06787,13.209Z /> </svg>';
          },
          /* 93 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewBox="0 0 18 18"> <path class=ql-fill d=M16.73975,13.81445v.43945a.54085.54085,0,0,1-.605.60547H11.855a.58392.58392,0,0,1-.64893-.60547V14.0127c0-2.90527,3.39941-3.42187,3.39941-4.55469a.77675.77675,0,0,0-.84717-.78125,1.17684,1.17684,0,0,0-.83594.38477c-.2749.26367-.561.374-.85791.13184l-.4292-.34082c-.30811-.24219-.38525-.51758-.1543-.81445a2.97155,2.97155,0,0,1,2.45361-1.17676,2.45393,2.45393,0,0,1,2.68408,2.40918c0,2.45312-3.1792,2.92676-3.27832,3.93848h2.79443A.54085.54085,0,0,1,16.73975,13.81445ZM9,3A.99974.99974,0,0,0,8,4V8H3V4A1,1,0,0,0,1,4V14a1,1,0,0,0,2,0V10H8v4a1,1,0,0,0,2,0V4A.99974.99974,0,0,0,9,3Z /> </svg>';
          },
          /* 94 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>';
          },
          /* 95 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class="ql-even ql-fill" points="5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12"></polyline> </svg>';
          },
          /* 96 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class="ql-fill ql-stroke" points="3 7 3 11 5 9 3 7"></polyline> </svg>';
          },
          /* 97 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points="5 7 5 11 3 9 5 7"></polyline> </svg>';
          },
          /* 98 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class="ql-even ql-stroke" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class="ql-even ql-stroke" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>';
          },
          /* 99 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class="ql-stroke ql-thin" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class="ql-stroke ql-thin" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class="ql-stroke ql-thin" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>';
          },
          /* 100 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>';
          },
          /* 101 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg class="" viewbox="0 0 18 18"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points="3 4 4 5 6 3"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points="3 14 4 15 6 13"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points="3 9 4 10 6 8"></polyline> </svg>';
          },
          /* 102 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>';
          },
          /* 103 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>';
          },
          /* 104 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <line class="ql-stroke ql-thin" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>';
          },
          /* 105 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>';
          },
          /* 106 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>';
          },
          /* 107 */
          /***/
          function(module2, exports2) {
            module2.exports = '<svg viewbox="0 0 18 18"> <polygon class=ql-stroke points="7 11 9 13 11 11 7 11"></polygon> <polygon class=ql-stroke points="7 7 9 5 11 7 7 7"></polygon> </svg>';
          },
          /* 108 */
          /***/
          function(module2, exports2, __webpack_require__) {
            "use strict";
            Object.defineProperty(exports2, "__esModule", {
              value: true
            });
            exports2.default = exports2.BubbleTooltip = void 0;
            var _get = function get(object, property, receiver) {
              if (object === null) object = Function.prototype;
              var desc = Object.getOwnPropertyDescriptor(object, property);
              if (desc === void 0) {
                var parent = Object.getPrototypeOf(object);
                if (parent === null) {
                  return void 0;
                } else {
                  return get(parent, property, receiver);
                }
              } else if ("value" in desc) {
                return desc.value;
              } else {
                var getter = desc.get;
                if (getter === void 0) {
                  return void 0;
                }
                return getter.call(receiver);
              }
            };
            var _createClass = /* @__PURE__ */ function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor) descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);
                if (staticProps) defineProperties(Constructor, staticProps);
                return Constructor;
              };
            }();
            var _extend = __webpack_require__(3);
            var _extend2 = _interopRequireDefault(_extend);
            var _emitter = __webpack_require__(8);
            var _emitter2 = _interopRequireDefault(_emitter);
            var _base = __webpack_require__(43);
            var _base2 = _interopRequireDefault(_base);
            var _selection = __webpack_require__(15);
            var _icons = __webpack_require__(41);
            var _icons2 = _interopRequireDefault(_icons);
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : { default: obj };
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            function _possibleConstructorReturn(self2, call) {
              if (!self2) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }
              return call && (typeof call === "object" || typeof call === "function") ? call : self2;
            }
            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
              }
              subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
              if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            }
            var TOOLBAR_CONFIG = [["bold", "italic", "link"], [{ header: 1 }, { header: 2 }, "blockquote"]];
            var BubbleTheme = function(_BaseTheme) {
              _inherits(BubbleTheme2, _BaseTheme);
              function BubbleTheme2(quill, options) {
                _classCallCheck(this, BubbleTheme2);
                if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
                  options.modules.toolbar.container = TOOLBAR_CONFIG;
                }
                var _this = _possibleConstructorReturn(this, (BubbleTheme2.__proto__ || Object.getPrototypeOf(BubbleTheme2)).call(this, quill, options));
                _this.quill.container.classList.add("ql-bubble");
                return _this;
              }
              _createClass(BubbleTheme2, [{
                key: "extendToolbar",
                value: function extendToolbar(toolbar) {
                  this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);
                  this.tooltip.root.appendChild(toolbar.container);
                  this.buildButtons([].slice.call(toolbar.container.querySelectorAll("button")), _icons2.default);
                  this.buildPickers([].slice.call(toolbar.container.querySelectorAll("select")), _icons2.default);
                }
              }]);
              return BubbleTheme2;
            }(_base2.default);
            BubbleTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
              modules: {
                toolbar: {
                  handlers: {
                    link: function link(value) {
                      if (!value) {
                        this.quill.format("link", false);
                      } else {
                        this.quill.theme.tooltip.edit();
                      }
                    }
                  }
                }
              }
            });
            var BubbleTooltip = function(_BaseTooltip) {
              _inherits(BubbleTooltip2, _BaseTooltip);
              function BubbleTooltip2(quill, bounds) {
                _classCallCheck(this, BubbleTooltip2);
                var _this2 = _possibleConstructorReturn(this, (BubbleTooltip2.__proto__ || Object.getPrototypeOf(BubbleTooltip2)).call(this, quill, bounds));
                _this2.quill.on(_emitter2.default.events.EDITOR_CHANGE, function(type, range, oldRange, source) {
                  if (type !== _emitter2.default.events.SELECTION_CHANGE) return;
                  if (range != null && range.length > 0 && source === _emitter2.default.sources.USER) {
                    _this2.show();
                    _this2.root.style.left = "0px";
                    _this2.root.style.width = "";
                    _this2.root.style.width = _this2.root.offsetWidth + "px";
                    var lines = _this2.quill.getLines(range.index, range.length);
                    if (lines.length === 1) {
                      _this2.position(_this2.quill.getBounds(range));
                    } else {
                      var lastLine = lines[lines.length - 1];
                      var index = _this2.quill.getIndex(lastLine);
                      var length = Math.min(lastLine.length() - 1, range.index + range.length - index);
                      var _bounds = _this2.quill.getBounds(new _selection.Range(index, length));
                      _this2.position(_bounds);
                    }
                  } else if (document.activeElement !== _this2.textbox && _this2.quill.hasFocus()) {
                    _this2.hide();
                  }
                });
                return _this2;
              }
              _createClass(BubbleTooltip2, [{
                key: "listen",
                value: function listen() {
                  var _this3 = this;
                  _get(BubbleTooltip2.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip2.prototype), "listen", this).call(this);
                  this.root.querySelector(".ql-close").addEventListener("click", function() {
                    _this3.root.classList.remove("ql-editing");
                  });
                  this.quill.on(_emitter2.default.events.SCROLL_OPTIMIZE, function() {
                    setTimeout(function() {
                      if (_this3.root.classList.contains("ql-hidden")) return;
                      var range = _this3.quill.getSelection();
                      if (range != null) {
                        _this3.position(_this3.quill.getBounds(range));
                      }
                    }, 1);
                  });
                }
              }, {
                key: "cancel",
                value: function cancel() {
                  this.show();
                }
              }, {
                key: "position",
                value: function position(reference) {
                  var shift = _get(BubbleTooltip2.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip2.prototype), "position", this).call(this, reference);
                  var arrow = this.root.querySelector(".ql-tooltip-arrow");
                  arrow.style.marginLeft = "";
                  if (shift === 0) return shift;
                  arrow.style.marginLeft = -1 * shift - arrow.offsetWidth / 2 + "px";
                }
              }]);
              return BubbleTooltip2;
            }(_base.BaseTooltip);
            BubbleTooltip.TEMPLATE = ['<span class="ql-tooltip-arrow"></span>', '<div class="ql-tooltip-editor">', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-close"></a>', "</div>"].join("");
            exports2.BubbleTooltip = BubbleTooltip;
            exports2.default = BubbleTheme;
          },
          /* 109 */
          /***/
          function(module2, exports2, __webpack_require__) {
            module2.exports = __webpack_require__(63);
          }
          /******/
        ])["default"]
      );
    });
  }
});

// node_modules/react-quill/lib/index.js
var require_lib = __commonJS({
  "node_modules/react-quill/lib/index.js"(exports, module) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __spreadArrays = exports && exports.__spreadArrays || function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var react_1 = __importDefault(require_react());
    var react_dom_1 = __importDefault(require_react_dom());
    var isEqual_1 = __importDefault(require_isEqual());
    var quill_1 = __importDefault(require_quill());
    var ReactQuill2 = (
      /** @class */
      function(_super) {
        __extends(ReactQuill3, _super);
        function ReactQuill3(props) {
          var _this = _super.call(this, props) || this;
          _this.dirtyProps = [
            "modules",
            "formats",
            "bounds",
            "theme",
            "children"
          ];
          _this.cleanProps = [
            "id",
            "className",
            "style",
            "placeholder",
            "tabIndex",
            "onChange",
            "onChangeSelection",
            "onFocus",
            "onBlur",
            "onKeyPress",
            "onKeyDown",
            "onKeyUp"
          ];
          _this.state = {
            generation: 0
          };
          _this.selection = null;
          _this.onEditorChange = function(eventName, rangeOrDelta, oldRangeOrDelta, source) {
            var _a, _b, _c, _d;
            if (eventName === "text-change") {
              (_b = (_a = _this).onEditorChangeText) === null || _b === void 0 ? void 0 : _b.call(_a, _this.editor.root.innerHTML, rangeOrDelta, source, _this.unprivilegedEditor);
            } else if (eventName === "selection-change") {
              (_d = (_c = _this).onEditorChangeSelection) === null || _d === void 0 ? void 0 : _d.call(_c, rangeOrDelta, source, _this.unprivilegedEditor);
            }
          };
          var value = _this.isControlled() ? props.value : props.defaultValue;
          _this.value = value !== null && value !== void 0 ? value : "";
          return _this;
        }
        ReactQuill3.prototype.validateProps = function(props) {
          var _a;
          if (react_1.default.Children.count(props.children) > 1)
            throw new Error("The Quill editing area can only be composed of a single React element.");
          if (react_1.default.Children.count(props.children)) {
            var child = react_1.default.Children.only(props.children);
            if (((_a = child) === null || _a === void 0 ? void 0 : _a.type) === "textarea")
              throw new Error("Quill does not support editing on a <textarea>. Use a <div> instead.");
          }
          if (this.lastDeltaChangeSet && props.value === this.lastDeltaChangeSet)
            throw new Error("You are passing the `delta` object from the `onChange` event back as `value`. You most probably want `editor.getContents()` instead. See: https://github.com/zenoamaro/react-quill#using-deltas");
        };
        ReactQuill3.prototype.shouldComponentUpdate = function(nextProps, nextState) {
          var _this = this;
          var _a;
          this.validateProps(nextProps);
          if (!this.editor || this.state.generation !== nextState.generation) {
            return true;
          }
          if ("value" in nextProps) {
            var prevContents = this.getEditorContents();
            var nextContents = (_a = nextProps.value, _a !== null && _a !== void 0 ? _a : "");
            if (!this.isEqualValue(nextContents, prevContents)) {
              this.setEditorContents(this.editor, nextContents);
            }
          }
          if (nextProps.readOnly !== this.props.readOnly) {
            this.setEditorReadOnly(this.editor, nextProps.readOnly);
          }
          return __spreadArrays(this.cleanProps, this.dirtyProps).some(function(prop) {
            return !isEqual_1.default(nextProps[prop], _this.props[prop]);
          });
        };
        ReactQuill3.prototype.shouldComponentRegenerate = function(nextProps) {
          var _this = this;
          return this.dirtyProps.some(function(prop) {
            return !isEqual_1.default(nextProps[prop], _this.props[prop]);
          });
        };
        ReactQuill3.prototype.componentDidMount = function() {
          this.instantiateEditor();
          this.setEditorContents(this.editor, this.getEditorContents());
        };
        ReactQuill3.prototype.componentWillUnmount = function() {
          this.destroyEditor();
        };
        ReactQuill3.prototype.componentDidUpdate = function(prevProps, prevState) {
          var _this = this;
          if (this.editor && this.shouldComponentRegenerate(prevProps)) {
            var delta = this.editor.getContents();
            var selection = this.editor.getSelection();
            this.regenerationSnapshot = { delta, selection };
            this.setState({ generation: this.state.generation + 1 });
            this.destroyEditor();
          }
          if (this.state.generation !== prevState.generation) {
            var _a = this.regenerationSnapshot, delta = _a.delta, selection_1 = _a.selection;
            delete this.regenerationSnapshot;
            this.instantiateEditor();
            var editor_1 = this.editor;
            editor_1.setContents(delta);
            postpone(function() {
              return _this.setEditorSelection(editor_1, selection_1);
            });
          }
        };
        ReactQuill3.prototype.instantiateEditor = function() {
          if (this.editor) {
            this.hookEditor(this.editor);
          } else {
            this.editor = this.createEditor(this.getEditingArea(), this.getEditorConfig());
          }
        };
        ReactQuill3.prototype.destroyEditor = function() {
          if (!this.editor)
            return;
          this.unhookEditor(this.editor);
        };
        ReactQuill3.prototype.isControlled = function() {
          return "value" in this.props;
        };
        ReactQuill3.prototype.getEditorConfig = function() {
          return {
            bounds: this.props.bounds,
            formats: this.props.formats,
            modules: this.props.modules,
            placeholder: this.props.placeholder,
            readOnly: this.props.readOnly,
            scrollingContainer: this.props.scrollingContainer,
            tabIndex: this.props.tabIndex,
            theme: this.props.theme
          };
        };
        ReactQuill3.prototype.getEditor = function() {
          if (!this.editor)
            throw new Error("Accessing non-instantiated editor");
          return this.editor;
        };
        ReactQuill3.prototype.createEditor = function(element, config) {
          var editor = new quill_1.default(element, config);
          if (config.tabIndex != null) {
            this.setEditorTabIndex(editor, config.tabIndex);
          }
          this.hookEditor(editor);
          return editor;
        };
        ReactQuill3.prototype.hookEditor = function(editor) {
          this.unprivilegedEditor = this.makeUnprivilegedEditor(editor);
          editor.on("editor-change", this.onEditorChange);
        };
        ReactQuill3.prototype.unhookEditor = function(editor) {
          editor.off("editor-change", this.onEditorChange);
        };
        ReactQuill3.prototype.getEditorContents = function() {
          return this.value;
        };
        ReactQuill3.prototype.getEditorSelection = function() {
          return this.selection;
        };
        ReactQuill3.prototype.isDelta = function(value) {
          return value && value.ops;
        };
        ReactQuill3.prototype.isEqualValue = function(value, nextValue) {
          if (this.isDelta(value) && this.isDelta(nextValue)) {
            return isEqual_1.default(value.ops, nextValue.ops);
          } else {
            return isEqual_1.default(value, nextValue);
          }
        };
        ReactQuill3.prototype.setEditorContents = function(editor, value) {
          var _this = this;
          this.value = value;
          var sel = this.getEditorSelection();
          if (typeof value === "string") {
            editor.setContents(editor.clipboard.convert(value));
          } else {
            editor.setContents(value);
          }
          postpone(function() {
            return _this.setEditorSelection(editor, sel);
          });
        };
        ReactQuill3.prototype.setEditorSelection = function(editor, range) {
          this.selection = range;
          if (range) {
            var length_1 = editor.getLength();
            range.index = Math.max(0, Math.min(range.index, length_1 - 1));
            range.length = Math.max(0, Math.min(range.length, length_1 - 1 - range.index));
            editor.setSelection(range);
          }
        };
        ReactQuill3.prototype.setEditorTabIndex = function(editor, tabIndex) {
          var _a, _b;
          if ((_b = (_a = editor) === null || _a === void 0 ? void 0 : _a.scroll) === null || _b === void 0 ? void 0 : _b.domNode) {
            editor.scroll.domNode.tabIndex = tabIndex;
          }
        };
        ReactQuill3.prototype.setEditorReadOnly = function(editor, value) {
          if (value) {
            editor.disable();
          } else {
            editor.enable();
          }
        };
        ReactQuill3.prototype.makeUnprivilegedEditor = function(editor) {
          var e = editor;
          return {
            getHTML: function() {
              return e.root.innerHTML;
            },
            getLength: e.getLength.bind(e),
            getText: e.getText.bind(e),
            getContents: e.getContents.bind(e),
            getSelection: e.getSelection.bind(e),
            getBounds: e.getBounds.bind(e)
          };
        };
        ReactQuill3.prototype.getEditingArea = function() {
          if (!this.editingArea) {
            throw new Error("Instantiating on missing editing area");
          }
          var element = react_dom_1.default.findDOMNode(this.editingArea);
          if (!element) {
            throw new Error("Cannot find element for editing area");
          }
          if (element.nodeType === 3) {
            throw new Error("Editing area cannot be a text node");
          }
          return element;
        };
        ReactQuill3.prototype.renderEditingArea = function() {
          var _this = this;
          var _a = this.props, children = _a.children, preserveWhitespace = _a.preserveWhitespace;
          var generation = this.state.generation;
          var properties = {
            key: generation,
            ref: function(instance) {
              _this.editingArea = instance;
            }
          };
          if (react_1.default.Children.count(children)) {
            return react_1.default.cloneElement(react_1.default.Children.only(children), properties);
          }
          return preserveWhitespace ? react_1.default.createElement("pre", __assign({}, properties)) : react_1.default.createElement("div", __assign({}, properties));
        };
        ReactQuill3.prototype.render = function() {
          var _a;
          return react_1.default.createElement("div", { id: this.props.id, style: this.props.style, key: this.state.generation, className: "quill " + (_a = this.props.className, _a !== null && _a !== void 0 ? _a : ""), onKeyPress: this.props.onKeyPress, onKeyDown: this.props.onKeyDown, onKeyUp: this.props.onKeyUp }, this.renderEditingArea());
        };
        ReactQuill3.prototype.onEditorChangeText = function(value, delta, source, editor) {
          var _a, _b;
          if (!this.editor)
            return;
          var nextContents = this.isDelta(this.value) ? editor.getContents() : editor.getHTML();
          if (nextContents !== this.getEditorContents()) {
            this.lastDeltaChangeSet = delta;
            this.value = nextContents;
            (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, value, delta, source, editor);
          }
        };
        ReactQuill3.prototype.onEditorChangeSelection = function(nextSelection, source, editor) {
          var _a, _b, _c, _d, _e, _f;
          if (!this.editor)
            return;
          var currentSelection = this.getEditorSelection();
          var hasGainedFocus = !currentSelection && nextSelection;
          var hasLostFocus = currentSelection && !nextSelection;
          if (isEqual_1.default(nextSelection, currentSelection))
            return;
          this.selection = nextSelection;
          (_b = (_a = this.props).onChangeSelection) === null || _b === void 0 ? void 0 : _b.call(_a, nextSelection, source, editor);
          if (hasGainedFocus) {
            (_d = (_c = this.props).onFocus) === null || _d === void 0 ? void 0 : _d.call(_c, nextSelection, source, editor);
          } else if (hasLostFocus) {
            (_f = (_e = this.props).onBlur) === null || _f === void 0 ? void 0 : _f.call(_e, currentSelection, source, editor);
          }
        };
        ReactQuill3.prototype.focus = function() {
          if (!this.editor)
            return;
          this.editor.focus();
        };
        ReactQuill3.prototype.blur = function() {
          if (!this.editor)
            return;
          this.selection = null;
          this.editor.blur();
        };
        ReactQuill3.displayName = "React Quill";
        ReactQuill3.Quill = quill_1.default;
        ReactQuill3.defaultProps = {
          theme: "snow",
          modules: {},
          readOnly: false
        };
        return ReactQuill3;
      }(react_1.default.Component)
    );
    function postpone(fn) {
      Promise.resolve().then(fn);
    }
    module.exports = ReactQuill2;
  }
});

// node_modules/flinntech/src/components/templateTech/baseClasses/BaseComponent.jsx
var import_react = __toESM(require_react());

// node_modules/flinntech/src/components/serviceTech/Util/binder.js
var Binder = class {
  constructor() {
    __publicField(this, "doNotInclude", ["render", "forceUpdate", "setState"]);
  }
  // Default list of methods to exclude from binding.
  /**
   * Binds all methods of a given class instance to itself, except those in the exclusion list.
   * @param {object} comp - The class instance whose methods will be bound.
   */
  bind(comp) {
    var _a;
    let proto = Object.getPrototypeOf(comp);
    while (proto && proto !== Object.prototype) {
      const methodNames = Object.getOwnPropertyNames(proto).filter((prop) => {
        return typeof proto[prop] === "function" && prop !== "constructor";
      });
      for (let methodName of methodNames) {
        if (!this.doNotInclude.includes(methodName)) {
          comp[methodName] = (_a = comp[methodName]) == null ? void 0 : _a.bind(comp);
        }
      }
      proto = Object.getPrototypeOf(proto);
    }
  }
  /**
   * Sets a new list of methods to exclude from binding.
   * @param {Array<string>} list - Array of method names to exclude.
   */
  setDoNotIncludeList(list) {
    this.doNotInclude = list;
  }
  /**
   * Adds a method name to the exclusion list.
   * @param {string} str - Method name to add to the exclusion list.
   */
  leaveOut(str) {
    this.doNotInclude.push(str);
  }
  /**
   * Removes a method name from the exclusion list.
   * @param {string} str - Method name to remove from the exclusion list.
   */
  include(str) {
    this.doNotInclude = this.doNotInclude.filter((s) => s !== str);
  }
};
var binder = new Binder();

// node_modules/flinntech/src/components/templateTech/observers/baseObserver.jsx
var BaseObserver = class {
  constructor() {
    __publicField(this, "list", []);
    binder.bind(this);
  }
  setList(list) {
    list = list.filter((f) => f !== void 0);
    this.list = list;
  }
  getList() {
    return this.list;
  }
  // Method to subscribe to the observer
  subscribe(observerFunction) {
    if (observerFunction) {
      this.list.push(observerFunction);
    }
  }
  // Method to unsubscribe from the observer
  unsubscribe(observerFunction) {
    this.list = this.list.filter((fn) => fn !== observerFunction);
  }
  // Method to run all subscribed functions
  run(...args) {
    for (let observerFunction of this.list) {
      if (observerFunction) {
        observerFunction(...args);
      }
    }
  }
};
var baseObserver_default = BaseObserver;

// node_modules/flinntech/src/components/templateTech/baseClasses/HtmlBuilderBaseClass.jsx
var import_jsx_runtime = __toESM(require_jsx_runtime());
var HtmlBuilderBaseClass = class {
  /**
   * Constructor to initialize the HtmlBuilderBaseClass instance.
   * @param {Object} obj - Initial properties and content for the HTML element.
   */
  constructor(obj) {
    binder.bind(this);
    this.props = { ...obj };
    this.content = obj.content || "";
    this.type = "div";
  }
  /**
   * Sets the HTML element type (e.g., div, span, button).
   * @param {string} type - The type of the HTML element.
   */
  setHtmlType(type) {
    this.type = type;
  }
  /**
   * Gets the current HTML element type.
   * @returns {string} - The type of the HTML element.
   */
  getHtmlType() {
    return this.type;
  }
  /**
   * Sets a specific property of the HTML element.
   * @param {string} name - The name of the property.
   * @param {*} val - The value of the property.
   */
  setProp(name, val) {
    this.props[name] = val;
  }
  /**
   * Sets all properties of the HTML element.
   * @param {Object} p - The properties object.
   */
  setProps(p) {
    this.props = { ...p };
    if (p.content) {
      this.content = p.content;
    }
  }
  /**
   * Updates properties of the HTML element by merging with existing properties.
   * @param {Object} p - The properties object to merge.
   */
  updateProps(p) {
    this.props = { ...this.props, ...p };
    if (p.content) {
      this.content = p.content;
    }
  }
  /**
   * Adds properties to the HTML element.
   * @param {Object} p - The properties object to add.
   */
  addProps(p) {
    this.props = { ...this.props, ...p };
    if (p.content) {
      this.content = p.content;
    }
  }
  /**
   * Retrieves all properties of the HTML element.
   * @returns {Object} - The properties object.
   */
  getProps() {
    return this.props;
  }
  /**
   * Retrieves a specific property of the HTML element.
   * @param {string} name - The name of the property.
   * @returns {*} - The value of the property.
   */
  getProp(name) {
    return this.props[name];
  }
  /**
   * Sets the style object of the HTML element.
   * @param {Object} style - The style object.
   */
  setStyle(style) {
    this.props.style = style;
  }
  /**
   * Updates the style of the HTML element by merging with the existing style.
   * @param {Object} s - The style object to merge.
   */
  updateStyle(s) {
    this.props.style = { ...this.props.style, ...s };
  }
  /**
   * Retrieves the style object of the HTML element.
   * @returns {Object} - The style object.
   */
  getStyle() {
    return this.props.style;
  }
  /**
   * Sets the CSS class name of the HTML element.
   * @param {string} c - The class name.
   */
  setClass(c) {
    this.props.className = c;
  }
  /**
   * Retrieves the CSS class name of the HTML element.
   * @returns {string} - The class name.
   */
  getClass() {
    return this.props.className;
  }
  /**
   * Sets the onChange event handler of the HTML element.
   * @param {Function} onChange - The event handler function.
   */
  setOnChange(onChange) {
    this.props.onChange = onChange;
  }
  /**
   * Sets the onClick event handler of the HTML element.
   * @param {Function} onClick - The event handler function.
   */
  setOnClick(onClick) {
    this.props.onClick = onClick;
  }
  /**
   * Retrieves the onClick event handler of the HTML element.
   * @returns {Function} - The onClick event handler function.
   */
  getOnClick() {
    return this.props.onClick;
  }
  /**
   * Sets the content of the HTML element.
   * @param {React.ReactNode} content - The content to set.
   */
  setContent(content) {
    this.content = content;
  }
  /**
   * Retrieves the content of the HTML element.
   * @returns {React.ReactNode} - The content of the HTML element.
   */
  getContent() {
    return this.content;
  }
  /**
   * Generates and returns the React component based on the current configuration.
   * @param {Object} obj - An object containing additional properties, content, or type to override.
   * @returns {React.ReactNode} - The generated React component.
   */
  getHtml(obj) {
    let { content, props } = obj;
    let type = obj == null ? void 0 : obj.type;
    if (content) {
      this.content = content;
    }
    props = { ...this.props, ...props };
    const types = {
      a: (0, import_jsx_runtime.jsx)("a", { ...props, children: this.content }),
      button: (0, import_jsx_runtime.jsx)("button", { ...props, children: this.content }),
      div: (0, import_jsx_runtime.jsx)("div", { ...props, children: this.content }),
      h1: (0, import_jsx_runtime.jsx)("h1", { ...props, children: this.content }),
      h2: (0, import_jsx_runtime.jsx)("h2", { ...props, children: this.content }),
      h3: (0, import_jsx_runtime.jsx)("h3", { ...props, children: this.content }),
      h4: (0, import_jsx_runtime.jsx)("h4", { ...props, children: this.content }),
      h5: (0, import_jsx_runtime.jsx)("h5", { ...props, children: this.content }),
      h6: (0, import_jsx_runtime.jsx)("h6", { ...props, children: this.content }),
      img: (0, import_jsx_runtime.jsx)("img", { ...props }),
      input: (0, import_jsx_runtime.jsx)("input", { ...props }),
      p: (0, import_jsx_runtime.jsx)("p", { ...props, children: this.content }),
      span: (0, import_jsx_runtime.jsx)("span", { ...props, children: this.content }),
      table: (0, import_jsx_runtime.jsx)("table", { ...props, children: this.content }),
      tr: (0, import_jsx_runtime.jsx)("tr", { ...props, children: this.content }),
      td: (0, import_jsx_runtime.jsx)("td", { ...props, children: this.content }),
      th: (0, import_jsx_runtime.jsx)("th", { ...props, children: this.content }),
      ul: (0, import_jsx_runtime.jsx)("ul", { ...props, children: this.content }),
      li: (0, import_jsx_runtime.jsx)("li", { ...props, children: this.content }),
      ol: (0, import_jsx_runtime.jsx)("ol", { ...props, children: this.content }),
      form: (0, import_jsx_runtime.jsx)("form", { ...props, children: this.content }),
      textarea: (0, import_jsx_runtime.jsx)("textarea", { ...props, children: this.content }),
      select: (0, import_jsx_runtime.jsx)("select", { ...props, children: this.content }),
      option: (0, import_jsx_runtime.jsx)("option", { ...props, children: this.content }),
      label: (0, import_jsx_runtime.jsx)("label", { ...props, children: this.content }),
      nav: (0, import_jsx_runtime.jsx)("nav", { ...props, children: this.content }),
      footer: (0, import_jsx_runtime.jsx)("footer", { ...props, children: this.content }),
      header: (0, import_jsx_runtime.jsx)("header", { ...props, children: this.content }),
      article: (0, import_jsx_runtime.jsx)("article", { ...props, children: this.content }),
      section: (0, import_jsx_runtime.jsx)("section", { ...props, children: this.content }),
      aside: (0, import_jsx_runtime.jsx)("aside", { ...props, children: this.content }),
      main: (0, import_jsx_runtime.jsx)("main", { ...props, children: this.content }),
      video: (0, import_jsx_runtime.jsx)("video", { ...props, children: this.content }),
      audio: (0, import_jsx_runtime.jsx)("audio", { ...props, children: this.content }),
      iframe: (0, import_jsx_runtime.jsx)("iframe", { ...props, children: this.content }),
      canvas: (0, import_jsx_runtime.jsx)("canvas", { ...props, children: this.content }),
      content: (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {}),
      fragment: (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: this.content }),
      link: (0, import_jsx_runtime.jsx)(Link, { ...props, children: this.content })
    };
    if (type === "content" || this.type === "conent") {
      let Comp = this.content;
      types.content = (0, import_jsx_runtime.jsx)(Comp, { ...props });
    }
    let component = type ? types[type] : types[this.type];
    return component;
  }
};

// node_modules/flinntech/src/components/templateTech/observers/builderObserver.jsx
var BuilderObserver = class extends baseObserver_default {
  constructor() {
    super(...arguments);
    __publicField(this, "component");
    __publicField(this, "setAttribute");
  }
  setObserverFunction(f) {
    this.setAttribute = f;
  }
  setComponent(c) {
    this.component = c;
  }
  getComponent() {
    return this.component;
  }
  // Method to run all subscribed functions
  run() {
    for (let obj of this.list) {
      this.setAttribute(obj.name, new HtmlBuilderBaseClass(obj));
    }
  }
};
var builderObserver_default = BuilderObserver;

// node_modules/flinntech/src/components/templateTech/baseClasses/interfaceBaseClass.jsx
var BaseInterface = class {
  /**
   * Constructor to initialize the BaseInterface instance.
   * It binds the class context and initializes factories and the observer.
   */
  constructor() {
    __publicField(this, "factory");
    __publicField(this, "componentList");
    __publicField(this, "themeFactory");
    __publicField(this, "appComponent");
    __publicField(this, "mainFunc");
    __publicField(this, "appObserver", new baseObserver_default());
    binder.bind(this);
    this.getFactory();
    this.getThemeFactory();
  }
  /**
   * Subscribes a function to the app observer.
   * @param {Function} func - The function to subscribe.
   */
  subscribeToAppObserver(func) {
    this.appObserver.subscribe(func);
  }
  /**
   * Retrieves the main function of the application.
   * @returns {Function} - The main function.
   */
  getMainFunc() {
    return this.mainFunc;
  }
  /**
   * Retrieves the factory for managing components or functionality.
   * To be implemented by subclasses.
   */
  getFactory() {
  }
  /**
   * Retrieves the theme factory for managing application themes.
   * To be implemented by subclasses.
   */
  getThemeFactory() {
  }
  /**
   * Retrieves the main application component.
   * @returns {Object} - The main application component.
   */
  getAppComponent() {
    return this.appComponent;
  }
  /**
   * Sets the main application component and notifies observers of the update.
   * @param {Object} APP - The main application component.
   */
  setAppComponent(APP) {
    this.appComponent = APP;
    this.appObserver.run(APP);
  }
  /**
   * Retrieves the list of components from the application state.
   * If the list is not already available, it attempts to extract it from the app component's state.
   * @returns {Array|undefined} - The list of components.
   */
  getComponentList() {
    var _a, _b;
    if (!this.componentList) {
      this.componentList = (_b = (_a = this.appComponent) == null ? void 0 : _a.state) == null ? void 0 : _b.componentList;
    }
    return this.componentList;
  }
};
var interfaceBaseClass_default = BaseInterface;

// node_modules/flinntech/src/components/templateTech/appInterface.jsx
var AppInterface = class extends interfaceBaseClass_default {
  constructor() {
    super(...arguments);
    __publicField(this, "type", "appInterface");
  }
};
var appInterface = new AppInterface();

// node_modules/flinntech/src/components/templateTech/baseClasses/BaseComponent.jsx
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var BaseComponent = class extends import_react.Component {
  // Holds the resize functionality if needed.
  /**
   * Constructor
   * 
   * Initializes the base component, setting up observers, interface connections, 
   * and preparation for component-level property management.
   * 
   * @param {Object} props - The props passed to the component.
   */
  constructor(props) {
    super(props);
    __publicField(this, "resize");
    binder.bind(this);
    this.initialBuilderSetupFunctions = [];
    this.setInterface();
    this.setInitialApp();
    this.initialPropsSetupFunctions = [this.setInterface, this.setAppOnInterace, this.setInitialApp, this.setObj, this.setThemeFactory, this.setTheme, this.createReactRefsForComponents];
    this.setupObserver = new baseObserver_default();
    this.builderObserver = new builderObserver_default();
    this.ObserverForSetupFunction = new baseObserver_default();
    this.builderObserver.setComponent(this);
    this.builderObserver.setObserverFunction(this.setHtmlBuilderSingleton);
    this.initialSetupFunctions = [this.builderObserver.run, this.additionalSetup];
    this.components = [];
  }
  /**
   * setInitialApp
   * 
   * Sets up the app-level state and methods by retrieving them from the interface. 
   * Ensures the component is connected to the global app if available.
   */
  setInitialApp() {
    var _a, _b, _c, _d, _e, _f;
    if (!this.interface) {
      this.app = (_a = this.props) == null ? void 0 : _a.app;
    }
    let app = this.interface.getAppComponent();
    if (app) {
      this.app = app;
    }
    if (this.app) {
      this.propsState = (_b = this.app) == null ? void 0 : _b.state;
      this.dispatch = (_c = this.app) == null ? void 0 : _c.dispatch;
      this.componentList = (_d = this.propsState) == null ? void 0 : _d.componentList;
      this.APIService = (_e = this.componentList) == null ? void 0 : _e.getAPIService();
      this.operationsFactory = (_f = this.componentList) == null ? void 0 : _f.getOperationsFactory();
    }
  }
  /**
   * setInterface
   * 
   * Initializes the interface for the component, defaulting to the app's interface. 
   * If the interface is of type "appInterface", subscribes to the app observer for updates.
   * 
   * @param {Object} [i] - Optional interface object to use.
   */
  setInterface(i) {
    var _a;
    this.interface = i || (((_a = this.props) == null ? void 0 : _a.interface) || (this.interface || appInterface));
    if (this.interface.type === "appInterface" && this.subscribeToAppObserverBool === void 0) {
      this.subscribeToAppObserverBool = true;
      this.interface.subscribeToAppObserver(this.setInitialApp);
    }
  }
  /**
   * setAppOnInterace
   * 
   * Assigns the app instance to the interface for global state and functionality propagation.
   */
  setAppOnInterace() {
    if (this.interface) {
      if (this.props.app) {
        this.interface.setAppComponent(this.props.app);
      }
      this.app = this.interface.getAppComponent();
    }
  }
  /**
   * setComponents
   * 
   * Sets the components array for this instance.
   * 
   * @param {Array} c - List of component names.
   */
  setComponents(c) {
    this.components = c;
  }
  /**
   * getComponents
   * 
   * Retrieves the list of components set for this instance.
   * 
   * @returns {Array} - Array of component names.
   */
  getComponents() {
    return this.components;
  }
  /**
   * createReactRefsForComponents
   * 
   * Creates React refs for all components listed in the components array, 
   * enabling easy reference management.
   */
  createReactRefsForComponents() {
    for (let str of this.components) {
      if (!this[str + "Ref"]) {
        this[str + "Ref"] = import_react.default.createRef();
      }
    }
  }
  /**
   * createPropObj
   * 
   * Creates a property object for a given component type, including style, class, and event handlers.
   * 
   * @param {String} type - The type of the component (e.g., button, input).
   * @param {String} [objType] - Optional object type to customize the props further.
   * @returns {Object} - The created property object.
   */
  createPropObj(type, objType) {
    objType = objType || this.state.propType;
    let json;
    let className = this[objType || "props"][type + "Class"];
    if (!className) {
      className = this.theme && typeof this.theme !== "string" ? this.theme[this.state[type + "Class"]] : this["default" + type + "Class"] || "";
    }
    json = {
      name: type,
      ref: this[type + "Ref"],
      style: this[type + "Click"] ? { ...this[objType || "props"][type + "Style"], cursor: "pointer" } : this[objType || "props"][type + "Style"],
      className,
      content: this[objType || "props"][type],
      onClick: this[objType || "props"][type + "Click"] || this[type + "Click"],
      obj: this.obj
    };
    if (json.onClick) {
      json.onClick = json.onClick.bind(this, this.obj);
    }
    return json;
  }
  /**
   * builderPropsSubscribe
   * 
   * Subscribes the props of a component to the builder observer for updates.
   * 
   * @param {String} str - The component's name.
   */
  builderPropsSubscribe(str) {
    this[str + "Props"] = this.createPropObj(str);
    this.builderObserver.subscribe(this[str + "Props"]);
  }
  /**
   * setInitialBuilderPropFunctions
   * 
   * Creates and registers the initial property setup functions for all components.
   * 
   * @returns {Array} - List of initial builder setup functions.
   */
  setInitialBuilderPropFunctions() {
    for (let str of this.components) {
      if (!this["set" + str + "props"]) {
        this["set" + str + "props"] = this.builderPropsSubscribe(str);
      }
      this.initialBuilderSetupFunctions.push(this["set" + str + "props"]);
    }
    return this.initialBuilderSetupFunctions;
  }
  /**
   * loadObserver
   * 
   * Configures the setup observer with the initial setup functions.
   */
  loadObserver() {
    this.setupObserver.setList(this.initialSetupFunctions);
  }
  /**
   * setInitialSetupFunctions
   * 
   * Combines and de-duplicates the initial setup functions from various sources.
   * 
   * @returns {Array} - List of unique initial setup functions.
   */
  setInitialSetupFunctions() {
    const combinedFunctions = [
      ...this.initialPropsSetupFunctions,
      ...this.initialBuilderSetupFunctions,
      ...this.initialSetupFunctions,
      this.additionalPostSetup
    ];
    const uniqueFunctions = [...new Set(combinedFunctions)];
    this.initialSetupFunctions = uniqueFunctions;
    return this.initialSetupFunctions;
  }
  /**
   * runInitialPropsSetup
   * 
   * Executes all the initial property setup functions defined in the initialPropsSetupFunctions array.
   */
  runInitialPropsSetup() {
    for (let f of this.initialPropsSetupFunctions) {
      if (f) {
        f();
      }
    }
  }
  /**
     * Allows for updating multiple objects with one form.
     * @param {*} obj 
     * @returns 
     */
  isArray(obj) {
    let arr = Array.isArray(obj) ? obj : [obj];
    return arr;
  }
  /**
  * setObj
  * 
  * Assigns the `obj` property from the component's props to the class instance.
  * This is used to make the `obj` accessible throughout the component.
  */
  setObj() {
    this.obj = this.props.obj;
  }
  /**
   * setThemeFactory
   * 
   * Retrieves the theme factory from the interface, if available. The theme factory is 
   * responsible for providing the themes used across components.
   */
  setThemeFactory() {
    if (this.interface !== void 0) {
      this.themeFactory = this.interface.getThemeFactory();
    }
  }
  /**
   * setTheme
   * 
   * Sets the theme for the component using the theme factory. If a theme is specified 
   * in the props, it takes precedence. Otherwise, the default theme from the state 
   * or a "default" theme is applied.
   */
  setTheme() {
    var _a, _b;
    if (this.themeFactory) {
      this.theme = this.themeFactory.getComponent(((_a = this.props) == null ? void 0 : _a.theme) || (((_b = this.state) == null ? void 0 : _b.defaultTheme) || "default"));
    }
  }
  /**
   * clearLists
   * 
   * Clears the lists maintained by the setup observer and the builder observer. 
   * This is useful for resetting or reinitializing the component's setup process.
   */
  clearLists() {
    this.setupObserver.setList([]);
    this.builderObserver.setList([]);
  }
  /**
   * need to setup an observer function for thi ssetupItem sometime.
   * @param  {...any} args 
   */
  setupItem(...args) {
    this.clearLists();
    this.preSetup();
    this.runInitialPropsSetup();
    this.setInitialBuilderPropFunctions();
    this.setInitialSetupFunctions();
    this.loadObserver();
    this.setupObserver.run(...args);
  }
  /**
  * preSetup
  * 
  * A placeholder function to be executed before the component setup process begins.
  * This can be overridden in subclasses to include custom pre-setup logic.
  */
  preSetup() {
  }
  /**
   * setAttribute
   * 
   * Dynamically sets an attribute on the component instance.
   * 
   * @param {string} type - The name of the attribute to set.
   * @param {*} val - The value to assign to the attribute.
   */
  setAttribute(type, val) {
    this[type] = val;
  }
  /**
   * setHtmlBuilderSingleton
   * 
   * Ensures that a singleton value is assigned to the component instance. 
   * If the attribute already exists, it will not overwrite it.
   * 
   * @param {string} type - The name of the singleton attribute.
   * @param {*} val - The value to assign if it is not already set.
   */
  setHtmlBuilderSingleton(type, val) {
    if (!this[type]) {
      this[type] = val;
    }
  }
  /**
   * getInnerContent
   * 
   * Retrieves the main inner content of the component. This function can 
   * be overridden to provide custom inner content logic.
   * 
   * @returns {*} - The inner content.
   */
  getInnerContent() {
    return this.innerContent;
  }
  /**
   * getAdditionalInnerContent
   * 
   * Retrieves additional inner content of the component. Like `getInnerContent`, 
   * this can also be overridden to provide more specific content.
   * 
   * @returns {*} - The additional inner content.
   */
  getAdditionalInnerContent() {
    return this.innerContent;
  }
  /**
   * mapList
   * 
   * Filters and maps over a list, removing undefined or false elements, 
   * and wraps the result in a React fragment.
   * 
   * @param {Array} list - The list of elements to process.
   * @returns {React.Fragment} - The processed elements wrapped in a fragment.
   */
  mapList(list) {
    return (0, import_jsx_runtime2.jsx)(import_jsx_runtime2.Fragment, { children: list.filter((el) => el !== void 0 && el !== false).map((el) => {
      return el;
    }) });
  }
  /**
   * additionalSetup
   * 
   * A placeholder function for any additional setup logic that should 
   * occur after the initial setup functions.
   */
  additionalSetup() {
  }
  /**
   * additionalPostSetup
   * 
   * A placeholder function for additional setup logic to execute after 
   * the main post-setup process.
   */
  additionalPostSetup() {
  }
  /**
   * mapInnerContent
   * 
   * Processes the inner content by retrieving the main and additional content, 
   * mapping them through `mapList`, and assigning the result to `innerContent`.
   * 
   * @returns {*} - The processed inner content.
   */
  mapInnerContent() {
    this.getInnerContent();
    this.getAdditionalInnerContent();
    this.innerContent = this.mapList(this.innerContent);
    return this.innerContent;
  }
  /**
   * getHtml
   * 
   * Retrieves the current HTML content of the component.
   * 
   * @returns {*} - The HTML content.
   */
  getHtml() {
    return this.html;
  }
  /**
   * getFactoryTypeString
   * 
   * Retrieves the factory type string for a given input string by matching 
   * it to the component list registry.
   * 
   * @param {string} str - The input string to match.
   * @returns {string|undefined} - The matched factory type or undefined if no match is found.
   */
  getFactoryTypeString(str) {
    let list = this.propsState.componentListInterface.getFactory().getRegistry();
    let type = list.find((s) => str.toLowerCase() === s);
    type = type || list.find((s) => str.toLowerCase().includes(s));
    return type;
  }
  /**
   * getCapitalFirstLetter
   * 
   * Capitalizes the first letter of a given string.
   * 
   * @param {string} str - The input string.
   * @returns {string} - The string with its first letter capitalized.
   */
  getCapitalFirstLetter(str) {
    var _a;
    return ((_a = str == null ? void 0 : str.charAt(0)) == null ? void 0 : _a.toUpperCase()) + (str == null ? void 0 : str.slice(1));
  }
  /**
   * classNameToString
   * 
   * Converts a class name to a string by lowercasing its first letter.
   * 
   * @param {Function} c - The class whose name is to be converted.
   * @returns {string} - The resulting string.
   */
  classNameToString(c) {
    let className = c.name;
    let str = className.charAt(0).toLowerCase() + className.slice(1);
    return str;
  }
  /**
   * render
   * 
   * Sets up the component and renders the HTML content.
   * 
   * @returns {*} - The HTML content of the component.
   */
  render() {
    this.setupItem();
    this.html = this.getHtml();
    return this.html;
  }
};

// node_modules/flinntech/src/components/cardTech/Card.jsx
var import_react2 = __toESM(require_react());

// node_modules/flinntech/src/components/cardTech/cardInteface.js
var CardInterface = class extends interfaceBaseClass_default {
};
var cardInterface = new CardInterface();

// node_modules/flinntech/src/components/cardTech/Card.jsx
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var Card = class extends BaseComponent {
  /**
   * Constructor initializes the Card component.
   * Sets up state, references, and initial properties.
   * @param {Object} props - Properties passed to the component.
   */
  constructor(props) {
    super(props);
    // Class properties
    __publicField(this, "type");
    __publicField(this, "theme");
    __publicField(this, "interface");
    this.wrapperRef = import_react2.default.createRef();
    this.setWrapperRef = this.setWrapperRef;
    this.initialPropsSetupFunctions = [
      ...this.initialPropsSetupFunctions,
      this.setApp,
      this.setType,
      this.setClassStr
    ];
    this.state = {
      defaultType: this.props.type ? this.props.type : "fit",
      defaultTheme: this.props.theme ? this.props.theme : "Default",
      typeKey: "type",
      themeKey: "theme"
    };
    this.interface = cardInterface;
  }
  /**
   * Lifecycle method called after the component is mounted.
   * Adds an event listener to detect clicks outside the popup if `popup` prop is true.
   */
  componentDidMount() {
    if (this.props.popup) {
      document.addEventListener("mousedown", this.handleClickOutside);
    }
  }
  /**
   * Lifecycle method called before the component is unmounted.
   * Removes the event listener added during `componentDidMount`.
   */
  componentWillUnmount() {
    if (this.props.popup) {
      document.removeEventListener("mousedown", this.handleClickOutside);
    }
  }
  /**
   * Handles click events outside the popup element and triggers the `handleClose` prop callback.
   * @param {Event} event - The click event object.
   */
  handleClickOutside(event) {
    if (this.wrapperRef && !this.wrapperRef.current.contains(event.target)) {
      if (this.props.handleClose) {
        this.props.handleClose();
      }
    }
  }
  /**
   * Wraps the provided HTML content inside a popup if the `popup` prop is true.
   * @param {JSX.Element} html - The HTML content to wrap.
   * @returns {JSX.Element} The updated HTML content with popup elements if applicable.
   */
  isPopup(html) {
    if (this.props.popup) {
      let closePopup = this.closePopup.getHtml({
        content: this.props.closeUI || (0, import_jsx_runtime3.jsx)(import_jsx_runtime3.Fragment, { children: "X" }),
        props: {
          onClick: () => {
            if (this.props.handleClose) {
              this.props.handleClose();
            }
          }
        }
      });
      let popup = this.popupContent.getHtml({
        content: (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, { children: [
          closePopup,
          html
        ] }),
        props: { ref: this.wrapperRef }
      });
      let backDrop = this.backDrop.getHtml({ content: popup });
      html = backDrop;
    }
    return html;
  }
  /**
   * Sets the theme of the card based on props or default values.
   */
  setTheme() {
    this.theme = this.props[this.state.themeKey] ? this.props[this.state.themeKey] : this.state.defaultTheme;
  }
  /**
   * Sets the type of the card based on props or default values.
   */
  setType() {
    this.type = this.props[this.state.typeKey] ? this.props[this.state.typeKey] : this.state.defaultType;
  }
  /**
   * Sets the CSS class strings for various card and popup elements.
   */
  setClassStr() {
    this.defaultcardClass = this.type + this.theme + " scroller";
    this.defaultcardClass = this.props.popup ? this.defaultcardClass + " cardPopup" : this.defaultcardClass;
    if (this.props.popup) {
      this.defaultbackDropClass = "backDropPopup";
      this.defaultpopupContentClass = "popupContent";
      this.defaultclosePopupClass = "closePopup";
    }
  }
  /**
   * Generates the final HTML content for the card, including any popup elements if applicable.
   * @returns {JSX.Element} The HTML content for the card.
   */
  getHtml() {
    let content = this.getContent();
    this.html = this.card.getHtml({ content });
    this.html = this.isPopup(this.html);
    return this.html;
  }
  /**
   * Retrieves the card's content from the `content` prop.
   * @returns {JSX.Element} The card content.
   */
  getContent() {
    this.content = this.props.content;
    return this.content;
  }
  /**
   * Prepares the necessary components for rendering the card.
   * Adds specific components if the `popup` prop is true.
   */
  preSetup() {
    let arr = ["card"];
    if (this.props.popup) {
      arr = [...arr, "backDrop", "popupContent", "closePopup"];
    }
    this.setComponents(arr);
  }
};

// node_modules/flinntech/src/components/componentListNPM/baseClass.js
var BaseClass = class {
  /**
   * Constructor initializes the BaseClass with an operations factory and binds methods.
   * @param {Object} oppsFactory - The operations factory used for managing operations.
   */
  constructor(oppsFactory) {
    // Class properties
    __publicField(this, "operationsFactory");
    __publicField(this, "dispatch");
    __publicField(this, "json", {
      _id: "",
      backendKeys: [],
      backendAttributes: [],
      backendFilterKeys: [],
      orderMatters: false,
      orderFilterKey: "",
      filterKey: "",
      removeOwnerQuery: []
    });
    __publicField(this, "componentList");
    __publicField(this, "APIService");
    binder.bind(this);
    this.operationsFactory = oppsFactory;
    this.json._id = this.createId();
  }
  /**
   * Helper function to determine the attribute and filter key for associated items.
   * @param {number} index - The index for backend attributes and filter keys.
   * @returns {Object} Object containing `attribute` and `filterKey`.
   */
  getAssociatedItemsHelper(index) {
    let attribute = this.json._id;
    let filterKey = this.json.type + "Id";
    if (this.json.backendAttributes.length > 0) {
      attribute = this.json[this.json.backendAttributes[index]];
    }
    if (this.json.backendFilterKeys.length > 0) {
      filterKey = this.json.backendFilterKeys[index];
    }
    return { attribute, filterKey };
  }
  /**
   * Fetches associated items for the provided item types using the component list.
   * If no item types are provided, it uses `backendKeys`.
   * @param {Array} itemTypes - The item types to fetch.
   * @returns {Promise<Array>} A promise resolving to the associated items.
   */
  async getAssociatedItems(itemTypes) {
    itemTypes = itemTypes || this.json.backendKeys;
    const promises = itemTypes == null ? void 0 : itemTypes.map((item, index) => {
      let { attribute, filterKey } = this.getAssociatedItemsHelper(index);
      return this.componentList.getList(item, attribute, filterKey);
    });
    return await Promise.all(promises);
  }
  /**
   * Fetches associated items directly from the backend for the provided item types.
   * @param {Array} itemTypes - The item types to fetch.
   * @param {Object} listReq - Additional request parameters.
   * @returns {Promise<Array>} A promise resolving to the associated backend items.
   */
  async getAssociatedItemsFromBackend(itemTypes, listReq) {
    itemTypes = itemTypes || this.json.backendKeys;
    let owner = true;
    const promises = itemTypes == null ? void 0 : itemTypes.map((item, index) => {
      if (this.json.removeOwnerQuery.includes(item)) {
        owner = false;
      }
      let { attribute, filterKey } = this.getAssociatedItemsHelper(index);
      return this.componentList.getComponentsFromBackend({
        type: item,
        ids: attribute,
        filterKeys: filterKey,
        owner,
        ...listReq
      });
    });
    return await Promise.all(promises);
  }
  /**
   * Sets the component list for the instance and initializes API and dispatch services.
   * @param {Object} l - The component list to set.
   */
  setComponentList(l) {
    this.componentList = l;
    if (this.componentList.getAPIService) {
      this.setAPIService(this.componentList.getAPIService());
    }
    if (this.componentList.getDispatch) {
      this.setDispatch(this.componentList.getDispatch());
    }
  }
  /**
   * Sets the dispatch function.
   * @param {Function} d - The dispatch function.
   */
  setDispatch(d) {
    this.dispatch = d;
  }
  /**
   * Retrieves the dispatch function.
   * @returns {Function} The dispatch function.
   */
  getDispatch() {
    return this.dispatch;
  }
  /**
   * Retrieves the component list.
   * @returns {Object} The component list.
   */
  getComponentList() {
    return this.componentList;
  }
  /**
   * Sets the API service for the instance.
   * @param {Object} service - The API service to set.
   */
  setAPIService(service) {
    this.APIService = service;
  }
  /**
   * Retrieves the API service.
   * @returns {Object} The API service.
   */
  getAPIService() {
    return this.APIService;
  }
  /**
   * Updates the current instance using the API service.
   * @param {...any} args - Additional arguments for the update operation.
   */
  update(...args) {
    if (this.APIService) {
      this.APIService.update([this], ...args);
    }
  }
  /**
   * Deletes the current instance using the component list.
   * @param {...any} args - Additional arguments for the delete operation.
   */
  del(...args) {
    this.componentList.del(this, { ...args });
  }
  /**
   * Adjusts the order of the current instance within a list.
   * @param {number|boolean} increment - The direction or step to move in the list.
   * @param {string} key - The key used for ordering.
   */
  updateOrder(increment, key) {
    increment = increment || -1;
    if (increment === true) {
      increment = 1;
    }
    let list = this.componentList.getList(
      this.json.type,
      this.json[this.json.orderFilterKey],
      this.json.orderFilterKey
    );
    key = key || (this.json.orderKey ? this.json[this.json.orderKey] : "order");
    let thisCompIndex = list.indexOf(this);
    let nextComp;
    if (increment < 0 && thisCompIndex === 0) {
      this.json[key] = list.length;
    } else if (increment > 0 && thisCompIndex === list.length - 1) {
      this.json[key] = 0;
      this.componentList.shiftOrderedList(this, key);
    } else {
      nextComp = list[thisCompIndex + increment];
      nextComp.setCompState({ [key]: thisCompIndex }, { run: true, clean: true });
      this.json[key] = thisCompIndex + increment;
    }
    this.componentList.sortSelectedList(this.json.type, this.json.orderKey || "order");
    this.componentList.resetOrder(this, key);
    this.update();
  }
  /**
  * Prepares the instance by invoking the operations factory's prepare method.
  */
  prepare() {
    this.operationsFactory.prepare({ prepare: this });
  }
  /**
   * Sets a single attribute on the instance.
   * @param {string} key - The key of the attribute to set.
   * @param {*} val - The value to set for the attribute.
   */
  setAttribute(key, val) {
    this[key] = val;
  }
  /**
   * Sets multiple attributes on the instance.
   * @param {Object} obj - An object containing key-value pairs to set as attributes.
   */
  setAttributes(obj) {
    for (let key in obj) {
      this[key] = obj[key];
    }
  }
  /**
   * Retrieves the value of a specific attribute from the instance.
   * @param {string} type - The key of the attribute to retrieve.
   * @returns {*} The value of the requested attribute.
   */
  getAttribute(type) {
    return this[type];
  }
  /**
   * Retrieves a specific attribute from the `json` object.
   * @param {string} key - The key of the attribute to retrieve.
   * @returns {*} The value of the requested attribute from `json`.
   */
  getJsonAttribute(key) {
    return this.json[key];
  }
  /**
   * Updates the `json` object and optionally performs additional actions like dispatching updates, calling callbacks, or running operations.
   *        
   * * Works exactly like setState in react only I include a function for a callback if needed
   * @param {Object} obj - Key-value pairs to update in the `json` object.
   * @param {Object} subscribe - Options for subscribing to operations.
   * @param {boolean} dispatch - Whether to dispatch updates.
   * @param {Function} callBack - Callback to execute after updating the state.
   */
  setCompState(obj, subscribe, dispatch, callBack) {
    this.subscribeToOperations(subscribe);
    this.json = { ...this.json, ...obj };
    if (dispatch) {
      this.dispatch({ updated: this });
    }
    if (callBack) {
      callBack(obj);
    }
    if (subscribe == null ? void 0 : subscribe.run) {
      this.operationsFactory.runOperations();
    }
  }
  /**
   * Retrieves the operations factory associated with the instance.
   * @returns {Object} The operations factory.
   */
  getOperationsFactory() {
    return this.operationsFactory;
  }
  /**
   * Sets the `json` object directly and optionally performs actions like dispatching updates, calling callbacks, or running operations.
   * @param {Object} json - The new `json` object to set.
   * @param {Object} subscribe - Options for subscribing to operations.
   * @param {boolean} dispatch - Whether to dispatch updates.
   * @param {Function} callBack - Callback to execute after setting the `json`.
   */
  setJson(json, subscribe, dispatch, callBack) {
    this.subscribeToOperations(subscribe);
    this.json = json;
    if (dispatch) {
      this.dispatch({ updated: this });
    }
    if (callBack) {
      callBack(this);
    }
    if (subscribe == null ? void 0 : subscribe.run) {
      this.operationsFactory.runOperations();
    }
  }
  /**
   * Retrieves the entire `json` object.
   * @returns {Object} The `json` object.
   */
  getJson() {
    return this.json;
  }
  /**
   * Subscribes to operations in the operations factory.
   * @param {Object} subscribe - Options for subscribing, including the operation and whether to clean previous subscriptions.
   */
  subscribeToOperations(subscribe) {
    if (subscribe) {
      this.operationsFactory.subscribeToOperations(subscribe.operation || this.update, subscribe.clean);
    }
  }
  /**
   * Creates a copy of the `json` object, with optional modifications, for creating a new instance.
   * @param {Object} obj - Optional modifications to apply to the copied `json`.
   * @returns {Object} A new `json` object with the specified modifications.
   */
  copyJson(obj) {
    let newJson = { ...this.json, _id: "", ...obj };
    return newJson;
  }
  /**
   * Copies the current instance's `json` and adds it to the component list as a new instance.
   * @param {Object} obj - Optional modifications to apply to the new instance.
   */
  copy(obj) {
    let newJson = this.copyJson(obj);
    this.componentList.addComponents(newJson);
  }
  /**
   * Updates a nested object inside the `json` by merging it with the provided object.
   * @param {string} key - The key of the nested object to update.
   * @param {Object} obj - The object containing key-value pairs to merge into the nested object.
   */
  updateObjInsideJson(key, obj) {
    this.json[key] = { ...this.json[key], ...obj };
  }
  /**
   * Removes specific keys from a nested object inside the `json`.
   * @param {string} key - The key of the nested object to modify.
   * @param {Array<string>} keys - The keys to remove from the nested object.
   */
  removeObjInsideJson(key, keys) {
    let ob = {};
    for (const k in this.json[key]) {
      if (!keys.includes(k)) {
        ob[k] = this.json[key][k];
      }
    }
    this.json[key] = ob;
  }
  /**
   * Generates a random five-character alphanumeric string with at least one random letter.
   * @returns {string} A random alphanumeric string.
   */
  randomFiveDigitNumber() {
    let num = Math.floor(Math.random() * 9e4) + 1e4;
    num = num.toString();
    let randomLetter = String.fromCharCode(97 + Math.floor(Math.random() * 26));
    let randomPosition = Math.floor(Math.random() * 5);
    num = num.substring(0, randomPosition) + randomLetter + num.substring(randomPosition + 1);
    let randomagain = Math.floor(Math.random() * 2);
    if (randomagain === 1) {
      let randomLetter2 = String.fromCharCode(97 + Math.floor(Math.random() * 26));
      let randomPosition2;
      do {
        randomPosition2 = Math.floor(Math.random() * 5);
      } while (randomPosition2 === randomPosition);
      num = num.substring(0, randomPosition2) + randomLetter2 + num.substring(randomPosition2 + 1);
    }
    return num;
  }
  /**
   * Creates a unique identifier (ID) based on the current date and a random number.
   * @returns {string} The generated ID.
   */
  createId() {
    const currentDate = /* @__PURE__ */ new Date();
    const month = (currentDate.getMonth() + 1).toString().padStart(2, "0");
    const day = currentDate.getDate().toString().padStart(2, "0");
    const year = currentDate.getFullYear().toString().slice(-2);
    let num = this.randomFiveDigitNumber().toString() + month + day + year;
    return num;
  }
  /**
   * Creates a unique string of the specified length using alphanumeric characters.
   * @param {number} length - The length of the string to generate.
   * @returns {string} The generated string.
   */
  createUUID(length) {
    let result = "";
    let characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz123456789";
    let charactersLength = characters.length;
    for (let i = 0; i < length; i++) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
  }
};

// node_modules/flinntech/src/components/componentListNPM/factory.js
var Factory = class {
  constructor() {
    __publicField(this, "operationsFactory");
    __publicField(this, "factory", {});
  }
  /**
  * 
  * @param register 
  * register any component to the factory
  */
  registerComponents(register) {
    this.factory[register.name] = register.component;
  }
  /**
   * 
   * @param {*} operationsFactory 
   * allow the factory to have an operationsFactory
   */
  setOperationsFactory(operationsFactory) {
    this.operationsFactory = operationsFactory;
  }
  getRegistry() {
    return Object.keys(this.factory);
  }
  /**
      * 
      * @param obj 
      * @returns a new component from the data
      * Used to create raw data into class components to be used.
      */
  async getComponent(obj) {
    if (Object.keys(this.factory).includes(obj.type)) {
      let key = obj.type;
      let comp = new this.factory[key](this.operationsFactory);
      let nullValues = [void 0, "", false];
      if (nullValues.includes(obj._id)) {
        obj._id = comp.getJson()._id;
      }
      comp.setCompState({ ...obj });
      return comp;
    }
  }
};
var factory_default = Factory;

// node_modules/flinntech/src/components/componentListNPM/operationsObserver.js
var OperationsObserver = class extends baseObserver_default {
  /**
   * Clears the list of observer functions.
   */
  clear() {
    this.list = [];
  }
  /**
   * Clears all existing subscriptions and adds a new observer function.
   * @param {Function} observerFunction - The observer function to subscribe.
   */
  cleanSubscibe(observerFunction) {
    this.clear();
    this.subscribe(observerFunction);
  }
  /**
   * Executes all observer functions in the list with the provided arguments.
   * Clears the list of observers after execution.
   * @param {...any} args - Arguments to pass to each observer function.
   */
  run(...args) {
    for (let observerFunction of this.list) {
      if (observerFunction) {
        observerFunction(...args);
      }
    }
    this.clear();
  }
};

// node_modules/flinntech/src/components/componentListNPM/operationsFactory.js
var OperationsFactory = class {
  constructor(componentListInterface) {
    /**
     * A factory class to manage the preparation and registration of components.
     * Handles operations such as adding, removing, and running components, as well as observing these operations.
     * @param {Object} componentListInterface - Interface for interacting with the component list.
     */
    __publicField(this, "register");
    __publicField(this, "factory");
    __publicField(this, "operationsObserver");
    binder.bind(this);
    this.add = [];
    this.lastChange = [];
    this.factory = componentListInterface.getFactory();
    this.operationsObserver = new OperationsObserver();
  }
  /**
   * Removes a specific component from the `add` list.
   * @param {Object} comp - The component to remove.
   */
  removeFromList(comp) {
    this.add = this.add.filter((obj) => obj !== comp);
  }
  /**
   * Retrieves the operations observer instance.
   * @returns {OperationsObserver} - The operations observer.
   */
  getOperationsObserver() {
    return this.operationsObserver;
  }
  /**
   * Sets a custom operations observer.
   * @param {OperationsObserver} o - The new operations observer.
   */
  setOperationsObserver(o) {
    this.operationsObserver = o;
  }
  /**
   * Subscribes a function to the operations observer.
   * Optionally clears existing subscriptions.
   * @param {Function} f - The function to subscribe.
   * @param {Boolean} clean - If true, clear existing subscriptions before subscribing.
   */
  subscribeToOperations(f, clean) {
    if (clean) {
      this.operationsObserver.clear();
    }
    this.operationsObserver.subscribe(f);
  }
  /**
   * Runs all subscribed functions in the operations observer.
   * @param {...any} args - Arguments to pass to the subscribed functions.
   */
  runOperations(...args) {
    this.operationsObserver.run(...args);
  }
  /**
   * Sets the `add` list and updates the last changes.
   * @param {Array} addList - The new list of components to be added.
   */
  setAddList(addList) {
    this.add = [...addList];
    this.lastChange = [...this.add];
  }
  /**
   * Retrieves the current `add` list.
   * @returns {Array} - The list of components being prepared for addition.
   */
  getAddList() {
    return this.add;
  }
  /**
   * Retrieves the most recent set of prepared components.
   * @returns {Array} - The last prepared components.
   */
  getLastPrepare() {
    return this.lastChange;
  }
  /**
  * Prepare one to many objects based upon JSON sent.
  * Params are {json: {your json}, amount:int} or an array of multiple of those
  * @param {*} obj 
  * @returns add list The updated register with the last changes.
  */
  async prepare(obj, callback) {
    let { prepare, amount, clean } = obj;
    amount = amount || 1;
    let arr = Array.isArray(prepare) ? prepare : [prepare];
    arr = arr.flatMap((json) => Array(amount).fill(json));
    let newArr = [];
    for (let json of arr) {
      let comp = await this.factory.getComponent({ ...json });
      newArr.push(comp);
    }
    arr = [...newArr];
    this.setAddList(clean ? [...arr] : [...this.add, ...arr]);
    if (callback) {
      callback(this.add);
    }
    if (obj.run) {
      await this.addToComponentList();
    }
    return this.add;
  }
  /**
   * Clears the `add` list and resets the last changes.
   */
  clear() {
    this.setAddList([]);
  }
  /**
   * Removes a specific component from the `add` list.
   * @param {Object} obj - The component to remove.
   */
  removeFromRegister(obj) {
    this.setAddList(this.add.filter((component) => component !== obj));
  }
  /**
   * Runs the process of adding components to the component list.
   * Optionally skips backend updates.
   * @param {Boolean} skipBackendUpdate - If true, skip updates to the backend.
   */
  run(skipBackendUpdate) {
    this.addToComponentList(skipBackendUpdate);
  }
  /**
   * Adds the components in the `add` list to the component list and clears the `add` list.
   * @param {Boolean} skipBackendUpdate - If true, skip updates to the backend.
   * @returns {Array} - The list of components that were added.
   */
  addToComponentList(skipBackendUpdate) {
    let comps = [...this.add];
    this.clear();
    this.register(comps, { skipBackendUpdate });
    return comps;
  }
  /**
   * Sets the registration function for the factory.
   * @param {Function} r - The registration function.
   */
  setRegister(r) {
    this.register = r;
  }
};

// node_modules/flinntech/src/components/componentListNPM/componentsList.js
var ComponentList = class {
  constructor(componentListInterface) {
    /**
     * Set components 
     * Add an easy way to access lists of components
     */
    __publicField(this, "components", []);
    __publicField(this, "dispatch");
    __publicField(this, "backArray", {});
    __publicField(this, "operationsFactory");
    __publicField(this, "componentListInterface");
    __publicField(this, "componentsList", {});
    __publicField(this, "completionObserver", new baseObserver_default());
    __publicField(this, "factory");
    __publicField(this, "APIService");
    binder.bind(this);
    this.operationsFactory = componentListInterface.getOperationsFactory();
    this.operationsFactory.setRegister(this.add);
    this.componentListInterface = componentListInterface;
    this.factory = componentListInterface.getFactory();
    this.dispatch = componentListInterface.dispatch;
    this.APIService = componentListInterface.getAPIService();
    this.APIService.setComponentList(this);
    this.completionObserver.subscribe(this.setComponentsList);
    this.completionObserver.subscribe(this.setOrderAfterAddorDel);
  }
  getFactory() {
    return this.factory;
  }
  getDispatch() {
    return this.dispatch;
  }
  setDispatch(d) {
    this.dispatch = d;
  }
  getCompletionObserver() {
    return this.completionObserver;
  }
  setCompoletionObserver(o) {
    this.completionObserver = o;
  }
  subscribeToOperationCompletion(f) {
    this.completionObserver.subscribe(f);
  }
  getAPIService() {
    return this.APIService;
  }
  setAPIService(service) {
    this.APIService = service;
  }
  /**
  * 
  * @returns all the components inside the tech
  */
  getComponents() {
    return this.components;
  }
  /**
   * 
   * @param {*} arr 
   * @returns a filtered array of all the errors flushed out
   */
  filterOutErrors(arr) {
    let ids = this.components.map((obj) => obj.getJson()._id);
    arr = arr.filter((obj) => obj !== void 0);
    arr = arr.map((obj) => {
      if (obj !== void 0) {
        if (ids.includes(obj.getJson()._id)) {
          let savedComponent = this.components.find((comp) => comp.getJson()._id === obj.getJson()._id);
          obj.setJson({
            ...savedComponent.getJson(),
            ...obj.getJson()
          });
        }
      }
      return obj;
    });
    arr = arr.filter((obj) => !ids.includes(obj.getJson()._id));
    let registry = this.factory.getRegistry();
    arr = arr.filter((obj) => registry.includes(obj.getJson().type));
    return arr;
  }
  /**
   * 
   * @param arr of components to add
   * add one to many components into the list
   * 
   */
  add(arr, obj) {
    arr = Array.isArray(arr) ? arr : [arr];
    arr = this.filterOutErrors(arr);
    arr.forEach((comp) => {
      comp.setComponentList(this);
    });
    this.components = [...this.components, ...arr];
    return this.operationComplete(arr, "add", obj);
  }
  /**
       * if this is a new type of component that has never been added before add a new array.
       * Otherwise add it to the current array
       */
  setComponentsList() {
    let tempcomps = {};
    let registry = this.componentListInterface.getFactory().getRegistry();
    registry.forEach((str) => {
      tempcomps[str] = [];
    });
    for (let obj of this.components) {
      let type = obj.getJson().type;
      tempcomps[type].push(obj);
    }
    this.componentsList = tempcomps;
  }
  /**
   * the way this works from the backend we may have a problem with the async stuff on this side.
   * @param {*} obj 
   */
  async addComponents(obj, skipBackendUpdate) {
    if (!obj.prepare) {
      let arr = Array.isArray(obj) ? obj : [obj];
      obj = { prepare: arr };
    }
    await this.operationsFactory.prepare({ ...obj });
    this.operationsFactory.addToComponentList(skipBackendUpdate);
    let checkIds = obj == null ? void 0 : obj.prepare.map((o) => o._id);
    let comps = await this.components.filter((comp) => checkIds.includes(comp.getJson()._id));
    return comps;
  }
  /**
   * 
   * @param arr of components to add
   * delete one to many components into the list
   * 
   */
  del(arr, obj) {
    arr = Array.isArray(arr) ? arr : [arr];
    this.components = this.components.filter((obj2) => !arr.includes(obj2));
    return this.operationComplete(arr, "del", obj);
  }
  /**
   * need to have some way to set order on an ordered list after adding or deleting an item.
   * @param {*} arr 
   */
  setOrderAfterAddorDel(arr) {
    for (let obj of arr) {
      let json = obj.getJson();
      if (json.orderMatters) {
        let list = this.getList(json.type, json[json.orderFilterKey], json.orderFilterKey);
        let key = json.orderKey ? json[json.orderKey] : "order";
        let val = obj.getJson()[key];
        let oFilter = list.filter((comp) => {
          let val1 = parseInt(comp.getJson()[key]);
          val = parseInt(val);
          return val1 === val;
        });
        let o = oFilter.find((comp) => !arr.includes(comp));
        let objIndex = list.indexOf(obj);
        if (o && o !== obj) {
          obj.setCompState({ [key]: objIndex });
        }
        this.sortSelectedList(json.type, json.orderKey || "order");
        this.resetOrder(obj, key);
      }
    }
  }
  /**
   * Be able to move things around in an ordered list
   * @param {*} obj 
   * @param {*} key 
   */
  shiftOrderedList(obj, key) {
    let json = obj.getJson();
    this.sortSelectedList(json.type, json.orderKey || "order");
    let list = this.getList(json.type, json[json.orderFilterKey], json.orderFilterKey);
    key = key || (json.orderKey ? json[json.orderKey] : "order");
    list = list.filter((o) => o !== obj);
    for (let i = 1; i < list.length; i++) {
      let o = list[i - 1];
      o.setCompState({ [key]: i }, { run: true, clean: true });
    }
  }
  /**
   * Reset the order in case it got out of order.
   * @param {*} obj 
   * @param {*} key 
   */
  resetOrder(obj, key) {
    let json = obj.getJson();
    key = key || (json.orderKey ? json[json.orderKey] : json.order);
    let list = this.getList(json.type, json[json.orderFilterKey], json.orderFilterKey);
    for (let i = 0; i < list.length; i++) {
      if (list[i][key] !== i) {
        list[i].setCompState({ [key]: i });
        if (list[i] !== obj) {
          list[i].update();
        }
      }
    }
  }
  /**
   * When add update or delete is comeplete
   * @param {*} arr 
   * @param {*} type 
   * @param {*} obj 
   * @returns arr of the operation
   */
  operationComplete(arr, type, obj) {
    this.completionObserver.run(arr, type, obj);
    this.backArray = { [type]: arr };
    if (!obj.skipBackendUpdate) {
      this.updateBackend(arr, type, obj);
    }
    return arr;
  }
  /**
   * Send update imediately to the backend.
   * @param {*} arr 
   * @param {*} type 
   * @param {*} obj 
   */
  updateBackend(arr, type, obj) {
    this.dispatch({ backend: true, backendUpdate: { ...this.backArray } });
    let params = [obj.path, obj.dispatchKey];
    if (type === "add") {
      params.push(obj.timeKey);
    }
    this.APIService[type](arr, ...params);
    this.backArray = {};
  }
  /**
   * 
   * @returns operation factor for preparing items to be operated on
   */
  getOperationsFactory() {
    return this.operationsFactory;
  }
  /**
   * Json is created to provide the backend firebase with needed query params to get things from the backend
   * @param {*} typeValue 
   * @param {*} ids 
   * @param {*} filterKeys 
   * @param {*} obj 
   * @param {*} typeAttribute 
   * @returns 
   */
  createQueryJson(typeValue, ids, filterKeys, obj, typeAttribute = "type") {
    obj = obj || {};
    if (filterKeys === void 0 && ids) {
      filterKeys = "_id";
    }
    ids = Array.isArray(ids) ? ids : [ids];
    filterKeys = Array.isArray(filterKeys) ? filterKeys : [filterKeys];
    let json = {
      where: [
        { attribute: typeAttribute, val: typeValue }
      ],
      ...obj
    };
    if (ids.length > 0 && ids[0] !== void 0) {
      json.where = [
        ...json.where,
        ...ids.map((id, index) => ({
          attribute: filterKeys[index] || filterKeys[0],
          val: id
        }))
      ];
    }
    return json;
  }
  /**
   * type, ids = [], filterKeys = [], obj = {}, path = '', snapshot = false, owner
   * @param {*} listReq 
   * @returns 
   */
  async getComponentsFromBackend(listReq, owner) {
    if (typeof listReq === "string") {
      listReq = { type: listReq, owner: owner === false ? owner : true };
    }
    let json = await this.createQueryJson(listReq.type, listReq.ids, listReq.filterKeys, listReq.obj, listReq.typeAttribute);
    let backendList = await this.APIService[listReq.snapshot ? "firebaseGetterSnapshot" : "firebaseGetter"](json, listReq.path, listReq.owner);
    return backendList;
  }
  /**
   * type, ids = [], filterKeys = [], obj = {}, path = '', snapshot = false, owner
   * @param {*} compReq 
   * @returns 
   */
  async getComponentFromBackend(compReq) {
    let comp = await this.getComponentsFromBackend(compReq);
    return comp[0];
  }
  /**
  * Filters a list based on the given ids and filterKeys.
  * 
  * @param {string} type - The name of the list to filter.
  * @param {string|string[]} [ids] - The id or ids to filter by.
  * @param {string|string[]} [filterKeys="owner"] - The key or keys to filter on.
  * @returns {Array} - The filtered list or the full list if no ids are provided.
  */
  getList(type, ids, filterKeys) {
    filterKeys = filterKeys || "owner";
    type = Array.isArray(type) ? type : [type];
    let items = [];
    for (let t of type) {
      let list = this.componentsList[t] || [];
      items = [...items, ...list];
    }
    if (!Array.isArray(ids)) {
      ids = ids ? [ids] : [];
    }
    if (!Array.isArray(filterKeys)) {
      filterKeys = [filterKeys];
    }
    if (ids.length > 0) {
      items = items.filter((item) => {
        return filterKeys.some((filterKey, index) => {
          var _a;
          const data = (_a = item.getJson()) == null ? void 0 : _a[filterKey];
          const id = ids[index] || ids[0];
          return typeof data === "object" ? Object.keys(data).includes(id) : data === id;
        });
      });
    }
    return items;
  }
  /**
   * 
   * @param type 
   * @param id 
   * @param filterKey 
   * @returns a component of what was asked for with the default being the the first component in the list.
   */
  //     type   id  filter
  //     User, ownerid 
  getComponent(type, id, filterKey) {
    let list = this.getList(type, id, filterKey || "_id");
    return list[0];
  }
  /**
   * clear the lists
   */
  clearList() {
    this.components = [];
    this.componentsList = {};
  }
  /**
   * clears a list by filter key and id
   * @param {*} id 
   * @param {*} filterKey 
   */
  clearSelectedList(id, filterKey) {
    let temp = [...this.components];
    let arr = [];
    for (const key in temp) {
      if (temp[key].getJson()[filterKey] !== id) {
        arr.push(temp[key]);
      }
    }
    this.components = [...arr];
    this.setComponentsList();
  }
  /**
   * set component list for the app
   * @param {*} list 
   */
  setComponentList(list) {
    this.componentsList = list;
  }
  /**
   * sets a list by type in the componentsList var
   * @param {*} type 
   * @param {*} list 
   */
  setSelectedList(type, list) {
    this.componentsList[type] = list;
  }
  /**
   * Provide sort functionality for types of lists
   * @param {*} type 
   * @param {*} filterKey 
   * @param {*} reverse 
   * @returns 
   */
  sortSelectedList(type, filterKey, reverse) {
    if (!filterKey) {
      return;
    }
    if (this.componentsList[type]) {
      let list = [...this.componentsList[type]];
      list = list.sort(function(a, b) {
        const aValueRaw = a.getJson()[filterKey];
        const bValueRaw = b.getJson()[filterKey];
        const aValue = isNaN(Number(aValueRaw)) ? aValueRaw : Number(aValueRaw);
        const bValue = isNaN(Number(bValueRaw)) ? bValueRaw : Number(bValueRaw);
        if (typeof aValue === "number" && typeof bValue === "number") {
          return reverse ? bValue - aValue : aValue - bValue;
        } else {
          if (reverse) {
            return ("" + bValue).localeCompare("" + aValue);
          } else {
            return ("" + aValue).localeCompare("" + bValue);
          }
        }
      });
      this.setSelectedList(type, list);
    }
  }
  /**
   * sort the list by the timestamp
   * @param {*} type 
   * @param {*} reverse 
   */
  sortSelectedListbyFirebaseDate(type, reverse) {
    if (this.componentsList[type]) {
      let list = [...this.componentsList[type]];
      list = list.sort(function(a, b) {
        var _a, _b;
        let aD = a.getJson().date || a.getJson().date !== "" ? (_a = a.getJson().date) == null ? void 0 : _a.seconds : /* @__PURE__ */ new Date(0);
        let bD = b.getJson().date || b.getJson().date !== "" ? (_b = b.getJson().date) == null ? void 0 : _b.seconds : /* @__PURE__ */ new Date(0);
        return reverse ? bD - aD : aD - bD;
      });
      this.setSelectedList(type, list);
    }
  }
};

// node_modules/flinntech/src/components/serviceTech/APITech/queryGenerator.js
var QuearyGenerator = class {
  // Default field for ordering queries
  /**
   * Constructor for the QuearyGenerator class.
   * @param {object} db - Firestore database reference.
   * @param {string} url - Base URL for Firestore paths.
   */
  constructor(db, url) {
    __publicField(this, "DB");
    // Firestore database reference
    __publicField(this, "url");
    // Base URL for Firestore collection paths
    __publicField(this, "path", []);
    // Default path for Firestore queries
    __publicField(this, "orderStr", "date");
    binder.bind(this);
    this.setDB(db);
    this.setUrl(url);
    this.path = [this.DB, this.url + "users", this.url + "APP", "components"];
  }
  /**
   * Sets the Firestore database reference.
   * @param {object} db - Firestore database reference.
   */
  setDB(db) {
    this.DB = db;
  }
  /**
   * Sets the base URL for Firestore collection paths.
   * @param {string} url - Base URL for Firestore paths.
   */
  setUrl(url) {
    this.url = url;
  }
  /**
   * Sets a custom Firestore path for queries.
   * @param {array} p - Firestore path as an array of strings.
   */
  setPath(p) {
    this.path = p;
  }
  /**
   * Sets the default field to order queries by.
   * @param {string} s - Field name for ordering queries.
   */
  setOrderStr(s) {
    this.orderStr = s;
  }
  /**
   * Generates a Firestore query based on input parameters.
   * @param {object} queryJson - JSON object defining query parameters.
   *   - `where`: Array of conditions, each containing `attribute`, `type`, and `val`.
   *   - `order`: Field to order by (default is "date").
   *   - `limit`: Maximum number of documents to retrieve.
   * @param {array} path - Firestore path as an array (optional, defaults to class's path).
   * @param {string|undefined} owner - Filters queries by owner field if provided.
   * @returns {object} - Firestore query reference.
   */
  async generateQueary(queryJson, path, owner) {
    let whereMap = queryJson.where.map((obj) => {
      if (obj.attribute !== void 0) {
        return where(obj.attribute, obj.type || "==", obj.val);
      }
    }).filter((obj) => obj !== void 0);
    if (owner) {
      whereMap.push(where("owner", "==", owner));
    }
    path = path || this.path;
    let queryParams = [...whereMap];
    let order = queryJson.order || this.orderStr;
    if (order !== "noOrder" && order !== void 0) {
      queryParams.push(orderBy(order));
    }
    if (queryJson.limit) {
      queryParams.push(limit(queryJson.limit));
    }
    let queryRef = query(collection(...path), ...queryParams);
    return queryRef;
  }
};

// node_modules/flinntech/src/components/serviceTech/APITech/auth.service.js
var Auth = class {
  // Observer for read operations
  /**
   * Constructor initializes the Auth class with necessary services.
   * @param {string} endpoint - API endpoint base URL.
   * @param {object} db - Firestore database instance.
   * @param {object} storage - Firebase storage instance.
   * @param {object} auth - Firebase authentication instance.
   * @param {function} dispatch - State dispatch function.
   */
  constructor(endpoint, db, storage, auth, dispatch) {
    // Class variables
    __publicField(this, "urlEndpoint", "");
    // Base URL for API endpoints
    __publicField(this, "dispatch");
    // Dispatch function for state management
    __publicField(this, "componentList");
    // List of components related to the app
    __publicField(this, "userStr", "flinnappsUser");
    // Key for storing user info in localStorage
    __publicField(this, "QuearyGenerator");
    // Instance of the QueryGenerator class
    __publicField(this, "DB");
    // Firestore database instance
    __publicField(this, "storage");
    // Firebase storage instance
    __publicField(this, "auth");
    // Firebase auth instance
    __publicField(this, "userEmail");
    // Logged-in user's email
    __publicField(this, "path", []);
    // Default path for database operations
    __publicField(this, "postObserver", new baseObserver_default());
    // Observer for post operations
    __publicField(this, "dispatchObserver", new baseObserver_default());
    // Observer for dispatch events
    __publicField(this, "readObserver", new baseObserver_default());
    binder.bind(this);
    this.urlEndpoint = endpoint;
    this.DB = db;
    this.storage = storage;
    this.auth = auth;
    this.dispatch = dispatch;
    this.path = [this.DB, `${this.urlEndpoint}users`, `${this.urlEndpoint}APP`, "components"];
    this.QuearyGenerator = new QuearyGenerator(this.DB, this.urlEndpoint);
  }
  // --- Setters for various services and configurations ---
  setAuth(a) {
    this.auth = a;
  }
  /**
   * set the storage for uploading pictures
   * @param {*} s 
   */
  setStorage(s) {
    this.storage = s;
  }
  /**
   * set the path for which the query uses to grab the data
   * @param {*} p 
   */
  setPath(p) {
    this.path = p;
  }
  /**
   * set the database and let the query generator know about it.
   * Mostly firebase but can be other db
   * @param {*} db 
   */
  setDB(db) {
    this.DB = db;
    this.QuearyGenerator.setDB(db);
  }
  /**
   * allow auth to send ui callbacks
   * @param {*} d 
   */
  setDispatch(d) {
    this.dispatch = d;
  }
  /**
   * Allow auth to make changes to front end model
   * @param {*} l 
   */
  setComponentList(l) {
    this.componentList = l;
  }
  /**
   * set up the user
   * @param {} s 
   */
  setUserStr(s) {
    this.userStr = s;
    this.QuearyGenerator.setUrl(s);
  }
  // --- Observer methods for managing subscriptions ---
  /**
   * 
   * @returns the observer to make observations on post req
   */
  getPostObserver() {
    return this.postObserver;
  }
  /**
   * set the observer to be able to subscribe to posts
   * @param {*} o 
   */
  setPostObserver(o) {
    this.postObserver = o;
  }
  /**
   * Subscribe to the post res
   * @param {*} f 
   */
  subscribeToPostObserver(f) {
    this.postObserver.subscribe(f);
  }
  /**
   * 
   * @returns observer for all get
   */
  getReadObserver() {
    return this.readObserver;
  }
  /**
   * set an observer for observations on getting data
   * @param {*} o 
   */
  setReadObserver(o) {
    this.readObserver = o;
  }
  /**
   * Subscribe to updates on getting data
   * @param {} f 
   */
  subscribeToReadObserver(f) {
    this.readObserver.subscribe(f);
  }
  /**
   * 
   * @returns the path the a given database 
   */
  getPath() {
    return this.path;
  }
  /**
   * 
   * @returns observer for observations on backend -> ui changes
   */
  getDispatchObserver() {
    return this.dispatchObserver;
  }
  /**
   * Create the observer for observations on backend ui
   * @param { } o 
   */
  setDispatchObserver(o) {
    this.dispatchObserver = o;
  }
  /**
   * subscribe to ui changes from the backend
   * @param {*} f 
   */
  subscribeToDispatchObserver(f) {
    this.dispatchObserver.subscribe(f);
  }
  // --- Getter for the QueryGenerator ---
  getQueryGenerator() {
    return this.QuearyGenerator;
  }
  /**
   * Seet the query generator to generate queries
   * @param {*} qg 
   */
  setQueryGenerator(qg) {
    this.QuearyGenerator = qg;
  }
  // --- Authentication Methods ---
  /**
   * Login method authenticates a user with email and password.
   * @param {string} email - User's email.
   * @param {string} password - User's password.
   * @returns {object} - Authenticated user object or error object.
   */
  async login(email, password) {
    let user;
    let e;
    await signInWithEmailAndPassword(this.auth, email, password).then((userCredential) => {
      user = userCredential.user;
    }).catch((error) => {
      const errorMessage = error.message;
      let newString = errorMessage.slice(9, errorMessage.length - 1);
      e = { error: newString };
      console.log(e);
    });
    if (user) {
      let saveUser = user;
      this.dispatch({ login: true });
      await localStorage.setItem(this.userStr, JSON.stringify(saveUser));
      if (this.componentList !== void 0 && this.dispatch !== void 0) {
        user = await this.getuser(email);
      }
    } else {
      user = e;
    }
    return user;
  }
  /**
  * Registers a new user with email and password and optionally caches user data.
  * @param {string} email - User's email address.
  * @param {string} password - User's password.
  * @param {boolean} addToCache - Whether to add the user data to cache.
  * @returns {object} - The created user object or an error object.
  */
  async register(email, password, addToCache) {
    let user;
    await createUserWithEmailAndPassword(this.auth, email, password).then((userCredential) => {
      user = userCredential.user;
    }).catch((error) => {
      const errorCode = error.code;
      let errorMessage = error.message;
      let eL = errorMessage.length - 1;
      let newString = errorMessage.slice(9, eL);
      user = { error: newString };
    });
    if (!user.error) {
      this.userEmail = user.email;
      localStorage.setItem(this.userStr, JSON.stringify(user));
    }
    return user;
  }
  /**
   * Logs out the current user and clears all local storage data.
   */
  async logout() {
    await localStorage.clear();
    localStorage.setItem(this.userStr, void 0);
    let logouser;
    await onAuthStateChanged(this.auth, (user) => {
      if (user) {
        logouser = user.uid;
      }
    });
    if (logouser) {
      await signOut(this.auth);
    }
    await localStorage.setItem(this.userStr, null);
    window.location.href = "/";
  }
  /**
   * Sends a password reset email to the provided email address.
   * @param {string} email - User's email address.
   */
  sendForgotPasswordChange(email) {
    const auth = getAuth();
    sendPasswordResetEmail(auth, email).then(() => {
    }).catch((error) => {
      const errorCode = error.code;
      const errorMessage = error.message;
    });
  }
  /**
   * Checks if a user is logged in and clears data if not.
   * @returns {Promise<object>} - A promise resolving to the logged-in user or rejecting if not.
   */
  async checkIfLoggedIn() {
    return new Promise((resolve, reject) => {
      onAuthStateChanged(this.auth, async (user) => {
        if (user) {
          resolve(user);
        } else {
          await localStorage.setItem(this.userStr, null);
          await localStorage.clear();
          localStorage.setItem(this.userStr, void 0);
          let logotUser;
          await onAuthStateChanged(this.auth, (user2) => {
            if (user2) {
              logotUser = user2.uid;
            }
          });
          if (logotUser) {
            await signOut(this.auth);
          }
          await window.location.reload();
        }
      });
    });
  }
  /**
   * Retrieves the current user from local storage.
   * @returns {object} - The current user object from local storage.
   */
  async getCurrentUser() {
    let item = await localStorage.getItem(this.userStr);
    item = await JSON.parse(item);
    return item;
  }
  /**
   * Sets the current user in local storage.
   * @param {object} student - The user object to store.
   */
  async setCurrentUser(student) {
    await localStorage.setItem(this.userStr, JSON.stringify(student));
  }
  /**
   * Logs in a user using their email and password.
   * @param {string} email - User's email address.
   * @param {string} password - User's password.
   */
  async loginToDel(email, password) {
    await signInWithEmailAndPassword(this.auth, email, password).then((userCredential) => {
    }).catch((error) => {
      const errorCode = error.code;
      const errorMessage = error.message;
    });
  }
  /**
   * Deletes the currently authenticated user account.
   */
  async delAccount() {
    const auth = getAuth();
    const user = auth.currentUser;
    await deleteUser(user).then(() => {
    }).catch((error) => {
    });
  }
  /**
   * Sends a notification using the given body and URL.
   * @param {object} body - The notification payload.
   * @param {string} url - The API endpoint to send the notification to.
   */
  async notify(body, url) {
    fetch(url, {
      method: "POST",
      mode: "no-cors",
      body: JSON.stringify(body),
      headers: {
        "Conent-Type": "application/json"
        // Note: Typo in 'Content-Type'
      }
    });
  }
  /**
   * Updates the password of the currently authenticated user.
   * @param {string} password - The new password to set.
   * @returns {boolean} - Returns true on successful update.
   */
  async changePassword(password) {
    const auth = getAuth();
    const user = auth.currentUser;
    const newPassword = password;
    await updatePassword(user, newPassword).then(() => {
    }).catch((error) => {
    });
    return true;
  }
  /**
   * Fetches a snapshot of data from Firebase Firestore.
   * @param {object} queryJson - The query parameters.
   * @param {string} path - The Firestore path.
   * @param {boolean} owner - Whether to include owner filtering.
   * @returns {array} - The raw data from the query snapshot.
   */
  async firebaseGetterSnapshot(queryJson, path, owner) {
    owner = owner === true ? this.userEmail : void 0;
    let components = await this.QuearyGenerator.generateQueary(queryJson, path, owner);
    let rawData = [];
    let comps1 = await onSnapshot(components, async (querySnapshot) => {
      rawData = await this.getRawData(querySnapshot);
    });
    return rawData;
  }
  //Value = value pair (key value) example: string such as "1231454891"
  //ComponentList = adding to the componentList
  //Attribute = attribute pair always a string "campaignID" or "_id"
  //Type = OPTIONAL this RETURNS the getList, string "monster",
  async firebaseGetter(queryJson, path, owner) {
    owner = owner === true ? this.userEmail : void 0;
    let components = await this.QuearyGenerator.generateQueary(queryJson, path, owner);
    let comps = await getDocs(components);
    return await this.getRawData(comps);
  }
  /**
  * Processes raw data from a snapshot, adds components, and triggers observers.
  * @param {object} dataSnapShot - Firestore data snapshot.
  * @returns {array} - Array of processed components.
  */
  async getRawData(dataSnapShot) {
    let rawData1 = [];
    for (const key in dataSnapShot.docs) {
      let data = dataSnapShot.docs[key].data();
      rawData1.push(data);
    }
    let componentsAdded = await this.componentList.addComponents(rawData1, true);
    if (this.dispatch) {
      await this.dispatch({ snapShot: { dataRetrieved: componentsAdded } });
    }
    this.readObserver.run(componentsAdded);
    return componentsAdded;
  }
  /**
   * Retrieves a count of documents from a Firestore query.
   * @param {object} queryJson - Query parameters.
   * @param {string} path - Firestore path.
   * @param {boolean} owner - Whether to include owner filtering.
   * @returns {number} - The count of documents.
   */
  async getCount(queryJson, path, owner) {
    owner = owner === true ? this.userEmail : void 0;
    let countQuery = await this.QuearyGenerator.generateQueary(queryJson, path, owner);
    let count = await getCountFromServer(countQuery);
    return count.data().count;
  }
  /**
   * Retrieves user data by email and sets it in the state.
   * @param {string} email - User's email address.
   * @returns {object} - The user object.
   */
  async getuser(email) {
    this.userEmail = email;
    let user = await this.componentList.getComponentFromBackend({ type: "user", ids: email });
    if (user) {
      this.dispatch({ currentUser: user, email, gotUser: true });
    }
    return user;
  }
  /**
   * Retrieves all data based on a query and path.
   * @param {object} queryJson - Query parameters.
   * @param {string} path - Firestore path (default to "users").
   */
  async GetAllData(queryJson, path) {
    path = path || [this.db, this.urlEndpoint + "users"];
    this.firebaseGetter(queryJson, path);
  }
  /**
   * Uploads a file to Firebase Storage.
   * @param {File} file - File object to upload.
   * @param {string} name - File name in storage.
   */
  async uploadPics(file, name) {
    const storageRef = ref(this.storage, name);
    await uploadBytes(storageRef, file).then((snapshot) => {
      console.log("Uploaded a file!");
    });
  }
  /**
   * Downloads a file from Firebase Storage and returns its URL.
   * @param {string} newName - File name in storage.
   * @returns {string} - Download URL of the file.
   */
  async downloadPics(newName) {
    let src;
    await getDownloadURL(ref(this.storage, newName)).then((url) => {
      src = url;
    });
    return src;
  }
  /**
   * Deletes a file from Firebase Storage.
   * @param {string} newName - File name in storage.
   */
  deletePics(newName) {
    const delRef = ref(this.storage, newName);
    deleteObject(delRef).then(() => {
    }).catch((error) => {
    });
  }
  /**
   * Prepares an array of objects for operations by converting them to JSON.
   * @param {array|object} arr - Array or single object to prepare.
   * @returns {array} - Prepared array of JSON objects.
   */
  prep(arr) {
    arr = Array.isArray(arr) ? arr : [arr];
    arr = arr.map((obj) => {
      let json = obj;
      if (obj.getJson) {
        json = obj.getJson();
      }
      return json;
    });
    arr = arr.filter((obj) => obj !== void 0);
    return arr;
  }
  /**
   * Adds an array of components to Firestore and updates state.
   * @param {array} arr - Array of components to add.
   * @param {string} path - Firestore path.
   * @param {string} dispatchKey - Key for dispatch action.
   * @param {string} timeKey - Key for timestamp.
   * @returns {array} - Array of added components.
   */
  async add(arr, path, dispatchKey, timeKey) {
    arr = await arr.map((obj) => {
      if (obj.getJson().owner === "" || obj.getJson().owner === void 0) {
        obj.setCompState({ owner: this.userEmail });
      }
      return obj;
    });
    return await this.operate(arr, setDoc, path, dispatchKey || "added", timeKey || "date");
  }
  /**
   * Updates an array of components in Firestore.
   * @param {array} arr - Array of components to update.
   * @param {string} path - Firestore path.
   * @param {string} timeKey - Key for timestamp.
   * @param {string} dispatchKey - Key for dispatch action.
   * @returns {array} - Array of updated components.
   */
  async update(arr, path, timeKey, dispatchKey) {
    return await this.operate(arr, updateDoc, path, dispatchKey || "updated", timeKey || "lastUpdated");
  }
  /**
   * Deletes an array of components from Firestore.
   * @param {array} arr - Array of components to delete.
   * @param {string} path - Firestore path.
   * @param {string} dispatchKey - Key for dispatch action.
   * @returns {array} - Array of deleted components.
   */
  async del(arr, path, dispatchKey) {
    return await this.operate(arr, deleteDoc, path, dispatchKey || "deleted");
  }
  /**
   * Executes Firestore operations (add, update, delete) on an array of components.
   * @param {array} arr - Array of components to operate on.
   * @param {function} operation - Firestore operation (setDoc, updateDoc, deleteDoc).
   * @param {string} path - Firestore path.
   * @param {string} dispatchKey - Key for dispatch action.
   * @param {string} timeKey - Key for timestamp.
   * @returns {array} - Array of components after operation.
   */
  async operate(arr, operation, path, dispatchKey, timeKey) {
    try {
      arr = await this.prep(arr);
      path = path || this.path;
      for (let component of arr) {
        if (timeKey) {
          component[timeKey] = await serverTimestamp();
        }
        await this.postObserver.run([component]);
        let params = [doc(...path, component._id)];
        if (operation !== deleteDoc) {
          params.push(component);
        }
        await operation(...params);
      }
      if (this.dispatch) {
        this.dispatch({ [dispatchKey]: arr, dispatchComplete: true });
      }
      this.dispatchObserver.run([{ [dispatchKey]: arr }]);
      return arr;
    } catch (e) {
      console.log(e);
      console.error(arr, "something went wrong with this operation");
    }
  }
};
var auth_service_default = Auth;

// node_modules/flinntech/src/components/componentListNPM/componentListInterface.js
var ComponentListInterface = class {
  // API service instance for managing API interactions.
  /**
   * Constructor to initialize the ComponentListInterface.
   * @param {Function} dispatch - Dispatch function for state management.
   * @param {string} endpoint - API endpoint.
   * @param {Object} db - Database instance.
   * @param {Object} storage - Storage instance.
   * @param {Object} auth - Authentication instance.
   */
  constructor(dispatch, endpoint, db, storage, auth) {
    __publicField(this, "factory");
    // Factory instance for managing components.
    __publicField(this, "updater");
    // Placeholder for any updater logic (not yet implemented in this class).
    __publicField(this, "operationsFactory");
    // OperationsFactory instance for managing operations logic.
    __publicField(this, "dispatch");
    // Dispatch function for handling state updates.
    __publicField(this, "APIService");
    binder.bind(this);
    this.dispatch = dispatch;
    this.getFactory();
    this.getAPIService(endpoint, db, storage, auth, dispatch);
  }
  /**
   * Gets or creates a Factory instance for managing components.
   * @returns {Factory} The Factory instance.
   */
  getFactory() {
    if (this.factory === void 0) {
      this.factory = new factory_default(this);
    }
    return this.factory;
  }
  /**
   * Gets or creates an API service instance for managing API interactions.
   * @param {string} endpoint - API endpoint.
   * @param {Object} db - Database instance.
   * @param {Object} storage - Storage instance.
   * @param {Object} auth - Authentication instance.
   * @param {Function} dispatch - Dispatch function for state management.
   * @returns {Auth} The API service instance.
   */
  getAPIService(endpoint, db, storage, auth, dispatch) {
    if (this.APIService === void 0) {
      this.APIService = new auth_service_default(endpoint, db, storage, auth, dispatch);
    }
    return this.APIService;
  }
  /**
   * Creates a new ComponentList instance.
   * @returns {ComponentList} A new ComponentList instance.
   */
  createComponentList() {
    return new ComponentList(this);
  }
  /**
   * Gets or creates an OperationsFactory instance for managing operations logic.
   * @returns {OperationsFactory} The OperationsFactory instance.
   */
  getOperationsFactory() {
    if (this.operationsFactory === void 0) {
      this.operationsFactory = new OperationsFactory(this);
      this.factory.setOperationsFactory(this.operationsFactory);
    }
    return this.operationsFactory;
  }
  /**
   * Creates and returns a new OperationsFactory instance.
   * @returns {OperationsFactory} A new OperationsFactory instance.
   */
  getNewOperationsFactory() {
    let opps = new OperationsFactory(this);
    return opps;
  }
};

// node_modules/flinntech/src/components/formTech/inputBaseClass.jsx
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var InputBaseClass = class extends BaseComponent {
  constructor(props) {
    super(props);
    this.domList = [
      "a",
      "button",
      "div",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "img",
      "input",
      "p",
      "span",
      "table",
      "tr",
      "td",
      "th",
      "ul",
      "li",
      "ol",
      "form",
      "textarea",
      "select",
      "option",
      "label",
      "nav",
      "footer",
      "header",
      "article",
      "section",
      "aside",
      "main",
      "video",
      "audio",
      "iframe",
      "canvas"
    ];
    this.state = {
      ...this.state,
      wrapperClass: "FCWrapper",
      formClass: "FCInputForm",
      labelClass: "defaultLabel",
      errorClass: "defaultErrorMessage",
      interface: "form"
    };
  }
  /**
   * set the obj so that there can be multiple objects that get updated per form
   */
  setObj() {
    var _a, _b;
    if (!this.props.prepareOnClick) {
      let obj = this.props.obj || (this.props.inPopup ? (_a = this.propsState) == null ? void 0 : _a.currentPopupComponent : (_b = this.propsState) == null ? void 0 : _b.currentComponent);
      this.obj = this.isArray(obj);
    }
  }
  /**
   * setup ui compoents for the form
   */
  preSetup() {
    this.setComponents(["wrapper", "form", "label", "error"]);
  }
  /**
   * 
   * @returns gets the full form html
   */
  getInnerContent() {
    this.innerContent = [this.props.label && this.label.getHtml(), this.getFormHtml(), this.props.errorText && this.error.getHtml()];
    return this.innerContent;
  }
  /**
   * 
   * @returns the full html
   */
  getHtml() {
    this.mapInnerContent();
    let html = this.wrapper.getHtml({ type: "div", content: this.innerContent });
    this.html = (0, import_jsx_runtime4.jsx)(import_jsx_runtime4.Fragment, { children: html });
    return this.html;
  }
  /**
   * 
   * @returns the actual form part of the html
   */
  getFormHtml() {
    this.getInputProps(this.props.type || "input");
    this.additionalPropsSetup();
    return this.form.getHtml({ type: this.props.type ? this.props.type : "input", content: this.content, props: this.inputProps });
  }
  additionalPropsSetup() {
  }
  /**
   * Directly updates the object(s)
   * @param {*} event 
   */
  handleChange(event) {
    let { name, value } = event.target;
    for (let obj of this.obj) {
      if (this.props.isPropArray) {
        let currentVal = obj.getJson()[this.props.name] || [];
        if (!Array.isArray(currentVal)) {
          currentVal = [currentVal];
        }
        if (!Array.isArray(currentVal[0])) {
          currentVal[0] = [currentVal[0]];
        }
        currentVal[0] = value;
        value = currentVal;
      }
      obj.setCompState({
        [this.props.name]: value
      });
    }
    this.afterChange(event);
  }
  /**
   * allow for callbacks for when the even is done
   * @param {*} event 
   */
  afterChange(event) {
    if (this.props.update) {
      for (let obj of this.obj) {
        let update = this.props.update === true ? void 0 : { ...this.props.update };
        obj == null ? void 0 : obj.update(update);
      }
    }
    if (this.props.sendUpdate && this.props.app) {
      this.app.dispatch({ formUpdate: this.props.type });
    }
    if (this.props.callbackFunc) {
      this.props.callbackFunc(this.obj);
    }
    this.additionalChanges(event);
    this.setState({});
  }
  additionalChanges(event) {
  }
  /**
  * Prepare on click with a json object
  * prepareOnClick={operation:"exe cleanPrepare", operate:"exe addpost", }
  * Will not prepare on click multiple json objs instead you must specify a number and multiple will only work with adding an obj
  */
  async prepareOnClick() {
    var _a;
    if (this.props.prepareOnClick && this.props.app) {
      let obj = this.props.obj;
      if (obj) {
        obj = this.isArray(obj);
      }
      obj = await ((_a = this.props.app) == null ? void 0 : _a.state.componentList.getOperationsFactory().prepare({ ...obj }));
      if (obj) {
        obj = this.isArray(obj);
      }
      this.obj = obj;
    }
  }
  /**
   * update a value all at once. Same as handleHTMLChange but made to me more generic in clase the html change needs to be more complicated.
   * @param {} value 
   */
  objDispatch(value) {
    for (let obj of this.obj) {
      obj.setCompState({
        [this.props.name]: value
      });
    }
    this.afterChange();
  }
  /**
  * @param {} value 
  */
  handleChangeWithoutEvent(obj) {
    for (let o in this.obj) {
      o.setCompState({ [obj.name]: obj.value });
    }
    this.afterChange();
  }
  /**
   * TODO looks like there might be a better way for this.
   * @param {*} type 
   * @returns props for the input
   */
  getInputProps(type) {
    var _a;
    this.inputProps = {
      onChange: this.props.handleChange ? (e) => {
        this.props.handleChange(e, this.obj);
      } : this.handleChange,
      value: this.obj[0] ? (_a = this.obj[0]) == null ? void 0 : _a.getJson()[this.props.name] : this.props.value,
      type: this.props.inputType || this.props.type,
      onFocus: this.props.onFocus || this.onFocus,
      placeholder: this.props.placeholder,
      name: this.props.name,
      min: this.props.min,
      max: this.props.max,
      cols: this.props.cols || "",
      rows: this.props.rows || 5,
      resize: this.props.resize || "true",
      autoComplete: this.props.autoComplete ? this.props.autoComplete : "off",
      id: this.props.id,
      checked: this.props.checked,
      spellCheck: this.props.type === "password" || this.props.spellCheck === void 0 ? false : this.props.spellCheck,
      minLength: this.props.minLength,
      maxLength: this.props.maxLength
    };
    if (!this.domList.includes(type)) {
      this.inputProps.handleChangeWithoutEvent = !this.props.update ? this.props.handleChangeWithoutEvent ? this.props.handleChangeWithoutEvent : this.handleChangeWithoutEvent : () => {
        console.log("");
      };
      this.inputProps.selectOptions = this.props.selectOptions;
      this.inputProps.textOptions = this.props.textOptions;
      this.inputProps.unit = this.props.unit ? this.props.unit : "$";
      this.inputProps.tickClass = this.props.tickClass;
      this.inputProps.handleHTMLChange = this.props.handleHTMLChange || this.objDispatch;
      this.inputProps.doesMath = this.props.doesMath;
      this.inputProps.objDispatch = this.objDispatch;
      this.inputProps.emitClickedOutside = this.props.emitClickedOutside;
      this.inputProps.updateOnClickOutside = this.props.updateOnClickOutside;
    }
    if (this.props.required) {
      this.inputProps.required = true;
    }
    if (this.props.disabled) {
      this.inputProps.disabled = true;
    }
    return this.inputProps;
  }
};

// node_modules/flinntech/src/components/formTech/buttons/baseButton.jsx
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var BaseButton = class extends InputBaseClass {
  /**
   * Initializes the BaseButton instance with default state and props.
   * @param {Object} props - Properties passed to the button component.
   */
  constructor(props) {
    super(props);
    this.state.formClass = "FCDefaultButton";
  }
  /**
   * Handles the button click event.
   * Invokes a buttonClick handler if provided in props or falls back to the default buttonClickFunc.
   * Executes a callback function if provided in props.
   */
  buttonClick() {
    if (this.props.buttonClick) {
      this.props.buttonClick(this.obj);
    } else {
      this.buttonClickFunc();
    }
    if (this.props.callbackFunc) {
      this.props.callbackFunc(this.obj);
    }
  }
  /**
   * Default button click handler.
   * Can be overridden by subclasses to provide specific behavior.
   */
  buttonClickFunc() {
  }
  /**
   * Sets up additional configurations for the button, such as attaching click events.
   */
  additionalSetup() {
    this.form.setOnClick(this.buttonClick);
  }
  /**
   * Generates and returns the HTML for the button.
   * Sets styles, defines the button content, and specifies the structure.
   * @returns {Object} HTML structure for the button.
   */
  getFormHtml() {
    this.form.setStyle({ cursor: "pointer" });
    this.content = this.props.content || (this.content || (0, import_jsx_runtime5.jsx)(import_jsx_runtime5.Fragment, { children: "button" }));
    return this.form.getHtml({ type: "div", content: this.content });
  }
};

// node_modules/flinntech/src/components/formTech/themes/classRegistry.js
var classRegistry_exports = {};
__export(classRegistry_exports, {
  DefaultRegistry: () => DefaultRegistry
});
import "/Users/alandavidson/flinntech/projects/salescaptureAI/salescaptureAI/node_modules/flinntech/src/components/formTech/themes/css/default.scss";
var DefaultRegistry = class {
  constructor() {
    __publicField(this, "FCInputForm", "defaultInputForm");
    __publicField(this, "FCWrapper", "defaultWrapper");
    __publicField(this, "FCError", "defaultErrorMessage");
    __publicField(this, "FCLabel", "defaultLabel");
    __publicField(this, "FCDefaultButton", "defaultButton");
    __publicField(this, "FCDefaultDelButton", "delButton");
    __publicField(this, "FCImgButton", "imgButton");
  }
};

// node_modules/flinntech/src/components/templateTech/factories/baseClassFactory.jsx
var BaseClassFactory = class {
  constructor(registry) {
    __publicField(this, "factory", {});
    binder.bind(this);
    if (registry) {
      this.registry = registry;
      this.registerListWithFactory();
    }
  }
  registerListWithFactory() {
    for (const key in this.registry) {
      if (Object.prototype.hasOwnProperty.call(this.registry, key)) {
        const lowerCaseKey = key.charAt(0).toLowerCase() + key.slice(1);
        this.factory[lowerCaseKey] = this.registry[key];
      }
    }
  }
  /**
   * get a map item
   * @param {*} type 
   * @param {*} obj 
   * @returns a react item for the map
   */
  getComponent(type) {
    let comp = void 0;
    if (this.factory[type]) {
      comp = new this.factory[type]();
    }
    return comp;
  }
  /**
   * register a new map component.
   * @param {*} type 
   * @param {*} comp 
   */
  registerComponent(type, comp) {
    this.factory[type] = comp;
  }
};

// node_modules/flinntech/src/components/formTech/themes/themeFactory.js
var ThemeFactory = class extends BaseClassFactory {
  constructor() {
    super(classRegistry_exports);
    this.factory.default = DefaultRegistry;
  }
};

// node_modules/flinntech/src/components/templateTech/factories/baseReactFactory.jsx
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var BaseReactFactory = class {
  constructor() {
    __publicField(this, "factory", {});
  }
  /**
   * get a map item
   * @param {*} type 
   * @param {*} obj 
   * @returns a react item for the map
   */
  getComponent(type, props) {
    let Comp = void 0;
    if (this.factory[type]) {
      Comp = this.factory[type];
    }
    return (0, import_jsx_runtime6.jsx)(Comp, { ...props });
  }
  /**
   * register a new map component.
   * @param {*} type 
   * @param {*} comp 
   */
  registerComponent(type, comp) {
    this.factory[type] = comp;
  }
};

// node_modules/flinntech/src/components/formTech/buttons/addButton.jsx
var AddButton = class extends BaseButton {
  /**
   * Use component list to add the component directrly
   */
  buttonClickFunc() {
    let json = this.props.add;
    this.componentList.addComponents(json);
  }
};

// node_modules/flinntech/src/components/serviceTech/Util/mathService.js
var MathService = class {
  constructor() {
    binder.bind(this);
  }
  doMath(val) {
    val = val.replace(/\s+/g, "");
    const operatorPattern = /(\d+)([+\-*/])(\d+)/;
    const match = val.match(operatorPattern);
    if (!match) {
      throw new Error("Invalid input");
    }
    const num1 = parseFloat(match[1]);
    const operator = match[2];
    const num2 = parseFloat(match[3]);
    let mathJson = {
      "+": num1 + num2,
      "-": num1 - num2,
      "*": num1 * num2,
      "/": num1 / num2
    };
    let result = mathJson[operator];
    return result;
  }
};
var mathService = new MathService();

// node_modules/flinntech/src/components/formTech/singleForms/doMathInput.jsx
var DoMathInput = class extends InputBaseClass {
  /**
   * Initializes the DoMathInput instance.
   * @param {Object} props - Properties passed to the input component.
   */
  constructor(props) {
    super(props);
  }
  /**
   * Lifecycle method invoked after the component is mounted.
   * Adds an event listener to detect keyup events.
   */
  componentDidMount() {
    document.addEventListener("keyup", this.doMath);
  }
  /**
   * Lifecycle method invoked before the component is unmounted.
   * Removes the keyup event listener to avoid memory leaks.
   */
  componentWillUnmount() {
    document.removeEventListener("keyup", this.doMath);
  }
  /**
   * Handles additional changes in the input field.
   * Updates the component's state with the latest value entered by the user.
   * @param {Event} event - The change event triggered by the input field.
   */
  additionalChanges(event) {
    let { name, value } = event.target;
    this.setState({ val: value });
  }
  /**
   * Executes a mathematical operation when the Enter key is pressed.
   * Uses the `mathService` to calculate the result and updates the state of the associated component.
   * @param {KeyboardEvent} e - The keyup event triggered by the user.
   */
  async doMath(e) {
    if (e.key === "Enter" && this.state.val !== void 0) {
      let obj = this.obj[0];
      let math = await mathService.doMath(this.state.val).toString();
      await obj.setCompState({ [this.props.name]: math });
      obj.update();
      await this.setState({ val: void 0 });
    }
  }
};

// node_modules/flinntech/src/components/formTech/buttons/popupButton.jsx
var PopupButton = class extends BaseButton {
  /**
   * This button is setup with the popup machine.
   * It can prepare an obj of adding and updating
   */
  async buttonClickFunc() {
    let obj = this.obj;
    let type = obj.type;
    if (this.props.popupSwitch.includes("add")) {
      obj = obj[0] ? obj[0] : { type: this.getFactoryTypeString(this.props.popupSwitch.slice(3)) };
      obj = { prepare: { ...obj }, amount: this.props.amount, clean: this.props.clean };
      obj = await this.operationsFactory.prepare(obj);
      if (obj.length === 1) {
        obj = obj[0];
        type = obj.getJson().type;
      }
    }
    if (Array.isArray(obj) && obj.length === 1) {
      obj = obj[0];
    }
    let currentItem = this.props.setCurrnetItem && { ["current" + this.getCapitalFirstLetter(type)]: obj };
    let dispatchObj = { popupSwitch: this.props.popupSwitch, currentPopupComponent: obj, ...currentItem };
    await this.dispatch({ ...dispatchObj });
  }
};

// node_modules/flinntech/src/components/formTech/buttons/updateButton.jsx
var UpdateButton = class extends BaseButton {
  /**
   * obj update itself with the update params
   */
  buttonClickFunc() {
    for (let obj of this.obj) {
      obj.update(this.props.updateParams);
    }
    if (this.props.isPopup) {
      this.dispatch({ popupSwitch: "", currentPopupComponent: void 0 });
    }
  }
};

// node_modules/flinntech/src/components/formTech/buttons/runButton.jsx
var RunButton = class extends BaseButton {
  /**
   * set whatever is in prepare state to be run
   */
  buttonClickFunc() {
    let arr = this.operationsFactory.addToComponentList(this.props.skipBackendUpdate);
    let currentItem = this.props.setCurrnetItem && { ["current" + this.getCapitalFirstLetter(arr[0].getJson().type)]: arr[0] };
    let dispatchObj = {};
    if (this.props.isPopup) {
      dispatchObj = { popupSwitch: "", currentPopupComponent: void 0 };
    }
    this.dispatch({ ...dispatchObj, ...currentItem });
  }
};

// node_modules/flinntech/src/components/formTech/singleForms/quillForm.jsx
var import_react_quill = __toESM(require_lib());
var import_react3 = __toESM(require_react());
import "/Users/alandavidson/flinntech/projects/salescaptureAI/salescaptureAI/node_modules/react-quill/dist/quill.snow.css";
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var QuillForm = class extends InputBaseClass {
  constructor(props) {
    super(props);
    this.quillRef = import_react3.default.createRef();
  }
  /**
   * 
   * @returns form for using quil library
   */
  getFormHtml() {
    return (0, import_jsx_runtime7.jsx)(
      "div",
      {
        children: (0, import_jsx_runtime7.jsx)(
          import_react_quill.default,
          {
            ref: this.quillRef,
            modules: {
              toolbar: [
                [
                  "bold",
                  "italic",
                  "underline",
                  // 'strike', 
                  "blockquote"
                ],
                [{
                  "color": [
                    "#F4F5F8",
                    "#E6FFFD",
                    "#99AFD1",
                    "#ecd23a",
                    "#fd5259",
                    "#D7ABF7",
                    "#9EFFA0",
                    "#F4F5F888",
                    "#E6FFFD77",
                    "#99AFD188",
                    "#ecd23a88",
                    "#fd525988",
                    "#D7ABF788",
                    "#9EFFA088",
                    "#000000",
                    "#E6FFFD44",
                    "#99AFD155",
                    "#ecd23a55",
                    "#fd525955",
                    "#D7ABF755",
                    "#9EFFA055"
                  ]
                }, { "background": [false, "black", "#00274D", "#C1A71B", "#5F0C0C", "#4B0082", "#002E07"] }],
                [, "code-block"],
                [{ "list": "ordered" }, { "list": "bullet" }, { "align": [] }],
                // superscript/subscript
                [{ "indent": "-1" }, { "indent": "+1" }],
                // text direction
                // [{ 'header': [false, 1, 2, 3] }],
                [{ "size": ["small", false, "large", "huge"] }],
                // [],['link'], // Link insertion
                [],
                ["clean"]
                // remove formatting button
              ]
            },
            style: this.props.wrapperStyle ? { ...this.props.wrapperStyle } : { minHeight: "100%", padding: "8px", minWidth: "99%", width: "100%" },
            theme: "snow",
            value: this.obj[0].getJson()[this.props.name],
            onChange: this.objDispatch
          }
        )
      }
    );
  }
};

// node_modules/flinntech/src/components/formTech/buttons/uploadButtonBaseClass.jsx
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var UploadButtonBaseClass = class extends BaseButton {
  /**
   * Initializes the UploadButtonBaseClass instance.
   * @param {Object} props - Properties passed to the upload button component.
   */
  constructor(props) {
    super(props);
  }
  /**
   * Creates file information object based on the selected file.
   * Generates a unique file path and preview URL for the selected file.
   * @param {Event} event - The file input change event.
   * @returns {Object} The file information object.
   */
  createFileInfo(event) {
    const currentDate = /* @__PURE__ */ new Date();
    const month = (currentDate.getMonth() + 1).toString().padStart(2, "0");
    const day = currentDate.getDate().toString().padStart(2, "0");
    let newDay = `${Math.floor(Math.random() * 9999)}-${month + day}`;
    let path = "images/" + newDay + event.target.files[0].name;
    this.fileInfo = {
      selectedFile: event.target.files[0],
      path,
      pic: URL.createObjectURL(event.target.files[0])
      // Generate preview URL for the file.
    };
    this.setState({ ...this.fileInfo });
    return this.fileInfo;
  }
  /**
   * Prepares an operation based on the `prepareOnChange` prop.
   * Sets up the object to be updated and cleaned.
   */
  async prepareOnChange() {
    let obj = await this.operationsFactory.prepare({
      prepare: { ...this.props.prepareOnChange },
      clean: true
    });
    obj = obj[0];
    this.obj = obj;
  }
  /**
   * Handles the file input change event.
   * Processes the selected file, uploads it, and updates the associated component states.
   * @param {Event} event - The file input change event.
   * @returns {string|undefined} The URL of the uploaded file if applicable.
   */
  async changeHandler(event) {
    var _a;
    await this.createFileInfo(event);
    if (this.props.prepareOnChange) {
      await this.prepareOnChange();
    }
    if (this.props.callBackFunc) {
      await this.props.callBackFunc(this.obj, this.fileInfo);
    }
    let pic;
    await this.APIService.uploadPics(this.fileInfo.selectedFile, this.fileInfo.path);
    if (!this.obj.getPicSrc) {
      pic = await this.APIService.downloadPics(this.fileInfo.path);
      if (!this.props.skipUpdate && !this.state.skipUpdate) {
        if ((_a = this.obj) == null ? void 0 : _a.length) {
          for (let comp of this.obj) {
            await comp.setCompState({ [this.props.uploadAttribute || "picURL"]: pic });
          }
        } else {
          await this.obj.setCompState({ [this.props.uploadAttribute || "picURL"]: pic });
        }
      }
      if (this.props.downloadPicsCallBackFunc) {
        this.props.downloadPicsCallBackFunc(this.obj, this.fileInfo);
      }
    }
    if (this.props.runOnChange) {
      this.onSubmit();
    }
    return pic;
  }
  /**
   * Handles the submission of the form after a file is uploaded.
   * Executes additional operations and calls the finish callback function if provided.
   */
  async onSubmit() {
    if (this.props.prepareOnChange) {
      await this.operationsFactory.addToComponentList();
    }
    await this.obj.update();
    if (this.props.finishCallBackFunc) {
      this.props.finishCallBackFunc(this.obj);
    }
    this.dispatch({ imgUploaded: this.obj });
  }
  /**
   * Sets up additional styles and attributes for the upload button.
   * Configures wrapper, label, and form elements with appropriate properties.
   */
  additionalSetup() {
    this.wrapper.setStyle({ maxWidth: "300px", maxHeight: "30px", width: "fit-content" });
    this.label.setStyle({
      display: "inline-block",
      height: "35px",
      maxWidth: "fit-content",
      cursor: "pointer",
      position: "relative"
    });
    this.form.updateProps({
      accept: "image/png, image/gif, image/jpeg, image/jpg, image/webp, image/svg+xml, application/pdf",
      style: {
        position: "absolute",
        // Set position to absolute to make it fill the entire label.
        top: 0,
        left: 0,
        cursor: "pointer",
        width: "100%",
        height: "100%",
        opacity: 0
      },
      size: "6",
      type: "file",
      name: "file",
      onChange: this.changeHandler
    });
  }
  /**
   * Generates the inner content for the upload button, including error text if provided.
   * @returns {Array} The inner content of the button.
   */
  getInnerContent() {
    let formContent = this.getFormHtml();
    this.innerContent = [
      this.label.getHtml({ content: formContent, type: "label" }),
      this.props.errorText && this.error.getHtml()
    ];
    return this.innerContent;
  }
  /**
   * Generates and returns the HTML structure for the upload button.
   * Includes the content and form element inside a styled container.
   * @returns {JSX.Element} The HTML structure for the button.
   */
  getFormHtml() {
    this.content = this.props.content || (0, import_jsx_runtime8.jsx)(import_jsx_runtime8.Fragment, { children: "Upload" });
    return (0, import_jsx_runtime8.jsxs)("div", { className: this.props.containerStyle || "defaultButton", children: [
      this.content,
      this.form.getHtml({ type: "input" })
    ] });
  }
};

// node_modules/flinntech/src/components/formTech/buttons/uploadShowPic.jsx
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var UploadShowPic = class extends UploadButtonBaseClass {
  constructor(props) {
    super(props);
  }
  /**
   * 
   * @returns the ability to show the picture uploaded after sent.
   */
  getFormHtml() {
    var _a, _b;
    this.content = this.props.content || (0, import_jsx_runtime9.jsx)(import_jsx_runtime9.Fragment, { children: "Upload" });
    let objPicUrl = (_b = (_a = this.obj) == null ? void 0 : _a[0]) == null ? void 0 : _b.getJson()[this.props.uploadImgAttribute || "picURL"];
    return (0, import_jsx_runtime9.jsxs)(import_jsx_runtime9.Fragment, { children: [
      (0, import_jsx_runtime9.jsxs)("div", { style: this.props.containerStyle, className: this.props.containerClass || "defaultButton", children: [
        this.content,
        this.form.getHtml({ type: "input" })
      ] }),
      (this.state.pic || objPicUrl) && (0, import_jsx_runtime9.jsx)("img", { style: this.props.uploadedImgStyle, className: this.props.uploadedImgClass || "uploadedImg", src: this.state.pic || objPicUrl })
    ] });
  }
};

// node_modules/flinntech/src/components/formTech/buttons/delButton.jsx
var DelButton = class extends BaseButton {
  constructor(props) {
    super(props);
    this.state.formClass = "FCDefaultDelButton";
    this.content = "Delete";
  }
  /**
   * calls obj to delete itself
   */
  buttonClickFunc() {
    this.props.obj.del();
  }
};

// node_modules/flinntech/src/components/formTech/formTypeFactory.js
var FormFactory = class extends BaseReactFactory {
  constructor() {
    super(...arguments);
    __publicField(this, "factory", {
      input: InputBaseClass,
      textarea: InputBaseClass,
      math: DoMathInput,
      addButton: AddButton,
      baseButton: BaseButton,
      popupButton: PopupButton,
      updateButton: UpdateButton,
      runButton: RunButton,
      quill: QuillForm,
      upload: UploadButtonBaseClass,
      showUpload: UploadShowPic,
      del: DelButton
    });
  }
};

// node_modules/flinntech/src/components/templateTech/baseClasses/interfaceComponentBaseClass.jsx
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var InterfaceComponentBaseClass = class extends BaseComponent {
  // Function to retrieve the component's HTML representation.
  /**
   * Constructor to initialize the InterfaceComponentBaseClass instance.
   * Calls the BaseComponent constructor and initializes state.
   */
  constructor() {
    super();
    __publicField(this, "addToProps", {});
    // Additional properties to merge with the default props.
    __publicField(this, "addToInitialSetup", []);
    // Additional setup functions to execute during initialization.
    __publicField(this, "getterFunc");
    this.state = {};
  }
  /**
   * Retrieves the combined props object for the component, including interface, app, theme, type, 
   * and additional properties from `addToProps`.
   * @returns {Object} - The combined props object.
   */
  getProps() {
    let props = {
      interface: this.interface,
      app: this.app,
      theme: this.props.theme,
      type: this.props.type,
      ...this.props,
      ...this.addToProps
    };
    return props;
  }
  /**
   * Sets the component list by retrieving it from the interface.
   * This method is typically called during the setup process.
   */
  setComponentList() {
    var _a;
    this.componentList = (_a = this.interface) == null ? void 0 : _a.getComponentList();
  }
  /**
   * Placeholder for setting additional props. Can be overridden or expanded.
   */
  setProps() {
  }
  /**
   * Retrieves the HTML representation of the component.
   * This method prepares props, sets the getter function, and calls it to generate the HTML.
   * @returns {JSX.Element} - The rendered HTML.
   */
  getHtml() {
    this.setProps();
    let props = this.getProps();
    this.setGetterFunc(this.props.getterFunc);
    if (this.getterFunc) {
      this.html = this.getterFunc({ ...props }, props.type || this.state.type);
    }
    return (0, import_jsx_runtime10.jsx)(import_jsx_runtime10.Fragment, { children: this.html });
  }
  /**
   * Sets the getter function for generating the HTML. 
   * Defaults to `getterFunc` passed in props, or the interface's main function, if available.
   * @param {Function} f - The function to set as the getter.
   */
  setGetterFunc(f) {
    this.getterFunc = f || (this.interface.getMainFunc() || this.getterFunc);
  }
  /**
   * Adds components to the factory if `addToFactory` is specified in the props.
   * This registers the specified components in the interface's factory.
   */
  addToFactory() {
    if (this.props.addToFactory) {
      let factory = this.interface.getFactory();
      for (let obj of this.props.addToFactory) {
        factory.registerComponent(obj.type, obj.comp);
      }
    }
  }
  /**
   * Performs pre-setup tasks by preparing the component's setup functions.
   * This method combines custom setup functions with default ones.
   */
  preSetup() {
    this.componentPreSetup();
    this.initialSetupFunctions = [
      ...this.initialSetupFunctions,
      this.setComponentList,
      this.addToFactory,
      ...this.addToInitialSetup
    ];
  }
  /**
   * Placeholder for additional pre-setup tasks. Can be overridden in subclasses.
   */
  componentPreSetup() {
  }
};

// node_modules/flinntech/src/components/formTech/FormComponentsInterface.jsx
var FormComponentInterface = class extends interfaceBaseClass_default {
  constructor() {
    super(...arguments);
    __publicField(this, "mainFunc", this.getFormComponent);
  }
  /**
   
   * @returns factory for map items
   */
  getFactory() {
    if (this.factory === void 0) {
      this.factory = new FormFactory();
    }
    return this.factory;
  }
  /**
   * 
   * @returns theme factory for map items
   */
  getThemeFactory() {
    if (this.themeFactory === void 0) {
      this.themeFactory = new ThemeFactory();
    }
    return this.themeFactory;
  }
  /**
   * Interface to get forms
   * @param {*} props 
   * @param {*} type 
   * @returns a form by type from the factory
   */
  getFormComponent(props, type) {
    type = type || "input";
    let form = this.factory.getComponent(type, props);
    return form;
  }
};
var formInterface = new FormComponentInterface();
var ParentFormComponent = class extends InterfaceComponentBaseClass {
  /**
   * Initializes the ParentFormComponent.
   * This serves as the base class for various button components.
   * @param {Object} props - The properties passed to the component.
   */
  constructor(props) {
    super(props);
    this.state = {
      type: "input"
      // Default type for a parent form component
    };
    this.interface = formInterface;
  }
};
var AddButton2 = class extends ParentFormComponent {
  constructor(props) {
    super(props);
    this.state = {
      type: "addButton"
      // Specific type for AddButton
    };
  }
};
var Button = class extends ParentFormComponent {
  constructor(props) {
    super(props);
    this.state = {
      type: props.buttonType || "baseButton"
      // Default type is "baseButton" unless specified
    };
  }
};
var PopupButton2 = class extends ParentFormComponent {
  constructor(props) {
    super(props);
    this.state = {
      type: "popupButton"
      // Specific type for PopupButton
    };
  }
};
var UpdateButton2 = class extends ParentFormComponent {
  constructor(props) {
    super(props);
    this.state = {
      type: "updateButton"
      // Specific type for UpdateButton
    };
  }
};
var RunButton2 = class extends ParentFormComponent {
  constructor(props) {
    super(props);
    this.state = {
      type: "runButton"
      // Specific type for RunButton
    };
  }
};
var UploadButton = class extends ParentFormComponent {
  constructor(props) {
    super(props);
    this.state = {
      type: props.uploadType || "upload"
      // Default type is "upload" unless specified
    };
  }
};
var DelButton2 = class extends ParentFormComponent {
  constructor(props) {
    super(props);
    this.state = {
      type: props.uploadType || "del"
      // Default type is "del" unless specified
    };
  }
};

// node_modules/flinntech/src/components/mapTech/baseClass.jsx
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var BaseClass2 = class extends BaseComponent {
  constructor(props) {
    super(props);
    this.initialPropsSetupFunctions = [...this.initialPropsSetupFunctions, this.setCell, this.getUseId];
    this.state = {
      ...this.state,
      defaultTheme: "defaultColumn",
      interface: "map",
      wrapperClass: "MCCell",
      linkClass: "MCLink"
    };
    this.setItemPropsRan = false;
  }
  /**
   * Sets the cell property from props.
   */
  setCell() {
    this.cell = this.props.cell;
  }
  /**
   * Prepares components before setup.
   */
  preSetup() {
    this.setComponents(["link", "wrapper", "item", "option"]);
  }
  /**
   * Sets properties for the item component.
   */
  setitemprops() {
    let json = { ...this.createPropObj("item", "cell"), className: this.cell.class || this.theme[this.state.classKey], style: this.cell.style };
    if (this.cell.itemClick) {
      json.checkItemClick = true;
    }
    if (!this.setItemPropsRan) {
      this.builderObserver.subscribe(json);
      this.setItemPropsRan = true;
    } else {
      this.item.setProps(json);
    }
  }
  /**
   * Sets properties for the wrapper component.
   */
  setwrapperprops() {
    let json = { ...this.createPropObj("wrapper", "cell") };
    if (!this.setWrapperPropsRan) {
      this.builderObserver.subscribe(json);
      this.setWrapperPropsRan = true;
    } else {
      this.wrapper.setProps(json);
    }
  }
  /**
   * Returns an empty option element.
   */
  getOption() {
    return (0, import_jsx_runtime11.jsx)(import_jsx_runtime11.Fragment, {});
  }
  /**
   * Retrieves the useId based on the cell properties and JSON data.
   */
  getUseId() {
    if (this.cell) {
      if (this.obj.getJson) {
        this.useId = this.cell.useId === false ? "" : this.cell.useId === void 0 ? this.obj.getJson()._id : this.obj.getJson()[this.cell.useId];
      }
    }
    return this.useId;
  }
  /**
   * Generates the inner content for rendering.
   */
  getInnerContent() {
    this.innerContent = [this.item.getHtml({ type: this.state.itemType || "span", content: this.getOption() })];
    return this.innerContent;
  }
  /**
   * Constructs the link URL based on cell properties.
   */
  getLinkUrl() {
    var _a, _b, _c;
    let url = ((_a = this.cell) == null ? void 0 : _a.to) ? this.cell.to : `/${(_c = (_b = this.obj) == null ? void 0 : _b.getJson()) == null ? void 0 : _c.type}/${this.useId}`;
    return url;
  }
  /**
   * Sets up link click functionality.
   */
  getLinkFunc() {
    if (this.cell.forceUpdate) {
      let func = () => {
        this.dispatch({ forceUpdate: this.cell.forceUpdate });
      };
      this.link.setOnClick(func);
    }
    if (this.cell.linkClick) {
      let func = () => {
        this.cell.linkClick(this.obj);
        if (this.cell.forceUpdate) {
          this.dispatch({ forceUpdate: this.cell.forceUpdate });
        }
      };
      this.link.setOnClick(func);
    }
  }
  /**
   * Generates and returns the HTML representation of the component.
   */
  getHtml() {
    var _a;
    this.mapInnerContent();
    this.getLinkFunc();
    if (this.cell.type === "backgroundImage") {
    }
    let html = !((_a = this.cell) == null ? void 0 : _a.hasLink) ? this.wrapper.getHtml({ type: this.state.wrapperType || "span", content: this.innerContent }) : this.link.getHtml({ type: this.state.linkType || "link", content: this.innerContent, props: { to: this.getLinkUrl() } });
    this.html = (0, import_jsx_runtime11.jsx)(import_jsx_runtime11.Fragment, { children: html });
    return this.html;
  }
};

// node_modules/flinntech/src/components/mapTech/del/deleteItem.jsx
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var DelItem = class extends BaseClass2 {
  constructor(props) {
    super(props);
    this.state.classKey = "MCDelItem";
    this.initialPropsSetupFunctions = [...this.initialPropsSetupFunctions, this.setDel];
  }
  setDel() {
    this.cell.itemClick = this.del;
  }
  /**
   * delete or send a popup dispatch according to user preference.
   */
  del() {
    let app = this.props.app;
    if (this.cell.popop) {
      app.dispatch({ popupSwitch: "del", delComponent: this.obj });
    } else {
      this.obj.del();
    }
  }
  /**
   * 
   * @returns by default X with the class is chosen for deletion ui
   */
  getOption() {
    return (0, import_jsx_runtime12.jsx)("div", { children: "X" });
  }
};

// node_modules/flinntech/src/components/mapTech/edit/editItem.jsx
var EditItem = class extends BaseClass2 {
  constructor(props) {
    super(props);
    this.state.classKey = "MCEditItem";
    this.state.itemClick = this.edit;
  }
  /**
   * delete or send a popup dispatch according to user preference.
   */
  edit() {
    let app = this.props.app;
    app.dispatch({ popupSwitch: "edit", currentPopupComponent: this.obj });
  }
  /**
   * 
   * @returns edit text for default edit items.
   */
  getOption() {
    return "edit";
  }
};

// node_modules/flinntech/src/components/mapTech/attributeItem.jsx
var AttributeItem = class extends BaseClass2 {
  constructor(props) {
    super(props);
    this.state.classKey = "MCAttributeItem";
  }
  /**
   * allow for people to not have to put type attribute in the map component
   * THis is backward compadibilty for the last version
   */
  getName() {
    let cell = this.cell;
    this.name = cell.name;
    if (!this.name) {
      this.name = cell;
    }
  }
  /**
   * 
   * @returns the name in the obj for the attribute given
   */
  getOption() {
    this.getName();
    return this.obj.getJson()[this.name];
  }
};

// node_modules/flinntech/src/components/mapTech/textItem.jsx
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var TextItem = class extends AttributeItem {
  constructor(props) {
    super(props);
    this.state.classKey = "MCTextItem";
  }
  /**
   * 
   * @returns plain text that you sent in
   */
  getOption() {
    return (0, import_jsx_runtime13.jsx)(import_jsx_runtime13.Fragment, { children: this.cell.name });
  }
};

// node_modules/flinntech/src/components/mapTech/customComponentItem.jsx
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
var CustomComponentItem = class extends BaseClass2 {
  constructor(props) {
    super(props);
    this.state.classKey = "MCCustom";
  }
  /**
   * 
   * @returns a custom component sent into the map component
   */
  getOption() {
    let Comp = this.cell.custom;
    return (0, import_jsx_runtime14.jsx)(Comp, { ...this.props, masterCell: this });
  }
};

// node_modules/flinntech/src/components/mapTech/imgItem.jsx
var ImgItem = class extends BaseClass2 {
  constructor(props) {
    super(props);
    this.state.defaultClassName = "MCImgItem";
    this.state.itemType = "img";
  }
  /**
   * 
   * @returns the image url
   */
  getPicSrc() {
    var _a, _b;
    if (this.obj.getJson) {
      this.src = (_b = this.obj) == null ? void 0 : _b.getJson()[((_a = this.state.cell) == null ? void 0 : _a.src) || "picURL"];
    }
    if (this.cell.imgSrc) {
      this.src = this.cell.imgSrc;
    }
    return this.src;
  }
  /**
   * sets up the html to get the picture.
   */
  additionalPostSetup() {
    this.getPicSrc();
    if (this.src) {
      this.item.addProps({ src: this.src, alt: "picture goes here" });
    }
  }
};

// node_modules/flinntech/src/components/mapTech/formItem.jsx
var import_jsx_runtime15 = __toESM(require_jsx_runtime());
var FormItem = class extends BaseClass2 {
  constructor(props) {
    super(props);
  }
  /**
   * create forms in the map though a cutom item usually works better
   * TODO figure out how to make this work better.
   */
  getOption() {
    (0, import_jsx_runtime15.jsx)(ParentFormComponent, { ...this.cell, ...this.props });
  }
};

// node_modules/flinntech/src/components/mapTech/mapComponent.jsx
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var MapComponentItem = class extends BaseClass2 {
  /**
   * Constructor initializes the component with props, sets up initial functions, 
   * and defines the default types and state properties.
   * @param {Object} props - The props passed to the component.
   */
  constructor(props) {
    super(props);
    this.initialPropsSetupFunctions = [...this.initialPropsSetupFunctions, this.setList, this.setFactory];
    this.state = {
      ...this.state,
      mapContainerClass: "MCMapContainer",
      // Class for the map container
      interface: "map",
      // Type of interface, set to "map"
      mapSectionClass: "MCMapSection"
      // Class for the map section
    };
    this.defaultTypes = ["del", "edit", "img"];
  }
  /**
   * Initializes the factory property by retrieving the factory from the interface.
   */
  setFactory() {
    this.factory = this.interface.getFactory();
  }
  /**
   * Returns the default types of components that can be created.
   * @returns {Array} List of default types ["del", "edit", "img"]
   */
  getDefaultTypes() {
    return this.defaultTypes;
  }
  /**
   * Checks if a cell matches any of the default types and returns the matching type if found.
   * @param {Object} cell - The cell object to check.
   * @returns {string|undefined} - The matching default type or undefined if not found.
   */
  checkCellForDefaults(cell) {
    let arr = this.getDefaultTypes();
    return arr[arr.indexOf(cell)];
  }
  /**
   * Determines if the value of a cell is text or an attribute.
   * @param {Object} obj - The object containing the data.
   * @param {Object} cell - The cell object to check.
   * @returns {string} - "attribute" if the cell has an attribute, "text" otherwise.
   */
  textOrAttribute(obj, cell) {
    let type = obj.getJson && (obj == null ? void 0 : obj.getJson()[cell]) ? "attribute" : "text";
    return type;
  }
  /**
   * Determines the type of a cell, either using its defined type, checking defaults,
   * or determining if it should be treated as text or attribute.
   * @param {Object} cell - The cell object to determine the type for.
   * @param {Object} obj - The object that may contain the cell data.
   * @returns {string} - The type of the cell (either from its type, defaults, or based on text/attribute).
   */
  getType(cell, obj) {
    let type = cell.type;
    if (!type) {
      type = this.checkCellForDefaults(cell);
      if (!type) {
        type = this.textOrAttribute(obj, cell);
      }
    }
    return type;
  }
  /**
   * Creates the props object to be passed to a component, including the obj, interface, cell, and theme.
   * @param {Object} cell - The cell for which props are being created.
   * @param {Object} obj - The object to be passed to the component.
   * @returns {Object} - The props object for the component.
   */
  getProps(cell, obj) {
    let p = { obj, ...this.props, interface: this.interface, cell, theme: this.props.theme };
    return p;
  }
  /**
   * Generates a list of cell components based on the cells array from props,
   * passing appropriate props to each component via the factory.
   * @param {Object} obj - The object to be used in the components.
   * @returns {JSX.Element} - A JSX element containing the list of cell components.
   */
  getCellList(obj) {
    let cells = this.props.cells;
    return (0, import_jsx_runtime16.jsx)(import_jsx_runtime16.Fragment, { children: cells.map((cell, i) => {
      let type = this.getType(cell, obj);
      let p = this.getProps(cell, obj);
      return (0, import_jsx_runtime16.jsx)(import_jsx_runtime16.Fragment, { children: this.factory.getComponent(type, p) });
    }) });
  }
  /**
   * Generates the HTML for the list by mapping over the list and passing each object 
   * to `mapSection.getHtml`, which creates the necessary structure.
   * @returns {JSX.Element} - The JSX representing the list of map sections.
   */
  getListHtml() {
    return (0, import_jsx_runtime16.jsx)(import_jsx_runtime16.Fragment, { children: this.list.map(
      (obj) => (0, import_jsx_runtime16.jsx)(import_jsx_runtime16.Fragment, { children: this.mapSection.getHtml({ type: "div", content: this.getCellList(obj) }) })
    ) });
  }
  /**
   * Sets the list property by extracting the list from props.
   */
  setList() {
    this.list = this.props.list;
  }
  /**
   * Pre-setup function that adds component setup steps to the initialization process.
   * It ensures that the required components (mapContainer, mapSection, link) are set up.
   */
  preSetup() {
    this.setComponents(["mapContainer", "mapSection", "link"]);
  }
  /**
   * Generates the HTML content for the component by retrieving the HTML for the map container
   * and passing the list HTML as its content.
   * @returns {JSX.Element} - The final HTML structure for the map component.
   */
  getHtml() {
    let html = this.mapContainer.getHtml({ type: "div", content: this.getListHtml() });
    this.html = (0, import_jsx_runtime16.jsx)(import_jsx_runtime16.Fragment, { children: html });
    return this.html;
  }
};

// node_modules/flinntech/src/components/mapTech/itemTypeFactory.js
var import_react5 = __toESM(require_react());

// node_modules/flinntech/src/components/mapTech/del/delCustomItem.jsx
var import_jsx_runtime17 = __toESM(require_jsx_runtime());
var DelCustomItem = class extends DelItem {
  constructor(props) {
    super(props);
    this.state.classKey = "MCCustomDelItem";
  }
  /**
   * 
   * @returns custom item for deleting objs
   */
  getOption() {
    return (0, import_jsx_runtime17.jsx)(this.cell.custom, { ...this.props, masterCell: this });
  }
};

// node_modules/flinntech/src/components/mapTech/del/delTextItem.jsx
var DelTextItem = class extends DelItem {
  constructor(props) {
    super(props);
    this.state.classKey = "MCDelItem";
  }
  /**
   * 
   * @returns text that was sent in or just delete
   */
  getOption() {
    let option = this.props.delText || "delete";
    return option;
  }
};

// node_modules/flinntech/src/components/mapTech/edit/editIconItem.jsx
import Edit from "/Users/alandavidson/flinntech/projects/salescaptureAI/salescaptureAI/node_modules/flinntech/src/components/mapTech/pics/editPin.png";
var EditIconItem = class extends EditItem {
  constructor(props) {
    super(props);
    this.state.classKey = "MCEditImgItem";
    this.state.itemType = "img";
  }
  /**
   * allows for getting the img.
   */
  additionalPostSetup() {
    this.getImg();
    this.item.setProps({ src: this.src });
  }
  /**
   * 
   * @returns an icon for the edit button
   */
  getImg() {
    this.src = this.cell.imgSrc || Edit;
    return this.src;
  }
};

// node_modules/flinntech/src/components/mapTech/edit/editCustomItem.jsx
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
var EditCustomItem = class extends EditItem {
  constructor(props) {
    super(props);
    this.state.classKey = "MCCustomEditItem";
  }
  /**
   * 
   * @returns custom item for edit
   */
  getOption() {
    return (0, import_jsx_runtime18.jsx)(this.cell.custom, { ...this.props, masterCell: this });
  }
};

// node_modules/flinntech/src/components/mapTech/interactiveMap/interactiveMapComponent.jsx
var import_react4 = __toESM(require_react());
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var InteractiveMap = class extends MapComponentItem {
  constructor(props) {
    super(props);
    this.mapContainer = import_react4.default.createRef();
    this.initialPropsSetupFunctions = [...this.initialPropsSetupFunctions, this.getPicObj, this.getAddComponentButton];
    this.state = {
      ...this.state,
      index: 0,
      isDragging: void 0,
      defaultTheme: "interactiveMap"
    };
  }
  _addEventListeners() {
    var _a;
    let props = this.props;
    let saveList = [];
    for (let obj of this.list) {
      let listItem = document.getElementById(obj.getJson()._id);
      listItem.addEventListener("mousedown", (e) => {
        this.setState({ isDragging: listItem });
      });
      listItem.addEventListener("mouseup", (e) => {
        this.setState({ isDragging: void 0 });
      });
      saveList.push(listItem);
      this.setState({ saveList });
    }
    if ((_a = this.mapContainer) == null ? void 0 : _a.current) {
      this.mapContainer.current.addEventListener("mouseup", (e) => {
        if (this.currentComp !== void 0) {
          this.currentComp.update();
        }
        this.setState({ isDragging: void 0 });
      });
      this.mapContainer.current.addEventListener("mousemove", (e) => {
        if (this.state.isDragging !== void 0) {
          let el = this.state.isDragging;
          let id = el.id;
          let comp = this.list.find((obj) => obj.getJson()._id === id);
          if ((comp == null ? void 0 : comp.getJson().draggable) !== false) {
            const containerRect = this.mapContainer.current.getBoundingClientRect();
            const x = e.pageX - containerRect.left - 25;
            const y = e.pageY - containerRect.top - 25;
            comp.setCompState({ x, y });
            this.currentComp = comp;
            el.style.left = `${x}px`;
            el.style.top = `${y}px`;
          }
        }
      });
    }
  }
  componentDidMount() {
    this._addEventListeners();
  }
  zoom(num) {
    let containerRect = this.mapContainer.current.getBoundingClientRect();
    let width = containerRect.width * num;
    let height = containerRect.height * num;
    this.mapContainer.current.style.width = width + "px";
    this.mapContainer.current.style.height = height + "px";
    let list = this.state.saveList;
    for (let el of list) {
      const currentLeft = el.style.left || "0";
      const currentTop = el.style.top || "0";
      const leftMatch = currentLeft.match(/(-?\d*\.?\d+)/);
      const topMatch = currentTop.match(/(-?\d*\.?\d+)/);
      const leftValue = leftMatch ? parseFloat(leftMatch[0]) : 0;
      const topValue = topMatch ? parseFloat(topMatch[0]) : 0;
      const newLeft = leftValue * num;
      const newTop = topValue * num;
      el.style.left = newLeft + "px";
      el.style.top = newTop + "px";
    }
  }
  componentDidUpdate(props, state) {
    if (this.props.list.length !== props.list.length) {
      this._addEventListeners();
    }
  }
  getAddComponentButton() {
    var _a, _b;
    this.addComponentButton = this.props.addComponentButton;
    if (this.addComponentButton !== void 0) {
      let type = typeof this.addComponentButton === "string" ? this.addComponentButton : this.addComponentButton.type || "addComponentButton";
      let addType = this.props.pinKey || (((_a = this.mapObj) == null ? void 0 : _a.getJson().pinType) || "pin");
      this.addComponentButton = this.factory.getComponent(type, {
        ...this.props,
        theme: this.props.theme || this.state.defaultTheme,
        mapId: this.mapObj ? (_b = this.mapObj) == null ? void 0 : _b.getJson()._id : void 0,
        addType,
        addPinProps: this.props.addPinProps,
        pinAdded: this._addEventListeners
      });
    }
  }
  getPicObj() {
    var _a;
    let attribute = this.props.imgAttribute || "picURL";
    if (this.mapObj) {
      this.picSrc = (_a = this.mapObj) == null ? void 0 : _a.getJson()[attribute];
    }
  }
  preSetup() {
    this.setComponents([]);
  }
  async changePic(index) {
    let mapList = this.props.list;
    index = index < 0 ? index = mapList.length - 1 : index;
    index = index >= mapList.length ? 0 : index;
    this.mapObj = mapList[index];
    await this.setState({ index });
    this._addEventListeners();
  }
  setList() {
    if (!this.listSet) {
      let mapList = this.props.list;
      let map = mapList[this.state.index];
      this.mapObj = map;
      let type = this.props.pinKey || ((map == null ? void 0 : map.getJson().pinType) || "pin");
      let attribute = this.props.pinAttribute || ((map == null ? void 0 : map.getJson().type) + "Id" || "mapId");
      let id = this.props.mapId || (map == null ? void 0 : map.getJson()._id);
      this.list = this.componentList.getList(type, id, attribute);
    }
  }
  preSetup() {
    this.setComponents(["mapContainer", "right", "left", "image", "zoomIn", "zoomOut"]);
  }
  getIndexAndChangeMap(i) {
    let num = this.props.list.indexOf(this.mapObj) + i;
    this.changePic(num);
  }
  getListHtml() {
    let props = this.props;
    let theme = this.theme;
    let factory = this.factory;
    return (0, import_jsx_runtime19.jsx)(import_jsx_runtime19.Fragment, { children: this.list.map(
      (obj, index) => {
        let p = {
          obj,
          props,
          interface: this.interface,
          cell: props.pinCell,
          theme: this.props.them || this.state.defaultTheme,
          pinProps: this.props.pinProps
        };
        return (0, import_jsx_runtime19.jsx)("div", { id: obj.getJson()._id, className: props.mapSectionClass ? props.mapSectionClass : theme.MCMapSection, style: { ...props.mapSectionStyle, left: obj.getJson().x + "px", top: obj.getJson().y + "px" }, children: (0, import_jsx_runtime19.jsx)(import_jsx_runtime19.Fragment, { children: factory.getComponent(props.pinType ? props.pinType : "attribute", p) }) }, index);
      }
    ) });
  }
  getHtml() {
    if (this.props.list.length > 0) {
      let props = this.props;
      let theme = this.theme;
      return (0, import_jsx_runtime19.jsxs)("div", { ref: this.mapContainer, className: props.mapContainerClass ? props.mapContainerClass : theme.MCMapContainer, style: { ...props.mapContainerStyle }, children: [
        (0, import_jsx_runtime19.jsx)("img", { src: this.picSrc, className: props.mapClass ? props.mapClass : theme.MCMap, style: { ...props.mapStyle } }),
        this.getListHtml(),
        props.addComponentButton && (0, import_jsx_runtime19.jsx)(import_jsx_runtime19.Fragment, { children: this.addComponentButton }),
        (0, import_jsx_runtime19.jsx)("div", { style: { position: "absolute", top: "0px", right: "0px" }, onClick: () => {
          this.zoom(0.5);
        }, children: "zoom out" }),
        (0, import_jsx_runtime19.jsx)("div", { style: { position: "absolute", top: "20px", right: "0px" }, onClick: () => {
          this.zoom(2);
        }, children: "zoom in" }),
        (0, import_jsx_runtime19.jsx)("div", { style: { position: "absolute", top: "0px", left: "-20px" }, onClick: () => {
          this.getIndexAndChangeMap(-1);
        }, children: "prev" }),
        (0, import_jsx_runtime19.jsx)("div", { style: { position: "absolute", top: "20px", right: "-20px" }, onClick: () => {
          this.getIndexAndChangeMap(1);
        }, children: "next" })
      ] });
    } else {
      this.list = [];
    }
  }
};

// node_modules/flinntech/src/components/mapTech/interactiveMap/addButtonComponent.jsx
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var AddComponentButton = class extends BaseClass2 {
  /**
   * Initializes the AddComponentButton with the provided props.
   * @param {Object} props - The properties passed to the component.
   */
  constructor(props) {
    super(props);
  }
  /**
   * Prepares the component by setting its internal state for components to an empty array.
   * This method can be used to reset the state of the button.
   */
  preSetup() {
    this.setComponents([]);
  }
  /**
   * Creates the object of the specified type and triggers the necessary actions for adding the item.
   * This method prepares the operations factory with the given parameters and calls the pinAdded callback.
   */
  async createObjType() {
    let opps = this.operationsFactory;
    let type = this.props.addType;
    await opps.prepare({
      prepare: { type, mapId: this.props.mapId, ...this.props.addPinProps },
      // Prepares the object with required parameters
      clean: true,
      run: true
    });
    this.props.pinAdded();
  }
  /**
   * Renders the HTML structure for the AddComponentButton.
   * This button triggers the creation of the object when clicked.
   * @returns {JSX.Element} The rendered HTML for the button.
   */
  getHtml() {
    let text = this.props.text || "+ Add Item";
    return (0, import_jsx_runtime20.jsxs)(
      "div",
      {
        onClick: this.createObjType,
        style: this.props.style,
        className: this.props.class || this.theme.MCAddButton,
        children: [
          text,
          " "
        ]
      }
    );
  }
};

// node_modules/flinntech/src/components/mapTech/plainDisplay.jsx
var PlainDisplay = class extends BaseClass2 {
  constructor(props) {
    super(props);
    this.state.classKey = "MCAttributeItem";
  }
  /**
   * 
   * @returns for when you send in arrays with text
   */
  getOption() {
    return this.state.obj;
  }
};

// node_modules/flinntech/src/components/mapTech/selectorAttributeItem.jsx
var SelectorAttributeItem = class extends AttributeItem {
  constructor(props) {
    super(props);
    this.state.classKey = "MCAttributeItem";
  }
  /**
   * select items in the map
   */
  getItemClass() {
    var _a;
    let cell = this.cell;
    let bool = cell.activeAttribute ? cell.activeAttribute : "_id";
    let id = this.state.obj.getJson()[bool];
    if (id === ((_a = cell.activeItem) == null ? void 0 : _a.getJson()[bool])) {
      let style = cell.activeClass ? cell.activeClass : this.theme.MCActiveItem;
      this.item.setClass(this.item.getClass() + " " + style);
    }
  }
  /**
   * setup the component with the items to select
   */
  additionalPostSetup() {
    this.getItemClass();
  }
};

// node_modules/flinntech/src/components/mapTech/navMap/logoItem.jsx
var LogoItem = class extends ImgItem {
  /**
   * setup the logo item
   * @param {} props 
   */
  constructor(props) {
    super(props);
    this.state.classKey = "MCLogoItem";
  }
};

// node_modules/flinntech/src/components/mapTech/navMap/linksContainer.jsx
var import_jsx_runtime21 = __toESM(require_jsx_runtime());
var LinkContainer = class extends BaseClass2 {
  /**
   * Initializes the LinkContainer with the provided props.
   * Sets the item type to "div".
   * @param {Object} props - The properties passed to the component.
   */
  constructor(props) {
    super(props);
    this.state.itemType = "div";
  }
  /**
   * Filters and returns the list of links from the provided cell's links.
   * Ignores links that do not have a name.
   * @returns {Array} The filtered list of links.
   */
  getList() {
    this.list = this.props.cell.links.filter((obj) => (obj == null ? void 0 : obj.name) !== void 0);
    return this.list;
  }
  /**
   * Sets the active link by searching for the link with path "/" and marking it as the home link.
   * Marks all other links as inactive and sets the home link as active.
   */
  getHome() {
    var _a;
    if (!this.state.active) {
      this.home = this.list.find((obj) => obj.path === "/");
      for (let l of this.list) {
        l.active = (_a = this.home) == null ? void 0 : _a.name;
      }
    }
  }
  /**
   * Filters and returns the list of links to be displayed.
   * It excludes links that have no name or are explicitly set to not display.
   * Then it renders these links using the MapComponent, which handles the rendering of each link item.
   * @returns {JSX.Element} The JSX element representing the rendered list of links.
   */
  getOption() {
    let list = this.props.cell.links.filter((obj) => (obj == null ? void 0 : obj.name) !== void 0 && obj.display !== false);
    return (0, import_jsx_runtime21.jsx)(
      MapComponent,
      {
        list,
        theme: this.cell.linksTheme || "links",
        mapSectionClass: this.props.cell.linkSectionClass || void 0,
        mapSectionStyle: this.props.cell.linkSectionStyle || void 0,
        cells: [{
          type: "linkItem",
          class: this.props.cell.linkItemClass || void 0,
          style: this.props.cell.linkItemStyle || void 0,
          linkClick: (obj) => {
            for (let l of this.props.cell.links) {
              l.active = obj == null ? void 0 : obj.name;
            }
            this.setState({ active: obj == null ? void 0 : obj.name });
          }
        }]
      }
    );
  }
  /**
   * Additional setup for the LinkContainer component.
   * This includes calling the getList and getHome methods to set up the links and the active state.
   */
  additionalSetup() {
    this.getList();
    this.getHome();
  }
};

// node_modules/flinntech/src/components/mapTech/navMap/linkItem.jsx
var LinkItem = class extends BaseClass2 {
  /**
   * Initializes the LinkItem with the provided props and sets up the initial properties.
   * It also configures the class and item type.
   * @param {Object} props - The properties passed to the component.
   */
  constructor(props) {
    super(props);
    this.initialPropsSetupFunctions = [...this.initialPropsSetupFunctions, this.setUpLinks];
    this.state.classKey = "MCLinkItem";
    this.state.itemType = "div";
  }
  /**
   * Sets up the links for the LinkItem by defining the path and link-related properties.
   */
  setUpLinks() {
    this.cell.to = this.obj.path;
    this.useId = "";
    this.cell.hasLink = true;
  }
  /**
   * Retrieves the active class to be applied to the link when it's in an active state.
   * The active class is either taken from the object or the theme.
   * @returns {string} The active class name to be used.
   */
  getActiveClass() {
    this.activeClass = this.cell.activeClass || this.theme.MCActiveLink;
    return this.activeClass;
  }
  /**
  * Sets the active class for the item if its name matches the object's active state
  * or if the current URL matches the object's path. This ensures the link item appears
  * visually active when appropriate.
  */
  setActiveClass() {
    var _a, _b, _c, _d, _e;
    const isHome = ((_a = this.obj) == null ? void 0 : _a.path) === "/" || ((_b = this.obj) == null ? void 0 : _b.path) === "/home";
    const currentUrl = window.location.pathname;
    if (isHome) {
      const pathSegments = currentUrl.split("/").filter(Boolean);
      if (pathSegments.length > 0 && pathSegments[0] !== "home") {
        return;
      }
    }
    if (((_c = this.obj) == null ? void 0 : _c.active) === ((_d = this.obj) == null ? void 0 : _d.name) || currentUrl.includes((_e = this.obj) == null ? void 0 : _e.path)) {
      let activeClass = this.getActiveClass();
      activeClass = activeClass || "";
      this.item.setClass(this.item.getClass() + " " + activeClass);
    }
  }
  /**
   * Performs additional setup tasks for the LinkItem.
   * This includes setting the active class if needed.
   */
  additionalSetup() {
    this.setActiveClass();
  }
  /**
   * Retrieves the option text for the link item, which is typically its name.
   * @returns {string} The name of the object (or the link text).
   */
  getOption() {
    var _a;
    return (_a = this.props.obj) == null ? void 0 : _a.name;
  }
};

// node_modules/flinntech/src/components/mapTech/navMap/logout.jsx
var Logout = class extends BaseClass2 {
  constructor(props) {
    super(props);
    this.state.classKey = "MCTextItem";
  }
  /**
   * set on click to the logout func or the api service
   */
  additionalPostSetup() {
    this.item.setOnClick(this.cell.logoutFunc || this.APIService.logout);
  }
  /**
   * TODO: provide other logout components
   * @returns logout for the ui
   */
  getOption() {
    return "logout";
  }
};

// node_modules/flinntech/src/components/mapTech/orderedListComponets/arrows.jsx
var import_jsx_runtime22 = __toESM(require_jsx_runtime());
var OrderedArrowsBaseClass = class extends BaseClass2 {
  /**
   * Constructor to initialize the base class and set default states.
   * Sets up the class key for styling and increments/decrements for order manipulation.
   * @param {Object} props - The props passed to the component.
   */
  constructor(props) {
    super(props);
    this.state.classKey = "MCOrderedArrows";
    this.state.increment = 1;
    this.state.decrement = -1;
  }
  /**
   * Increases the position/order of the object by the increment value.
   * This method updates the order of the object.
   */
  increasePosition() {
    this.obj.updateOrder(this.state.increment);
  }
  /**
   * Decreases the position/order of the object by the decrement value.
   * This method updates the order of the object.
   */
  decreasePosition() {
    this.obj.updateOrder(this.state.decrement);
  }
  /**
   * Creates the UI for the increase arrow.
   * The arrow triggers the decreasePosition method when clicked.
   * @returns {JSX.Element} The JSX element representing the increase arrow.
   */
  increaseArrowUI() {
    this.increaseArrow = (0, import_jsx_runtime22.jsx)("div", { className: "upward-arrow", onClick: this.decreasePosition });
    return this.increaseArrow;
  }
  /**
   * Creates the UI for the decrease arrow.
   * The arrow triggers the increasePosition method when clicked.
   * @returns {JSX.Element} The JSX element representing the decrease arrow.
   */
  decreaseArrowUI() {
    this.decreaseArrow = (0, import_jsx_runtime22.jsx)("div", { style: { marginTop: "5px" }, className: "downward-arrow", onClick: this.increasePosition });
    return this.decreaseArrow;
  }
  /**
   * Combines both increase and decrease arrows into a single div container.
   * Returns a JSX element that contains both arrows for UI rendering.
   * @returns {JSX.Element} The JSX element that combines both arrows.
   */
  getOption() {
    this.increaseArrowUI();
    this.decreaseArrowUI();
    let div = (0, import_jsx_runtime22.jsxs)("div", { style: { marginTop: "-4px" }, className: "fitCC", children: [
      this.increaseArrow,
      this.decreaseArrow
    ] });
    return div;
  }
};

// node_modules/flinntech/src/components/mapTech/fileHierarchyMap/innerMap.jsx
var import_jsx_runtime23 = __toESM(require_jsx_runtime());
var InnerMap = class extends BaseClass2 {
  /**
   * Initializes the InnerMap component with default state values.
   * @param {Object} props - The properties passed to the component.
   */
  constructor(props) {
    super(props);
    this.state.displayState = false;
    this.state.itemType = "div";
  }
  /**
   * Renders an option to display or collapse the map.
   * This is represented as an arrow that toggles the display state.
   * @returns {JSX.Element} The rendered display option (an arrow).
   */
  displayOption() {
    return (0, import_jsx_runtime23.jsx)(
      "div",
      {
        style: { position: "absolute", left: "0px", top: "0px" },
        className: this.state.displayState ? "downward-arrow" : "right-arrow",
        onClick: () => {
          this.wrapper.setStyle({ ...this.wrapper.getStyle(), height: "200px" });
          this.setState({ displayState: !this.state.displayState });
        }
      }
    );
  }
  /**
   * Renders the map component, passing necessary properties for its display.
   * The map is filtered based on the attribute and the current object ID.
   * @returns {JSX.Element} The rendered MapComponent.
   */
  mapOption() {
    let map = (0, import_jsx_runtime23.jsx)(
      MapComponent,
      {
        name: this.props.name,
        filter: { attribute: this.props.filter.attribute, search: this.obj.getJson()._id },
        cells: [...this.props.cells]
      }
    );
    return map;
  }
  /**
   * Performs additional setup after the component is initialized.
   * In this case, it adjusts the position style of the item container.
   */
  additionalPostSetup() {
    this.item.setStyle({ ...this.item.getStyle(), position: "relative" });
  }
  /**
   * Renders the final map option container, including the display option and the map itself if visible.
   * The map is only displayed when the displayState is true.
   * @returns {JSX.Element} The rendered container for the map and its display option.
   */
  getOption() {
    return (0, import_jsx_runtime23.jsxs)("div", { style: { position: "absolute", width: "100%", height: "100%", display: "flex", flexDirection: "column" }, children: [
      this.displayOption(),
      "  ",
      this.state.displayState && this.mapOption(),
      "  "
    ] });
  }
};

// node_modules/flinntech/src/components/mapTech/coolComponents/avaBackgroundImage.jsx
var AvaBackgroundImage = class extends AttributeItem {
  constructor() {
    super();
    this.state.classKey = "MCBackgroundItem";
    this.state.wrapperClass = "MCCellBackground";
    this.state.linkClass = "MCBackgroundLink";
  }
  /**
   * be able to create background image on the map item
   */
  additionalPostSetup() {
    let image = this.cell.pirSRC || this.obj.getJson()[this.cell.picAttribute || "picURL"];
    let divStyle = {
      width: "100%",
      // Adjust as needed
      height: "250px",
      // Adjust as needed
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      color: "white",
      textAlign: "center",
      fontSize: "50px",
      background: `linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(${image}) no-repeat center center`,
      backgroundSize: "cover",
      textDecoration: "none"
    };
    this.wrapper.setStyle({ ...this.wrapper.getStyle(), ...divStyle });
    this.link.setStyle({ ...this.wrapper.getStyle(), ...divStyle });
  }
};

// node_modules/flinntech/src/components/mapTech/customBuiltItem.jsx
var CustomBuiltItem = class extends BaseClass2 {
  constructor(props) {
    super(props);
    this.state.classKey = "MCCustom";
  }
  /**
   * 
   * @returns custum item that came in in the <Component /> format
   */
  getOption() {
    return this.cell.custom;
  }
};

// node_modules/flinntech/src/components/mapTech/itemTypeFactory.js
var MapFactory = class extends BaseReactFactory {
  constructor() {
    super(...arguments);
    __publicField(this, "factory", {
      text: TextItem,
      attribute: AttributeItem,
      custom: CustomComponentItem,
      customBuilt: CustomBuiltItem,
      img: ImgItem,
      form: FormItem,
      del: DelItem,
      delIcon: DelCustomItem,
      delCustom: DelCustomItem,
      delText: DelTextItem,
      edit: EditItem,
      editIcon: EditIconItem,
      editCustom: EditCustomItem,
      interactiveMap: InteractiveMap,
      addComponentButton: AddComponentButton,
      plain: PlainDisplay,
      select: SelectorAttributeItem,
      logo: LogoItem,
      links: LinkContainer,
      linkItem: LinkItem,
      logout: Logout,
      default: MapComponent,
      map: MapComponentItem,
      order: OrderedArrowsBaseClass,
      innerMap: InnerMap,
      backgroundImage: AvaBackgroundImage
    });
  }
};

// node_modules/flinntech/src/components/mapTech/mapComponentInterface.jsx
var import_react6 = __toESM(require_react());

// node_modules/flinntech/src/components/mapTech/themes/classRegistry.js
var classRegistry_exports2 = {};
__export(classRegistry_exports2, {
  DefaultColumn: () => DefaultColumn,
  DefaultRegistry: () => DefaultRegistry2,
  DefaultRow: () => DefaultRow,
  DefaultWrapRow: () => DefaultWrapRow,
  InteractiveMap: () => InteractiveMap2,
  Links: () => Links,
  SideBar: () => SideBar,
  TopBar: () => TopBar
});
import "/Users/alandavidson/flinntech/projects/salescaptureAI/salescaptureAI/node_modules/flinntech/src/components/mapTech/themes/css/default.scss";
import "/Users/alandavidson/flinntech/projects/salescaptureAI/salescaptureAI/node_modules/flinntech/src/components/mapTech/themes/css/defaultColumn.scss";
import "/Users/alandavidson/flinntech/projects/salescaptureAI/salescaptureAI/node_modules/flinntech/src/components/mapTech/themes/css/defaultRow.scss";
import "/Users/alandavidson/flinntech/projects/salescaptureAI/salescaptureAI/node_modules/flinntech/src/components/mapTech/themes/css/defaultRowWrap.scss";
import "/Users/alandavidson/flinntech/projects/salescaptureAI/salescaptureAI/node_modules/flinntech/src/components/mapTech/themes/css/interactiveMapTheme.scss";
import "/Users/alandavidson/flinntech/projects/salescaptureAI/salescaptureAI/node_modules/flinntech/src/components/mapTech/themes/css/sideBar.scss";
var DefaultRegistry2 = class {
  constructor() {
    __publicField(this, "MCMapContainer", "Map-Container");
    __publicField(this, "MCMapSection", "Map-Section");
    __publicField(this, "MCLink", "Map-Link");
    __publicField(this, "MCCell", "Map-Cell");
    __publicField(this, "MCCustomDelItem", "Map-Custom-Del-Item");
    __publicField(this, "MCDelItem", "Map-Del-Item");
    __publicField(this, "MCDelImgItem", "Map-Del-imgItem");
    __publicField(this, "MCCustomEditItem", "Map-Custom-Edit-Item");
    __publicField(this, "MCEditImgItem", "Map-Edit-imgItem");
    __publicField(this, "MCEditItem", "Map-Edit-Item");
    __publicField(this, "MCAttributeItem", "Map-Attribute-Item");
    __publicField(this, "MCImgItem", "Map-imgItem");
    __publicField(this, "MCTextItem", "Map-Text-Item");
    __publicField(this, "MCActiveItem", "Map-Active-Item");
    __publicField(this, "MCCustom", "");
    __publicField(this, "MCBackgroundItem", "background-item");
    __publicField(this, "MCCellBackground", "cell-background");
    __publicField(this, "MCBackgroundLink", "cell-background");
    __publicField(this, "MCLogoItem", "navLogo");
  }
};
var DefaultColumn = class extends DefaultRegistry2 {
  constructor() {
    super(...arguments);
    __publicField(this, "MCSectionHover", "DC-Map-Section:hover");
    __publicField(this, "MCCustomDelItem", "DC-Custom-Del-Item");
    __publicField(this, "MCDelItem", "DC-Del-Item");
    __publicField(this, "MCDelImgItem", "DC-Del-imgItem");
    __publicField(this, "MCCustomEditItem", "Map-Custom-Edit-Item");
    __publicField(this, "MCEditImgItem", "DC-Edit-imgItem");
    __publicField(this, "MCEditItem", "DC-Edit-Item");
  }
};
var DefaultRow = class extends DefaultColumn {
  constructor() {
    super(...arguments);
    __publicField(this, "MCMapContainer", "DR-Map-Container");
    __publicField(this, "MCMapSection", "DR-Map-Section");
  }
};
var DefaultWrapRow = class extends DefaultRow {
  constructor() {
    super(...arguments);
    __publicField(this, "MCMapContainer", "DRW-Map-Container");
  }
};
var InteractiveMap2 = class extends DefaultRow {
  constructor() {
    super(...arguments);
    __publicField(this, "MCMapContainer", "IM-Map-Container");
    __publicField(this, "MCMapSection", "IM-Map-Section");
    __publicField(this, "MCMap", "IM-Map");
    __publicField(this, "MCAddButton", "IM-addButton");
    __publicField(this, "MCActiveItem", "IM-Active-Item");
    __publicField(this, "MCCell", "IM-Cell");
  }
};
var SideBar = class extends DefaultRow {
  constructor() {
    super(...arguments);
    __publicField(this, "MCActiveLink", this.MCActiveItem);
    __publicField(this, "MCLinkItem", this.MCLink);
    __publicField(this, "MCMapSection", "SB-Map-Section");
  }
};
var Links = class extends DefaultColumn {
  constructor() {
    super(...arguments);
    __publicField(this, "MCActiveLink", this.MCActiveItem);
    __publicField(this, "MCLinkItem", this.MCLink);
    __publicField(this, "MCMapSection", "SB-link");
    __publicField(this, "MCCell", "SB-Cell-Link");
    __publicField(this, "MCLink", "SB-Map-Link");
    __publicField(this, "MCLinkItem", "SB-Map-Link");
  }
};
var TopBar = class extends DefaultColumn {
  constructor() {
    super(...arguments);
    __publicField(this, "MCActiveLink", this.MCActiveItem);
    __publicField(this, "MCLinkItem", this.MCLink);
  }
};

// node_modules/flinntech/src/components/mapTech/themes/themeFactory.js
var ThemeFactory2 = class extends BaseClassFactory {
  constructor() {
    super(classRegistry_exports2);
    this.factory.default = DefaultRegistry2;
  }
};

// node_modules/flinntech/src/components/mapTech/filterFacotry.js
var FilterFactory = class {
  constructor() {
    __publicField(this, "factory", {
      text: textAttributeFilter,
      tag: filterByTag,
      plain: textFilter,
      textAndTag: filterByTextThenTitle,
      textAndTag2: filterByTitleThenTagText,
      bool: filterByBool,
      textAttributeList: consistentlyFilterByTextAttributeList
    });
  }
  /**
   * get a map item
   * @param {*} type 
   * @param {*} obj 
   * @returns a react item for the map
   */
  getFilter(type) {
    if (type) {
      return this.factory[type];
    }
  }
  /**
   * register a new map component.
   * @param {*} type 
   * @param {*} comp 
   */
  registerFilter(type, filter) {
    this.factory[type] = filter;
  }
};
function filterByTag(json) {
  let { list, attribute, tagList } = json;
  if (list.length > 0) {
    list = list.filter((obj) => {
      let bool = tagList.find((tag) => {
        let tagConnect = !attribute ? tag.getJson().connectedId : tag.getJson()[attribute];
        return tagConnect === obj.getJson()._id;
      });
      if (bool) {
        return true;
      } else {
        return false;
      }
    });
  }
  return list;
}
function filterByTagText(json) {
  let list = [];
  if (json.search && json.list) {
    const tags = json.search.toLowerCase().split(" ").map((tag) => tag.trim());
    list = json.list.filter((obj) => {
      const objTags = obj.getJson()[json.attribute || "tags"];
      if (objTags) {
        let splitTags = objTags.split(json.splitStr || ",");
        splitTags = splitTags.map((tag) => tag.toLowerCase());
        for (let tag of tags) {
          if (splitTags.includes(tag)) {
            return true;
          }
        }
      } else {
        return false;
      }
    });
  }
  return list;
}
function filterByTitleThenTagText(json) {
  let { list, attributes, search } = json;
  let newList = [];
  let nameList = [];
  let aList = attributes.split(",");
  for (let str of aList) {
    nameList.push(textAttributeFilter({ ...json, attribute: str }));
  }
  let newTagList = filterByTagText({ ...json });
  newList = [...nameList[0], ...newTagList, ...nameList[1], ...nameList[2]];
  newList = filterRemoveDupes(newList);
  return newList;
}
function filterByTextThenTitle(json) {
  let { list, attribute, tagList, attribute2, attributeTag, search } = json;
  let nameList = textAttributeFilter({ ...json, attribute });
  let newTagList = filterByTag({ ...json, attribute: attributeTag });
  let promoList = textAttributeFilter({ ...json, attribute: attribute2 });
  list = [...nameList, ...newTagList, ...promoList];
  let newList = filterRemoveDupes(list);
  return newList;
}
function filterRemoveDupes(list) {
  const uniqueItems = /* @__PURE__ */ new Map();
  list.forEach((item) => {
    const itemJson = item.getJson();
    const itemId = itemJson._id;
    if (!uniqueItems.has(itemId)) {
      uniqueItems.set(itemId, item);
    }
  });
  return Array.from(uniqueItems.values());
}
function textAttributeFilter(json) {
  let { list, attribute, search } = json;
  if (search && search.length > 0) {
    list = list.filter((obj) => {
      var _a;
      return (_a = obj.getJson()[attribute]) == null ? void 0 : _a.toLowerCase().includes(search == null ? void 0 : search.toLowerCase());
    });
  }
  return list;
}
function textFilter(json) {
  let { list, attribute, search } = json;
  if (search && search.length > 0) {
    list = list.filter((obj) => {
      var _a;
      return (_a = obj[attribute]) == null ? void 0 : _a.toLowerCase().includes(search == null ? void 0 : search.toLowerCase());
    });
  }
  return list;
}
function consistentlyFilterByTextAttributeList(json) {
  let { attributeList } = json;
  let newList = [];
  for (let attribute of attributeList) {
    newList = [...newList, ...textAttributeFilter({ ...json, attribute })];
  }
  newList = filterRemoveDupes(newList);
  return newList;
}
function filterByBool(json) {
  let { list, attribute, search } = json;
  list = list.filter((obj) => obj.getJson()[attribute] === search);
  return list;
}

// node_modules/flinntech/src/components/mapTech/mapComponentInterface.jsx
var import_jsx_runtime24 = __toESM(require_jsx_runtime());
var MapComponentInterface = class extends interfaceBaseClass_default {
  constructor() {
    super();
    __publicField(this, "FilterFactory");
    this.getFilterFactory();
    this.mainFunc = this.getMapComponent;
  }
  /**
   
   * @returns factory for map items
   */
  getFactory() {
    if (this.factory === void 0) {
      this.factory = new MapFactory();
    }
    return this.factory;
  }
  /**
   * 
   * @returns theme factory for map items
   */
  getThemeFactory() {
    if (this.themeFactory === void 0) {
      this.themeFactory = new ThemeFactory2();
    }
    return this.themeFactory;
  }
  /**
   * 
   * @returns singleton filter factory;
   */
  getFilterFactory() {
    if (this.filterFactory === void 0) {
      this.filterFactory = new FilterFactory();
    }
    return this.filterFactory;
  }
  /**
   * 
   * @param {*} props 
   * @param {*} type 
   * @returns Map component for ui mapping of objs
   */
  getMapComponent(props, type) {
    type = type || "default";
    let map = this.factory.getComponent(type, props);
    return map;
  }
};
var MapComponent = class extends InterfaceComponentBaseClass {
  /**
   * Constructor initializes the state and sets the interface to `mapInterface`.
   * @param {Object} props - The props passed to the component.
   */
  constructor(props) {
    super(props);
    this.state = {
      type: "map"
      // Sets the type to "map"
    };
    this.interface = mapInterface;
  }
  /**
   * Sets up the filter information by initializing the filter factory, filters, 
   * and the filter function from the component props.
   */
  setFilterInfo() {
    this.filterFacotry = this.interface.getFilterFactory();
    this.filters = this.props.filters;
    this.filterFunc = this.props.filterFunc;
    this.filter = this.props.filter;
  }
  /**
   * Sets the filter function (`filterFunc`) if it hasn't been set already,
   * by searching for a filter of type "filterFunc" from the `filters` array.
   */
  getFilterFunc() {
    var _a;
    if (!this.filterFunc && this.filters !== void 0) {
      let funcOb = (_a = this.filters) == null ? void 0 : _a.find((obj) => obj.type === "filterFunc");
      if (funcOb) {
        this.filterFunc = funcOb.func;
      }
    }
  }
  /**
   * Sets the filter object (`filter`) if it hasn't been set already,
   * by searching for a filter of type "filter" from the `filters` array.
   */
  getFilter() {
    var _a;
    if (!this.filter && this.filters !== void 0) {
      let filterOb = (_a = this.filters) == null ? void 0 : _a.find((obj) => obj.type === "filter");
      if (filterOb) {
        this.filter = { ...filterOb };
      }
    }
  }
  /**
   * Initializes the list by checking for the `list` prop or using the `filter`
   * to retrieve the list using the component list's `getList` method.
   */
  getList() {
    var _a, _b, _c, _d;
    let name = this.props.name;
    this.list = this.props.list ? this.props.list : this.filter ? (_c = this.componentList) == null ? void 0 : _c.getList(name, (_a = this.filter) == null ? void 0 : _a.search, (_b = this.filter) == null ? void 0 : _b.attribute) : (_d = this.componentList) == null ? void 0 : _d.getList(name);
  }
  /**
   * Filters the list using the `filterFunc` function if it exists.
   * If no `filterFunc` is defined, the list is left unchanged.
   */
  filterListByFilterFunc() {
    if (this.list) {
      this.list = this.list.filter((obj) => {
        if (this.filterFunc) {
          return this.filterFunc(obj);
        } else {
          return true;
        }
      });
    }
  }
  /**
   * Filters the list using the filter factory by applying each filter from the `filters` array.
   * The filters are applied sequentially to the list.
   */
  filterListByFilterFactory() {
    if (this.filters) {
      for (let obj of this.filters) {
        let func = this.filterFacotry.getFilter(obj.type);
        if (func) {
          this.list = func({ list: this.list, ...obj });
        }
      }
    }
  }
  /**
   * Sets the props for the component, including the `cells` and the filtered list.
   */
  setProps() {
    let cells = this.props.cells;
    this.addToProps = { cells, list: this.list };
  }
  /**
   * Pre-setup function that adds filter-related setup functions to the initial setup.
   * These functions are run before the component is fully set up.
   */
  componentPreSetup() {
    this.addToInitialSetup = [
      this.setFilterInfo,
      // Sets filter information
      this.getFilterFunc,
      // Retrieves the filter function
      this.getFilter,
      // Retrieves the filter object
      this.getList,
      // Initializes the list
      this.filterListByFilterFunc,
      // Filters the list by filter function
      this.filterListByFilterFactory
      // Filters the list by filter factory
    ];
  }
};
var SearchMapComponent = class extends import_react6.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }
  render() {
    let mapComponentInterface = mapInterface;
    let app = this.props.app ? this.props.app : mapComponentInterface.getApp();
    let componentList = mapComponentInterface == null ? void 0 : mapComponentInterface.getComponentList();
    let name = this.props.name;
    let attribute = this.props.attribute;
    let list = this.props.list ? this.props.list : componentList.getList(name);
    return (0, import_jsx_runtime24.jsxs)("div", { style: { display: "flex", flexDirection: "row" }, children: [
      this.props.imgLeft && (0, import_jsx_runtime24.jsx)("div", { style: { display: "flex", flexDirection: "column", justifyContent: "center", marginRight: "-41px" }, children: (0, import_jsx_runtime24.jsx)("img", { src: this.props.imgLeft, style: { width: "32px", height: "32px", opacity: "71%" } }) }),
      (0, import_jsx_runtime24.jsx)(
        "input",
        {
          autocomplete: "off",
          name: attribute,
          placeholder: this.props.placeholder ? this.props.placeholder : "Search...",
          style: this.props.style ? this.props.style : { width: "120px" },
          class: this.props.class ? this.props.class : "flinntechInput",
          onChange: (e) => {
            const { name: name2, value } = e.target;
            if (this.props.onTextChange) {
              this.props.onTextChange(e);
            } else {
              list = list.filter((obj) => obj.getJson()[attribute].includes(value));
              app.dispatch({ searchTags: [...list] });
            }
            if (this.props.callBackFunc) {
              this.props.callBackFunc(e, { list, attribute, name: name2 });
            }
          }
        }
      )
    ] });
  }
};
var mapInterface = new MapComponentInterface();

// node_modules/flinntech/src/components/navTech/navFactory.jsx
var import_react7 = __toESM(require_react());

// node_modules/flinntech/src/components/navTech/navMapContainer.jsx
var import_jsx_runtime25 = __toESM(require_jsx_runtime());
var NavMapContainer = class extends BaseComponent {
  /**
   * Constructor initializes state and sets up the props setup functions.
   * It also binds the `getNavLists` method to the list of initial props setup functions.
   * @param {Object} props - The properties passed to the component.
   */
  constructor(props) {
    super(props);
    this.initialPropsSetupFunctions = [...this.initialPropsSetupFunctions, this.getNavLists];
    this.state = {};
  }
  /**
   * Retrieves the links from either props or the app's state.
   * @returns {Array} - The links to be used by the navigation component.
   */
  getLinks() {
    var _a, _b;
    return this.props.links ? this.props.links : (_b = (_a = this.props.app) == null ? void 0 : _a.state) == null ? void 0 : _b.routes;
  }
  /**
   * Returns the default navigation item object for a given type.
   * @param {string} type - The type of navigation item (e.g., "logo", "links", "logout").
   * @returns {Object} - The object containing properties for the navigation item.
   */
  getDefaultNavItem(type) {
    let typeObs = {
      logo: { imgSrc: this.props.logoURL, label: this.props.logoLabel, ...this.props },
      links: { links: this.getLinks(), ...this.props, class: "fit" },
      logout: { logoutFunc: this.props.logoutFunc, auth: this.props.auth, wrapperClass: "SB-logout", ...this.props }
    };
    return typeObs[type];
  }
  /**
   * Builds the navigation list, updating it with default items if necessary.
   * Filters out the "links" item if the `type` is "topBar".
   * @returns {Array} - The list of navigation items.
   */
  getList() {
    let navList = this.props.navList;
    let list = navList.getList();
    for (let i = 0; i < list.length; i++) {
      if (list[i].default) {
        let obj = this.getDefaultNavItem(list[i].type);
        obj.type = list[i].type;
        navList.update(i, obj);
      }
    }
    if (this.props.type === "topBar") {
      list = list.filter((obj) => obj.type !== "links");
    }
    return list;
  }
  /**
   * Generates the HTML for the component using the `MapComponent` with the required properties.
   * @returns {JSX.Element} - The rendered MapComponent with appropriate props.
   */
  getHtml() {
    return (0, import_jsx_runtime25.jsx)(MapComponent, { theme: this.props.mapTheme, list: this.mapList, cells: this.list, ...this.props.navMapProps });
  }
  /**
   * Retrieves the navigation lists either from props or by generating them using `getList`.
   * Also sets the map list, either from props or defaults to an empty object.
   */
  getNavLists() {
    this.list = this.props.list ? this.props.list : this.getList();
    this.mapList = this.props.mapList ? this.props.mapList : [{}];
  }
};
var navMapContainer_default = NavMapContainer;

// node_modules/flinntech/src/components/navTech/navFactory.jsx
var import_jsx_runtime26 = __toESM(require_jsx_runtime());
var NavFactory = class {
  constructor() {
    __publicField(this, "factory", {
      default: navMapContainer_default
    });
  }
  /**
   * get a map item
   * @param {*} type 
   * @param {*} obj 
   * @returns a react item for the map
   */
  getComponent(type, props) {
    let Comp = void 0;
    if (this.factory[type]) {
      Comp = this.factory[type];
    }
    return (0, import_jsx_runtime26.jsx)(Comp, { ...props });
  }
  /**
   * register a new map component.
   * @param {*} type 
   * @param {*} comp 
   */
  registerComponent(type, comp) {
    this.factory[type] = comp;
  }
};

// node_modules/flinntech/src/components/navTech/menu.jsx
var import_jsx_runtime27 = __toESM(require_jsx_runtime());
import "/Users/alandavidson/flinntech/projects/salescaptureAI/salescaptureAI/node_modules/flinntech/src/components/navTech/nav.scss";
var Menu = class extends BaseComponent {
  /**
   * Constructor initializes the state with default properties for the menu.
   * @param {Object} props - The props passed to the component.
   */
  constructor(props) {
    super(props);
    this.state = {
      defaultStyle: "navMenu",
      // Default CSS class for the menu
      renderComp: void 0
      // Initially, there is no component rendered
    };
  }
  /**
   * Asynchronously opens the menu by invoking the `open` prop function.
   * If the `type` is "topBar", it toggles the state to either show or hide the component.
   */
  async open() {
    let component = await this.props.open();
    if (this.props.type === "topBar") {
      if (!this.state.renderComp) {
        this.setState({ renderComp: component });
      } else {
        this.setState({ renderComp: void 0 });
      }
    }
  }
  /**
   * Renders the menu component.
   * Displays the menu content and conditionally renders the component if `renderComp` is set.
   * @returns {JSX.Element} - The JSX for the Menu component.
   */
  render() {
    let app = this.props.app;
    return (0, import_jsx_runtime27.jsxs)("div", { children: [
      (0, import_jsx_runtime27.jsxs)("div", { onClick: this.open, className: this.props.menuClass ? this.props.menuClass : this.state.defaultStyle, children: [
        this.props.menuContent && (0, import_jsx_runtime27.jsx)(import_jsx_runtime27.Fragment, { children: this.props.menuContent }),
        " "
      ] }),
      this.state.renderComp && (0, import_jsx_runtime27.jsx)(import_jsx_runtime27.Fragment, { children: this.state.renderComp })
    ] });
  }
};
var menu_default = Menu;

// node_modules/flinntech/src/components/navTech/nav.jsx
var import_jsx_runtime28 = __toESM(require_jsx_runtime());
var Nav = class extends Card {
  /**
   * Constructor initializes the state of the Nav component with default values.
   * @param {Object} props - The props passed to the component.
   */
  constructor(props) {
    super(props);
    this.state = {
      ...this.state,
      defaultType: this.props.type ? this.props.type : "sideBar",
      // Default navigation type is "sideBar"
      typeKey: "layout",
      // Layout type key
      defaultNavType: "default",
      // Default navigation type
      phoneSize: 850,
      // Default threshold for phone layout
      left: -400
      // Default left offset for positioning
    };
  }
  /**
   * Returns props to be passed to the navigation component, including map theme and routes.
   * @returns {Object} - Props to be passed to the navigation component.
   */
  getProps() {
    var _a, _b;
    return {
      mapTheme: this.props.mapTheme || this.state.defaultType,
      // Sets the map theme
      links: this.props.links || ((_b = (_a = this.props.app) == null ? void 0 : _a.state) == null ? void 0 : _b.routes),
      // Sets the links (routes) for the menu
      ...this.props
      // Spread other props
    };
  }
  /**
   * Retrieves the navigation component based on the type.
   * @param {Object} props - The props to be passed to the component.
   * @returns {JSX.Element} - The rendered navigation component.
   */
  getFactoryComponent(props) {
    let type = this.props.mapType ? this.props.mapType : this.state.defaultNavType;
    let factory = this.props.factory;
    let navComponent = factory.getComponent(type, props);
    return navComponent;
  }
  /**
   * Component lifecycle method that runs after the component mounts.
   * Listens for window resize events and adjusts layout accordingly.
   */
  componentDidMount() {
    if (this.resize !== void 0) {
      window.addEventListener("resize", this.resize);
      this.resize();
    }
  }
  /**
   * Component lifecycle method that runs just before the component unmounts.
   * Removes window resize event listener.
   */
  componentWillUnmount() {
    if (this.resize !== void 0) {
      window.removeEventListener("resize", this.resize);
    }
  }
  /**
   * Resizes the layout based on the window's width.
   * Adjusts the state to switch between phone, tablet, and default layouts.
   */
  resize() {
    if (window.innerWidth < 850) {
      this.setState({
        phone: true,
        tablet: false,
        defaultType: this.props.phoneLayout ? this.props.phoneLayout : this.state.ogType ? this.state.ogType : this.state.defaultType,
        ogType: this.state.ogType ? this.state.ogType : this.state.defaultType
      });
      return;
    }
    if (window.innerWidth < 1224) {
      this.setState({
        phone: false,
        tablet: true,
        defaultType: this.props.tabletLayout ? this.props.tabletLayout : this.state.ogType ? this.state.ogType : this.state.defaultType,
        ogType: this.state.ogType ? this.state.ogType : this.state.defaultType
      });
      return;
    }
    if (window.innerWidth > 1224) {
      if (this.state.phone) {
        this.setState({ phone: false, defaultType: this.state.ogType });
      }
      if (this.state.tablet) {
        this.setState({ tablet: false, defaultType: this.state.ogType });
      }
    }
  }
  /**
   * Sets the style for the menu on click by updating the 'left' position.
   * @param {number} i - The position to set for the menu.
   */
  async setStyleOnMenuClick(i) {
    const delay = (ms) => new Promise((res) => setTimeout(res, ms));
    this.card.setStyle({ ...this.card.getStyle(), left: i.toString() + "px" });
    await this.setState({ left: i });
    await delay(10);
  }
  /**
   * Opens or closes the navigation based on the current state.
   * Animates the transition of the navigation sliding in and out.
   */
  async setNavOpenClose() {
    if (this.state.left === -400) {
      for (let i = -400; i < 600; i = i + 15) {
        if (i > 0) {
          this.setState({ left: 0 });
          break;
        }
        await this.setStyleOnMenuClick(i);
      }
    } else {
      for (let i = 0; i > -450; i = i - 15) {
        if (i < -400) {
          this.setState({ left: -400 });
          break;
        }
        await this.setStyleOnMenuClick(i);
      }
    }
  }
  /**
   * Opens or closes the links section of the navigation.
   * @returns {JSX.Element} - A card containing the map component with links.
   */
  async openCloseLinks() {
    var _a, _b;
    let linkContainer = (0, import_jsx_runtime28.jsx)(MapComponent, { list: this.props.links || ((_b = (_a = this.props.app) == null ? void 0 : _a.state) == null ? void 0 : _b.routes), cells: [{ type: "link" }] });
    let card = (0, import_jsx_runtime28.jsx)(Card, { content: linkContainer });
    return card;
  }
  /**
   * Opens or closes the navigation based on the current navigation type (topBar or sideBar).
   * @returns {JSX.Element} - The opened or closed navigation.
   */
  async openCloseNavFun() {
    let funcs = {
      topBar: this.openCloseLinks,
      // Open or close links for topBar
      sideBar: this.setNavOpenClose
      // Open or close sideBar
    };
    let openOrClose = await funcs[this.state.defaultType]();
    return openOrClose;
  }
  /**
   * Gets the menu component based on the provided or default menu type.
   * @returns {JSX.Element} - The rendered menu component.
   */
  getMenu() {
    let menu = this.props.menuComponent ? (0, import_jsx_runtime28.jsx)(this.props.menuComponent, { ...this.props.menuComponentProps, open: this.openCloseNavFun, type: this.state.defaultType }) : (0, import_jsx_runtime28.jsx)(menu_default, { open: this.openCloseNavFun, type: this.state.defaultType, ...this.props.menuComponentProps });
    return menu;
  }
  /**
   * Gets the content for the navigation, including the navigation component and the menu.
   * @returns {JSX.Element} - The rendered content for the Nav component.
   */
  getContent() {
    let props = this.getProps();
    let navComponent = this.getFactoryComponent(props);
    this.content = (0, import_jsx_runtime28.jsxs)(import_jsx_runtime28.Fragment, { children: [
      navComponent,
      this.props.type !== "type" && (this.state.phone || window.innerWidth < this.state.phoneSize) && (0, import_jsx_runtime28.jsx)(import_jsx_runtime28.Fragment, { children: this.getMenu() })
    ] });
    return this.content;
  }
};
var nav_default = Nav;

// node_modules/flinntech/src/components/navTech/navList.js
var NavList = class {
  /**
   * Constructor initializes the nav list with default items and binds methods.
   */
  constructor() {
    binder.bind(this);
    this.list = [
      { type: "logo", picURL: void 0, label: void 0, default: true },
      { type: "links", linkJson: void 0, default: true },
      { type: "logout", logoutFunc: void 0, auth: void 0, default: true }
    ];
  }
  /**
   * Sets the navigation list to the provided list.
   * @param {Array} list - The new list to set.
   */
  setList(list) {
    this.list = list;
  }
  /**
   * Retrieves the current navigation list.
   * @returns {Array} - The current list of navigation items.
   */
  getList() {
    return this.list;
  }
  /**
   * Inserts an item into the list at the specified index.
   * @param {number} index - The index at which to insert the item.
   * @param {Object} item - The item to insert into the list.
   */
  insert(index, item) {
    if (index < 0 || index >= this.list.length) {
      console.error("Index out of bounds");
      return;
    }
    this.list.splice(index, 0, item);
  }
  /**
   * Adds an item to the list either at the start or the end based on the `atStart` flag.
   * @param {Object} item - The item to add to the list.
   * @param {boolean} atStart - If true, item is added at the start, otherwise at the end.
   */
  add(item, atStart) {
    if (atStart) {
      this.list.unshift(item);
    } else {
      this.list.push(item);
    }
  }
  /**
   * Adds custom JSX to the navigation list.
   * @param {JSX.Element} jsx - The JSX element to add.
   * @param {number} index - The index where to insert the JSX element.
   * @param {boolean} start - If true, adds at the start, otherwise at the end.
   */
  addCustomJSX(jsx36, index, start) {
    let obj = { type: "custom", custom: jsx36 };
    if (index) {
      this.insert(index, obj);
    } else {
      this.add(obj, start);
    }
  }
  /**
   * Updates an item in the list at the specified index with new properties.
   * @param {number} index - The index of the item to update.
   * @param {Object} obj - The new properties to merge into the item.
   */
  update(index, obj) {
    if (index < 0 || index >= this.list.length) {
      console.error("Index out of bounds");
      return;
    }
    this.list[index] = { ...this.list[index], ...obj };
  }
  /**
   * Removes an item from the list at the specified index.
   * @param {number} index - The index of the item to remove.
   */
  remove(index) {
    if (index < 0 || index >= this.list.length) {
      console.error("Index out of bounds");
      return;
    }
    this.list.splice(index, 1);
  }
};
var navList_default = NavList;

// node_modules/flinntech/src/components/navTech/navInterface.jsx
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
var NavInterface = class extends interfaceBaseClass_default {
  // List of navigation items
  /**
   * Constructor initializes the interface and binds necessary methods.
   * Sets the main function to getNav.
   */
  constructor() {
    super();
    __publicField(this, "factory");
    // The factory that creates navigation components
    __publicField(this, "navList");
    binder.bind(this);
    this.getFactory();
    this.getNavList();
    this.mainFunc = this.getNav;
  }
  /**
   * Retrieves the factory for creating navigation components.
   * If it doesn't exist, creates a new instance of NavFactory.
   * @returns {NavFactory} - The NavFactory instance.
   */
  getFactory() {
    if (!this.factory) {
      this.factory = new NavFactory();
    }
    return this.factory;
  }
  /**
   * Creates a new Nav component with the given props.
   * @param {Object} props - The props to pass to the Nav component.
   * @returns {JSX.Element} - A Nav component.
   */
  getNav(props) {
    return (0, import_jsx_runtime29.jsx)(nav_default, { factory: this.factory, navInterface: this, navList: this.navList, ...props });
  }
  /**
   * Creates a new instance of NavList.
   * @returns {NavList} - A new NavList instance.
   */
  getNewNavList() {
    let navList = new navList_default();
    return navList;
  }
  /**
   * Forcefully sets the navigation list.
   * @param {NavList} navList - The navigation list to set.
   */
  setNavListForce(navList) {
    this.navList = navList;
  }
  /**
   * Retrieves the navigation list. If it doesn't exist, a new NavList is created.
   * @returns {NavList} - The current NavList.
   */
  getNavList() {
    if (!this.navList) {
      this.navList = this.getNewNavList();
    }
    return this.navList;
  }
};
var navInterface = new NavInterface();
var Navbar = class extends InterfaceComponentBaseClass {
  /**
   * Constructor initializes the Navbar with the provided props and binds to the navInterface.
   * @param {Object} props - The props passed to the Navbar component.
   */
  constructor(props) {
    super(props);
    this.interface = navInterface;
  }
};

// node_modules/flinntech/src/components/templateTech/factories/baseFactory.jsx
var BaseFactory = class {
  constructor() {
    __publicField(this, "factory", {});
  }
  /**
   * 
   * @param {} type 
   * @returns send back the type from the factory
   */
  getComponent(type) {
    return this.factory[type];
  }
  /**
   * allow registration of new types
   * @param {*} type 
   * @param {*} str 
   */
  registerComponent(type, str) {
    this.factory[type] = str;
  }
};
var baseFactory_default = BaseFactory;

// node_modules/flinntech/src/components/popupTech/popupContentFactory.js
var PopupContentFactory = class extends baseFactory_default {
  constructor() {
    super(...arguments);
    __publicField(this, "factory", {});
  }
};

// node_modules/flinntech/src/components/popupTech/popupMachine.jsx
var import_jsx_runtime30 = __toESM(require_jsx_runtime());
var PopupMachine = class extends BaseComponent {
  /**
   * Constructor initializes the component's state.
   * @param {Object} props - The properties passed to the component.
   */
  constructor(props) {
    super(props);
    this.state = {};
  }
  /**
   * Checks if the popup switch is active based on the props or app state.
   * @param {boolean} bool - The current state of the popup switch.
   * @returns {boolean} - Updated state indicating whether the popup should be displayed.
   */
  checkPopupSwitch(bool) {
    var _a, _b;
    this.popupSwitch = this.props.popupSwitch || ((_b = (_a = this.props.app) == null ? void 0 : _a.state) == null ? void 0 : _b.popupSwitch);
    if (this.popupSwitch !== "" && this.popupSwitch !== void 0) {
      bool = true;
    }
    return bool;
  }
  /**
   * Checks if the type of the current popup matches the expected type.
   * @param {boolean} bool - The current state of whether the popup type matches.
   * @returns {boolean} - Updated state indicating if the popup type is correct.
   */
  checkType(bool) {
    var _a, _b, _c, _d, _e;
    let component = this.props.currentPopupComponent || ((_b = (_a = this.props.app) == null ? void 0 : _a.state) == null ? void 0 : _b.currentPopupComponent);
    let type = (_c = this.popupFactory.getComponent(this.popupSwitch)) == null ? void 0 : _c.componentType;
    if (type) {
      component = this.isArray(component);
      bool = ((_e = (_d = component[0]) == null ? void 0 : _d.getJson()) == null ? void 0 : _e.type) === type && component.length > 0;
    }
    return bool;
  }
  /**
   * Renders the popup component if the popup should be displayed.
   * @returns {JSX.Element} - The rendered popup component or null if the popup should not be displayed.
   */
  render() {
    var _a;
    let displayPopup = this.checkPopupSwitch(false);
    if (displayPopup) {
      displayPopup = this.checkType(displayPopup);
    }
    this.popupFactory = this.props.factory || this.props.app.state.popupFactory;
    let component = (_a = this.popupFactory) == null ? void 0 : _a.getComponent(this.popupSwitch);
    return (0, import_jsx_runtime30.jsx)(import_jsx_runtime30.Fragment, { children: displayPopup && (component == null ? void 0 : component.content) && (0, import_jsx_runtime30.jsx)(
      Card,
      {
        content: (0, import_jsx_runtime30.jsx)(component.content, {}),
        popup: true,
        type: component.popupType || "biggerCard",
        theme: component.popupTheme || "Default",
        handleClose: () => {
          if (component.handleClose) {
            component.handleClose();
          } else {
            let currentComponent = this.props.app.state.currentPopupComponent;
            if (currentComponent) {
              this.props.app.state.operationsFactory.removeFromList(currentComponent);
            }
            this.props.app.dispatch({
              currentPopupComponent: void 0,
              popupSwitch: void 0
            });
          }
        }
      }
    ) });
  }
};

// node_modules/flinntech/src/components/popupTech/popupCreationInterface.jsx
var import_jsx_runtime31 = __toESM(require_jsx_runtime());
var PopupCreater = class extends interfaceBaseClass_default {
  constructor() {
    super();
    __publicField(this, "factory");
    binder.bind(this);
    this.getFactory();
  }
  /**
   * TODO: since we are doing this on every interface we might as well do this on the base class
   * @returns get a popup factory for the interface
   */
  getFactory() {
    if (!this.factory) {
      this.factory = new PopupContentFactory();
    }
    return this.factory;
  }
  /**
   * 
   * @param {} props 
   * @returns a react component that acts as the popup generator
   */
  createPopupMachine(props) {
    return (0, import_jsx_runtime31.jsx)(PopupMachine, { app: (props == null ? void 0 : props.app) || this.getAppComponent(), factory: this.factory });
  }
};
var popupCreater = new PopupCreater();

// node_modules/flinntech/src/components/serviceTech/Util/urlService.js
var UrlService = class {
  constructor() {
    /**
     * Converts a string into a valid URL by ensuring it starts with "http://" or "https://".
     * @param {string} string - The input string to convert.
     * @returns {string} - A valid URL string starting with "https://", or the original string if undefined.
     */
    __publicField(this, "convertStringToLink", (string) => {
      if (string) {
        if (!string.startsWith("http://") && !string.startsWith("https://")) {
          return "https://" + string;
        } else {
          return string;
        }
      }
      return string;
    });
  }
  /**
   * Checks if the given string is likely a valid URL.
   * This is based on common domain suffixes or the presence of "http(s)://" or "mailto:".
   * @param {string} url - The string to validate as a URL.
   * @returns {boolean} - True if the string is likely a URL, false otherwise.
   */
  isLikelyUrl(url) {
    return /\.(com|net|org|io|gov|edu|co)\b/.test(url) || /^(?:f|ht)tps?\:\/\//.test(url) || /^mailto\:/i.test(url);
  }
  /**
   * Checks if the current page's URL contains the specified string.
   * @param {string} s - The string to search for in the current URL.
   * @returns {boolean} - True if the string is found in the URL, false otherwise.
   */
  checkURLforString(s) {
    let href = window.location.href;
    return href.includes(s);
  }
  /**
   * Extracts an ID from the current page's URL based on its position and optional hyphen splitting.
   * @param {boolean} hyphen - Whether to split the ID by hyphens.
   * @param {number} index - The index of the ID in the split array. Defaults to the first element.
   * @returns {string} - The extracted ID from the URL.
   */
  getIdFromURL(hyphen, index) {
    let href = window.location.href;
    let splitURL = href.split("/");
    let id = splitURL[splitURL.length - 1];
    let idList = hyphen ? id.split("-") : [id];
    let campId = index ? idList[index] : idList[0];
    return campId;
  }
  /**
   * Extracts the second-to-last segment (typically the type) from the current page's URL.
   * @returns {string} - The type segment from the URL.
   */
  getTypeFromURL() {
    let href = window.location.href;
    let splitURL = href.split("/");
    let type = splitURL[splitURL.length - 2];
    return type;
  }
};
var urlService = new UrlService();

// node_modules/flinntech/src/components/serviceTech/APITech/APITemplates/getComponentTemplate.jsx
var GetComponentTemplate = class extends BaseComponent {
  /**
   * The constructor initializes the component with the provided properties and an optional object for configuration.
   * @param {Object} props - The component props.
   * @param {Object} obj - An optional configuration object.
   */
  constructor(props, obj) {
    super(props);
    __publicField(this, "dispatchItems", {});
    this.state = {
      ...this.state,
      type: obj == null ? void 0 : obj.type,
      // Type of component
      ids: obj == null ? void 0 : obj.ids,
      // IDs to fetch components by
      filterKeys: obj == null ? void 0 : obj.filterKeys,
      // Filter keys for component fetching
      path: obj == null ? void 0 : obj.path,
      // Path for URL-based fetching
      snapShot: obj == null ? void 0 : obj.snapShot,
      // Snapshot of the component
      owner: true
      // Whether the component has an owner (default to true)
    };
    if ((obj == null ? void 0 : obj.owner) === false) {
      this.state.owner = false;
    }
  }
  /**
   * This method fetches components from the backend based on the current state.
   * It first tries to get the components from the local component list, 
   * and if that fails, it fetches them from the backend.
   */
  async getComponentsFromBackend() {
    let { type, ids, filterKeys, path, snapShot, owner } = this.state;
    this.compList = await this.componentList.getList(type, ids, filterKeys);
    if (this.compList.length > 0) {
      await this.setState({
        gotComponents: true
      });
    }
    this.compList = await this.componentList.getComponentsFromBackend({ type, ids, filterKeys, path, snapShot, owner });
    this.setState({
      gotComponents: true,
      getComponentsFromBackend: true,
      components: this.compList,
      urlId: ids
    });
  }
  /**
   * This lifecycle method is called when the component is mounted.
   * It fetches components from the backend and sets up a listener for the back button in the browser.
   */
  async componentDidMount() {
    this.getComponentsFromBackend();
    let page = this;
    window.addEventListener("popstate", function(event) {
      page.onBackClick(event);
    });
  }
  /**
   * This method is called when the browser's back button is pressed.
   * It triggers a refresh of the components.
   * @param {Event} e - The event object associated with the back button click.
   */
  onBackClick(e) {
    this.getComponentsFromBackend();
  }
  /**
   * This lifecycle method is called when the component updates.
   * It ensures the components are re-fetched if certain conditions are met.
   */
  componentDidUpdate() {
    this.getComponentsAgain();
  }
  /**
   * This method re-fetches the components if the URL or component ID has changed.
   * It compares the current state with the previous URL to determine if a re-fetch is necessary.
   */
  async getComponentsAgain(props, state) {
    this.getFromURL();
    if (this.app.state.urlChange || this.state.reRender && this.urlId !== this.state.urlId) {
      await this.setState({ urlId: this.urlId });
      await this.dispatch({ urlChange: void 0 });
      this.forceRerender = false;
      this.getComponentsFromBackend();
    }
  }
  /**
   * This method fetches the type and ID of the component from the URL using a utility service.
   */
  async getFromURL() {
    this.urlType = urlService.getTypeFromURL();
    this.urlId = urlService.getIdFromURL();
  }
};

// node_modules/flinntech/src/components/serviceTech/APITech/APITemplates/getAllComponentsByUserTemplate.jsx
var GetAllComponents = class extends GetComponentTemplate {
  constructor(props, obj) {
    super(props, obj);
    __publicField(this, "dispatchItems", {});
    this.state = {
      ...this.state,
      type: obj == null ? void 0 : obj.type,
      ids: obj == null ? void 0 : obj.ids,
      filterKeys: obj == null ? void 0 : obj.filterKeys,
      path: obj == null ? void 0 : obj.path,
      snapShot: obj == null ? void 0 : obj.snapShot,
      owner: obj == null ? void 0 : obj.owner
    };
    if ((obj == null ? void 0 : obj.owner) === false) {
      this.state.owner = false;
    }
  }
  /**
   * get every component
   */
  async getComponentsFromBackend() {
    let { type, ids, filterKeys, path, snapShot, owner } = this.state;
    this.compList = await this.componentList.getComponents();
    if (this.compList.length > 0) {
      await this.setState({
        gotComponents: true
      });
    }
    this.compList = await this.componentList.getComponentsFromBackend({ type: this.state.owner, ids, filterKeys, path, snapShot, typeAttribute: "owner" });
    this.setState({
      gotComponents: true,
      getComponentsFromBackend: true,
      components: this.compList,
      urlId: ids
    });
  }
};

// node_modules/flinntech/src/components/serviceTech/APITech/APITemplates/getComponentsFromUrlTemplate.jsx
var GetComponentsFromUrl = class extends GetComponentTemplate {
  /**
   * This method fetches components from the backend, retrieves the first component, 
   * and gets associated items if the component exists.
   */
  async getComponentsFromBackend() {
    await this.getFromURL();
    await this.getFirstComponent();
    if (this.comp) {
      await this.getAssociatedItems();
    }
    this.setGotComponents();
  }
  /**
   * This method retrieves the first component based on the URL type and ID.
   * If the component is not found in the local list, it fetches it from the backend.
   * @param {string} urlType - Type of the component (optional).
   * @param {string} urlId - ID of the component (optional).
   */
  async getFirstComponent(urlType, urlId) {
    let type = urlType || this.urlType;
    let id = urlId || this.urlId;
    this.comp = this.componentList.getComponent(type, id);
    if (!this.comp) {
      this.comp = await this.componentList.getComponentsFromBackend({
        type,
        ids: id,
        filterKeys: "_id",
        // Filter by ID
        owner: this.state.owner
        // Specify the owner in the request
      });
      this.comp = this.comp.length > 0 ? this.comp[0] : void 0;
    }
  }
  /**
   * This method retrieves associated items for the component.
   * It first tries to fetch them from the component itself and then from the backend.
   */
  async getAssociatedItems() {
    this.compList = await this.comp.getAssociatedItems(this.state.itemTypes);
    if (this.compList.length > 0) {
      this.setState({
        gotComponents: true
      });
    }
    this.compList = await this.comp.getAssociatedItemsFromBackend(this.state.itemTypes);
    await this.setCurrentItems();
  }
  /**
   * This method updates the state with the current component and its associated items.
   */
  setCurrentItems() {
    this.dispatch({
      currentComponent: this.comp,
      ["current" + this.getCapitalFirstLetter(this.comp.getJson().type)]: this.comp,
      // Dynamically set the key based on the component type
      ...this.dispatchItems
      // Additional dispatch data (from parent or class context)
    });
  }
  /**
   * This method sets the state indicating that components have been successfully retrieved.
   */
  setGotComponents() {
    this.setState({
      gotComponents: true,
      gotComponentsFromBackend: true,
      // Mark that components were fetched from the backend
      components: this.compList,
      // Store the list of associated components
      urlId: this.urlId
      // Store the URL ID for reference
    });
  }
};

// node_modules/flinntech/src/components/templateTech/APITemplates/login.jsx
var import_jsx_runtime32 = __toESM(require_jsx_runtime());
var Login = class extends BaseComponent {
  constructor(props) {
    super(props);
    this.state = {
      ...this.state,
      email: "",
      password: ""
    };
  }
  /**
   * Validates the login form.
   * This placeholder always returns true but can be extended to include validation logic.
   * @returns {boolean} - Validation result.
   */
  validate() {
    return true;
  }
  /**
   * Handles input changes and updates the state.
   * @param {Event} e - The input change event.
   */
  onChange(e) {
    let { name, value } = e.target;
    this.setState({ [name]: value });
  }
  /**
   * Handles the form submission.
   * If validation passes, it calls the `login` method of the `APIService` with the entered email and password.
   */
  onSub() {
    if (this.validate()) {
      this.APIService.login(this.state.email, this.state.password);
    }
  }
  /**
   * Returns the JSX for the link to switch to the registration page.
   * @returns {JSX.Element} - Link to the "Sign Up" page.
   */
  getSwitchLink() {
    return (0, import_jsx_runtime32.jsxs)("div", { children: [
      "Don't have an Account? ",
      (0, import_jsx_runtime32.jsx)(Link, { to: "/register", children: "Sign Up" })
    ] });
  }
  /**
   * Sets up the required sub-components before rendering.
   */
  preSetup() {
    this.setComponents(["container", "header", "form", "submitButton"]);
  }
  /**
   * Returns the JSX for the header element.
   * @returns {JSX.Element} - Header HTML.
   */
  getHeaderHtml() {
    let headerHtml = this.header.getHtml({ type: "h1", content: "Login" });
    return headerHtml;
  }
  /**
   * Returns the JSX for the form element containing email and password inputs.
   * @returns {JSX.Element} - Form HTML.
   */
  getFormHtml() {
    let content = (0, import_jsx_runtime32.jsxs)(import_jsx_runtime32.Fragment, { children: [
      (0, import_jsx_runtime32.jsx)("div", { children: "Email" }),
      (0, import_jsx_runtime32.jsx)(
        "input",
        {
          className: "defaultInputFormAuth",
          name: "email",
          onChange: this.onChange,
          value: this.state.email
        }
      ),
      (0, import_jsx_runtime32.jsx)("div", { style: { marginTop: "10px" }, children: "Password" }),
      (0, import_jsx_runtime32.jsx)(
        "input",
        {
          className: "defaultInputFormAuth",
          name: "password",
          type: "password",
          onChange: this.onChange,
          value: this.state.password
        }
      )
    ] });
    this.form.setClass("defaultLoginForm");
    let formHtml = this.form.getHtml({ type: "div", content });
    return formHtml;
  }
  /**
   * Returns the JSX for the submit button element.
   * @returns {JSX.Element} - Submit button HTML.
   */
  getSubmitHtml() {
    this.submitButton.setClass("defaultLoginButton");
    this.submitButton.setOnClick(this.onSub);
    let submitHtml = this.submitButton.getHtml({ type: "div", content: "Submit" });
    return submitHtml;
  }
  /**
   * Returns the JSX for the container element, combining header, form, submit button, and switch link.
   * @returns {JSX.Element} - Container HTML.
   */
  getContainerHtml() {
    this.container.setClass(this.props.loginContainer || "fitCC");
    let html = (0, import_jsx_runtime32.jsxs)(import_jsx_runtime32.Fragment, { children: [
      this.getHeaderHtml(),
      this.getFormHtml(),
      this.getSubmitHtml(),
      this.getSwitchLink()
    ] });
    let containerHtml = this.container.getHtml({ type: "div", content: html });
    return containerHtml;
  }
  /**
   * Returns the full JSX for the login component wrapped in a card layout.
   * @returns {JSX.Element} - Full component HTML.
   */
  getHtml() {
    let html = this.getContainerHtml();
    let full = (0, import_jsx_runtime32.jsx)("div", { className: "fullCCLayoutRow", children: (0, import_jsx_runtime32.jsx)(Card, { type: this.props.loginCardType || "biggerCard", content: html }) });
    return full;
  }
};

// node_modules/flinntech/src/components/templateTech/APITemplates/register.jsx
var import_jsx_runtime33 = __toESM(require_jsx_runtime());
var Register = class extends Login {
  /**
   * change the onsub to allow registration
   */
  async onSub() {
    if (this.validate()) {
      let user = await this.APIService.register(this.state.email, this.state.password);
      if (!user.error) {
        let json = { type: "user", email: this.state.email, _id: this.state.email };
        user = await this.componentList.addComponents(json);
        window.history.pushState({}, "", "/");
        this.dispatch({ currentUser: user });
      }
    }
  }
  /**
   * 
   * @returns ui to change the heading to register
   */
  getHeaderHtml() {
    let headerHtml = this.header.getHtml({ type: "h1", content: "Register" });
    return headerHtml;
  }
  /**
   * 
   * @returns creates a link to go back to login
   */
  getSwitchLink() {
    return (0, import_jsx_runtime33.jsxs)("div", { children: [
      "Have an Account? ",
      (0, import_jsx_runtime33.jsx)(Link, { to: "/login", children: "Login" })
    ] });
  }
};

// node_modules/flinntech/src/components/templateTech/baseClasses/AppBaseClass.jsx
import "/Users/alandavidson/flinntech/projects/salescaptureAI/salescaptureAI/node_modules/flinntech/src/components/templateTech/baseClasses/App.scss";
import "/Users/alandavidson/flinntech/projects/salescaptureAI/salescaptureAI/node_modules/flinntech/src/components/cardTech/layouts.scss";
import "/Users/alandavidson/flinntech/projects/salescaptureAI/salescaptureAI/node_modules/flinntech/src/components/cardTech/page.scss";
import "/Users/alandavidson/flinntech/projects/salescaptureAI/salescaptureAI/node_modules/flinntech/src/components/cardTech/card.scss";
import "/Users/alandavidson/flinntech/projects/salescaptureAI/salescaptureAI/node_modules/flinntech/src/components/cardTech/colors.scss";

// node_modules/flinntech/src/components/linkTech/router.jsx
var import_jsx_runtime34 = __toESM(require_jsx_runtime());
var Router = class extends BaseComponent {
  /**
   * Initializes the Router component with default state values.
   * @param {Object} props - Properties passed to the Router component.
   */
  constructor(props) {
    super(props);
    this.state = {
      ...this.state,
      routes: [],
      // Stores the list of application routes
      loginComp: Login,
      // Default login component
      registerComp: Register
      // Default register component
    };
  }
  /**
   * Adds a new route to the router.
   * @param {Object} route - The route object to add.
   */
  addToRouter(route) {
    let routes = [...this.state.routes, route];
    this.setState({ routes });
  }
  /**
   * Maps a list of route objects to Route components for rendering.
   * @param {Array} routes - The list of route objects.
   * @param {Object} props - Additional props to pass to each route's component.
   * @returns {JSX.Element[]} A list of Route components.
   */
  getRouteMap(routes, props) {
    let mapp = (0, import_jsx_runtime34.jsx)(import_jsx_runtime34.Fragment, {});
    if (routes) {
      routes = [...routes];
      mapp = routes == null ? void 0 : routes.map((obj, index) => {
        if (!obj.path) {
          obj.path = this.classNameToString(obj.comp);
          if (index === 0) {
            obj.path = "/";
          }
        }
        return (0, import_jsx_runtime34.jsxs)(import_jsx_runtime34.Fragment, { children: [
          (0, import_jsx_runtime34.jsx)(Route, { path: obj.path, element: (0, import_jsx_runtime34.jsx)(obj.comp, { props: { ...props, ...obj.props } }) }),
          (0, import_jsx_runtime34.jsx)(Route, { path: obj.path + "/:id", element: (0, import_jsx_runtime34.jsx)(obj.comp, { props: { ...props, ...obj.props } }) })
        ] });
      });
    }
    return mapp;
  }
  /**
   * Generates the routes to render within the application.
   * If no user is logged in, renders the user authentication routes.
   * @param {Array} routes - The list of route objects.
   * @param {Object} props - Additional props to pass to each route's component.
   * @returns {JSX.Element} A Routes component containing the mapped routes.
   */
  getRoutes(routes, props) {
    var _a;
    let renderRoutes = (0, import_jsx_runtime34.jsxs)(Routes, { children: [
      this.getRouteMap(routes, props),
      this.state.routes.map(
        (r, index) => (0, import_jsx_runtime34.jsx)(import_jsx_runtime34.Fragment, { children: r })
      )
    ] });
    if (!((_a = this.app) == null ? void 0 : _a.state.currentUser)) {
      renderRoutes = this.getUserAuthRoutes(props);
    }
    return renderRoutes;
  }
  /**
   * Renders the user authentication routes (login and register).
   * @param {Object} props - Additional props to pass to each route's component.
   * @returns {JSX.Element} A Routes component containing login and register routes.
   */
  getUserAuthRoutes(props) {
    let LoginComp = props.loginComp || this.state.loginComp;
    let RegisterComp = props.registerComp || this.state.registerComp;
    let routes = (0, import_jsx_runtime34.jsxs)(Routes, { children: [
      (0, import_jsx_runtime34.jsx)(Route, { path: "/", element: (0, import_jsx_runtime34.jsx)(LoginComp, { props: { ...props } }) }),
      (0, import_jsx_runtime34.jsx)(Route, { path: "/login", element: (0, import_jsx_runtime34.jsx)(LoginComp, { props: { ...props } }) }),
      (0, import_jsx_runtime34.jsx)(Route, { path: "/register", element: (0, import_jsx_runtime34.jsx)(RegisterComp, { props: { ...props } }) })
    ] });
    return routes;
  }
  /**
   * Renders the Router component's HTML structure.
   * Dynamically determines the routes to render based on the application state and props.
   * @returns {JSX.Element} The rendered Router component.
   */
  getHtml() {
    var _a;
    let props = { ...this.props };
    props.app = this.app;
    let state = (_a = this.app) == null ? void 0 : _a.state;
    let routes = this.props.routes || (state == null ? void 0 : state.routes);
    let renderRoutes = this.getRoutes(routes, props);
    return (0, import_jsx_runtime34.jsx)(import_jsx_runtime34.Fragment, { children: renderRoutes });
  }
};
var router_default = Router;

// node_modules/flinntech/src/components/templateTech/baseClasses/baseRegistry.js
var BaseRegistry = class {
  constructor() {
    __publicField(this, "registry", {});
  }
  getRegistry() {
    return this.registry;
  }
  addToRegistry(type, item) {
    this.registry[type] = item;
  }
  getItemFromRegistry(type) {
    return this.registry[type];
  }
};
var baseRegistry_default = BaseRegistry;

// node_modules/flinntech/src/components/templateTech/baseClasses/AppBaseClass.jsx
var import_jsx_runtime35 = __toESM(require_jsx_runtime());
var AppBaseClass = class extends BaseComponent {
  // Additional properties for popup components.
  /**
   * Constructor
   * 
   * Initializes the app's core state, component list, and factories. Also processes configuration 
   * and popup components passed via props or other parameters.
   * 
   * @param {Object} props - The props passed to the app component.
   * @param {Object} obj - Configuration object containing app dependencies like endpoint, db, etc.
   * @param {Array} components - List of components to register with the factory.
   */
  constructor(props, obj, components) {
    super(props);
    __publicField(this, "endpoint");
    // Endpoint for API communication.
    __publicField(this, "db");
    // Database instance.
    __publicField(this, "storage");
    // Storage instance for file handling.
    __publicField(this, "auth");
    // Authentication instance.
    __publicField(this, "popupComponents");
    // Predefined popup components.
    __publicField(this, "popupComponentsProps");
    obj = this.props.config || obj;
    this.popupComponents = this.props.popupComponents;
    this.componentListInterface = new ComponentListInterface(this.dispatch, obj.endpoint, obj.db, obj.storage, obj.auth);
    this.componentList = this.componentListInterface.createComponentList();
    this.factory = this.componentListInterface.getFactory();
    this.operationsFactory = this.componentList.getOperationsFactory();
    this.interfaceRegistry = new baseRegistry_default();
    this.initialPropsSetupFunctions = [this.propogateApp, ...this.initialPropsSetupFunctions];
    this.state = {
      componentList: this.componentList,
      componentListInterface: this.componentListInterface,
      operationsFactory: this.operationsFactory,
      factory: this.factory,
      theme: this.props.theme || "default",
      pageClass: this.props.pageClass || "fullScreen",
      pageStyle: this.props.pageStyle,
      extraRouteKey: this.props.extraRouteKey || "extraRoutes",
      navBarProps: this.props.NavBarProps || {},
      popupFactory: popupCreater.getFactory(),
      popups: this.props.popups || [],
      global: this.props.global || {},
      routes: this.props.routes || []
    };
    if (components) {
      this.registerListWithFactory(components);
    }
  }
  /**
   * checkForUser
   * 
   * Checks if a user is currently logged in and retrieves their details if they are authenticated.
   */
  async checkForUser() {
    let user = await this.APIService.getCurrentUser();
    if (user) {
      let loggedIn = await this.APIService.checkIfLoggedIn();
      if (loggedIn) {
        this.APIService.getuser(user.email);
      }
    }
  }
  /**
   * componentDidMount
   * 
   * Lifecycle method triggered after the component is mounted. Initiates user authentication checks.
   */
  componentDidMount() {
    this.checkForUser();
  }
  /**
   * registerListWithFactory
   * 
   * Registers a list of components with the factory, enabling dynamic component creation.
   * 
   * @param {Array} list - List of components to register.
   */
  registerListWithFactory(list) {
    for (let c of list) {
      let obj = new c();
      let type = obj.getJson().type;
      this.factory.registerComponents({ name: type, component: c });
      this.createPopupDefaultsByType(type);
    }
  }
  /**
   * createPopupDefaultsByType
   * 
   * Creates default popup configurations for a given component type.
   * 
   * @param {String} type - The type of the component for which popups are to be created.
   */
  createPopupDefaultsByType(type) {
    var _a;
    if ((_a = this.popupComponents) == null ? void 0 : _a[type]) {
      let str = this.getCapitalFirstLetter(type);
      let add = { content: this.popupComponents[type], popupSwitch: "add" + str, componentType: type };
      let update = { ...add, popupSwitch: "update" + str };
      this.state.popups = [...this.state.popups, add, update];
    }
  }
  /**
   * dispatch
   * 
   * Updates the component's state with the provided object.
   * 
   * @param {Object} obj - The object containing state updates.
   */
  dispatch(obj) {
    obj = obj || {};
    this.setState({ ...obj });
  }
  /**
   * setPopups
   * 
   * Registers all configured popups with the popup factory.
   */
  setPopups() {
    for (let obj of this.state.popups) {
      let t = obj.componentType;
      if (t) {
        obj = { ...obj, ...this.popupComponentsProps[t] };
      }
      if (!obj.popupSwitch) {
        obj.popupSwitch = this.classNameToString(obj.content);
      }
      this.state.popupFactory.registerComponent(obj.popupSwitch, obj);
    }
  }
  /**
   * propogateApp
   * 
   * Propagates the app's state and dispatch method to various interfaces, ensuring global availability.
   */
  propogateApp() {
    this.app = { state: this.state, dispatch: this.dispatch.bind(this), ...this.state.global };
    mapInterface.setAppComponent(this.app);
    formInterface.setAppComponent(this.app);
    cardInterface.setAppComponent(this.app);
    navInterface.setAppComponent(this.app);
    appInterface.setAppComponent(this.app);
  }
  /**
   * getHtml
   * 
   * Generates the HTML structure for the application, including the router, navbar, and popups.
   * 
   * @param {Object} Content - Optional content component to render within the app structure.
   * @returns {JSX.Element} The full HTML structure for the app.
   */
  getHtml(Content) {
    this.setPopups();
    let routes = [...this.state.routes];
    if (this.state[this.state.extraRouteKey]) {
      routes = [...routes, ...this.state[this.state.extraRouteKey]];
    }
    return (0, import_jsx_runtime35.jsx)("div", { className: this.state.pageClass, style: this.state.pageStyle, children: (0, import_jsx_runtime35.jsxs)(BrowserRouter, { children: [
      popupCreater.createPopupMachine({ app: this.app }),
      this.state.currentUser && (0, import_jsx_runtime35.jsx)(Navbar, { ...this.state.navBarProps }),
      Content ? (0, import_jsx_runtime35.jsx)(Content.content, { props: { ...Content.props } }) : (0, import_jsx_runtime35.jsx)(import_jsx_runtime35.Fragment, {}),
      (0, import_jsx_runtime35.jsx)(router_default, { routes })
    ] }) });
  }
};
var AppBaseClass_default = AppBaseClass;

// node_modules/flinntech/src/components/templateTech/factories/interfaceFactory.jsx
var InterfaceSingletonFactory = class extends baseFactory_default {
  constructor() {
    super(...arguments);
    __publicField(this, "factory", { form: formInterface, map: mapInterface, nav: navInterface });
  }
};
var InterfaceCreationFactory = class extends BaseClassFactory {
  constructor() {
    super(...arguments);
    __publicField(this, "factory", { form: FormComponentInterface, map: MapComponentInterface, nav: NavInterface });
  }
};
var interfaceSingletonFactory = new InterfaceCreationFactory();
var interfaceCreationFactory = new InterfaceCreationFactory();

// node_modules/flinntech/src/components/templateTech/pageTemplates/pageTemplate.jsx
var import_jsx_runtime36 = __toESM(require_jsx_runtime());
var PageTemplate = class extends BaseComponent {
  constructor(props) {
    super(props);
    this.state = {
      defaultClass: "fit"
    };
  }
  render() {
    return (0, import_jsx_runtime36.jsx)("div", { style: this.props.pageStyle, className: this.props.pageClass || this.state.defaultClass });
  }
};
export {
  AddButton2 as AddButton,
  AppBaseClass_default as AppBaseClass,
  AppInterface,
  auth_service_default as Auth,
  BaseButton,
  BaseClass,
  BaseClassFactory,
  BaseComponent,
  baseFactory_default as BaseFactory,
  interfaceBaseClass_default as BaseInterface,
  baseObserver_default as BaseObserver,
  BaseReactFactory,
  Binder,
  builderObserver_default as BuilderObserver,
  Button,
  Card,
  CardInterface,
  ComponentListInterface,
  DelButton2 as DelButton,
  DelItem,
  EditItem,
  FormComponentInterface,
  GetAllComponents,
  GetComponentTemplate,
  GetComponentsFromUrl,
  HtmlBuilderBaseClass,
  InputBaseClass,
  InterfaceComponentBaseClass,
  InterfaceCreationFactory,
  InterfaceSingletonFactory,
  Login,
  MapComponent,
  MapComponentInterface,
  BaseClass2 as MapItemBaseClass,
  MathService,
  NavInterface,
  navMapContainer_default as NavMapContainer,
  Navbar,
  PageTemplate,
  ParentFormComponent,
  PopupButton2 as PopupButton,
  PopupCreater,
  QuearyGenerator,
  Register,
  RunButton2 as RunButton,
  SearchMapComponent,
  UpdateButton2 as UpdateButton,
  UploadButton,
  UrlService,
  appInterface,
  binder,
  cardInterface,
  formInterface,
  interfaceCreationFactory,
  interfaceSingletonFactory,
  mapInterface,
  mathService,
  navInterface,
  popupCreater,
  urlService
};
/*! Bundled license information:

quill/dist/quill.js:
  (*!
   * Quill Editor v1.3.7
   * https://quilljs.com/
   * Copyright (c) 2014, Jason Chen
   * Copyright (c) 2013, salesforce.com
   *)
*/
//# sourceMappingURL=flinntech.js.map
